

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Thu Mar 05 02:16:53 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	18F452
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1,group=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1,group=2
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    58  0000                     
    59                           ; Version 2.10
    60                           ; Generated 31/07/2019 GMT
    61                           ; 
    62                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution.
    76                           ; 
    77                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    78                           ;        software without specific prior written permission.
    79                           ; 
    80                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    81                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    82                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    83                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    84                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    85                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    86                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    87                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    88                           ; 
    89                           ; 
    90                           ; Code-generator required, PIC18F452 Definitions
    91                           ; 
    92                           ; SFR Addresses
    93  0000                     
    94                           	psect	idataCOMRAM
    95  002302                     __pidataCOMRAM:
    96                           	opt callstack 0
    97                           
    98                           ;initializer for TIM_Update@Tim_Counter
    99  002302  0014               	dw	20
   100                           
   101                           ;initializer for _Last_Valid_Key
   102  002304  0F                 	db	15
   103                           
   104                           ;initializer for Disp_Update@Disp_Counter
   105  002305  0A                 	db	10
   106                           
   107                           ;initializer for LCD_Update@LCD_Update_Counter
   108  002306  14                 	db	20
   109                           
   110                           ;initializer for MW_Update@MW_Update_Counter
   111  002307  0A                 	db	10
   112                           
   113                           ;initializer for _Current_Count_State
   114  002308  04                 	db	4
   115                           
   116                           ;initializer for MW_Update@Pressed_Key
   117  002309  0C                 	db	12
   118  0000                     _TMR0	set	4054
   119  0000                     _PORTC	set	3970
   120  0000                     _TRISC	set	3988
   121  0000                     _PORTB	set	3969
   122  0000                     _TRISB	set	3987
   123  0000                     _PORTE	set	3972
   124  0000                     _TRISE	set	3990
   125  0000                     _PORTD	set	3971
   126  0000                     _TRISD	set	3989
   127  0000                     _T0CS	set	32429
   128  0000                     _GIE	set	32663
   129  0000                     _TMR0IE	set	32661
   130  0000                     _TMR0IF	set	32658
   131  0000                     _TMR0ON	set	32431
   132  0000                     _PSA	set	32427
   133  0000                     _T0PS0	set	32424
   134  0000                     _T0PS1	set	32425
   135  0000                     _T0PS2	set	32426
   136                           
   137                           	psect	smallconst
   138  000600                     __psmallconst:
   139                           	opt callstack 0
   140  000600  00                 	db	0
   141  000601                     STR_1:
   142  000601  20                 	db	32
   143  000602  48                 	db	72	;'H'
   144  000603  65                 	db	101	;'e'
   145  000604  61                 	db	97	;'a'
   146  000605  74                 	db	116	;'t'
   147  000606  69                 	db	105	;'i'
   148  000607  6E                 	db	110	;'n'
   149  000608  67                 	db	103	;'g'
   150  000609  20                 	db	32
   151  00060A  20                 	db	32
   152  00060B  20                 	db	32
   153  00060C  20                 	db	32
   154  00060D  20                 	db	32
   155  00060E  20                 	db	32
   156  00060F  20                 	db	32
   157  000610  20                 	db	32
   158  000611  20                 	db	32
   159  000612  00                 	db	0
   160  000613                     STR_2:
   161  000613  20                 	db	32
   162  000614  20                 	db	32
   163  000615  20                 	db	32
   164  000616  20                 	db	32
   165  000617  49                 	db	73	;'I'
   166  000618  73                 	db	115	;'s'
   167  000619  20                 	db	32
   168  00061A  46                 	db	70	;'F'
   169  00061B  69                 	db	105	;'i'
   170  00061C  6E                 	db	110	;'n'
   171  00061D  69                 	db	105	;'i'
   172  00061E  73                 	db	115	;'s'
   173  00061F  68                 	db	104	;'h'
   174  000620  65                 	db	101	;'e'
   175  000621  64                 	db	100	;'d'
   176  000622  20                 	db	32
   177  000623  20                 	db	32
   178  000624  00                 	db	0
   179  000625                     STR_3:
   180  000625  20                 	db	32
   181  000626  20                 	db	32
   182  000627  20                 	db	32
   183  000628  20                 	db	32
   184  000629  57                 	db	87	;'W'
   185  00062A  45                 	db	69	;'E'
   186  00062B  4C                 	db	76	;'L'
   187  00062C  43                 	db	67	;'C'
   188  00062D  4F                 	db	79	;'O'
   189  00062E  4D                 	db	77	;'M'
   190  00062F  45                 	db	69	;'E'
   191  000630  20                 	db	32
   192  000631  21                 	db	33
   193  000632  20                 	db	32
   194  000633  20                 	db	32
   195  000634  20                 	db	32
   196  000635  00                 	db	0
   197  000636                     STR_6:
   198  000636  20                 	db	32
   199  000637  20                 	db	32
   200  000638  20                 	db	32
   201  000639  50                 	db	80	;'P'
   202  00063A  75                 	db	117	;'u'
   203  00063B  74                 	db	116	;'t'
   204  00063C  20                 	db	32
   205  00063D  46                 	db	70	;'F'
   206  00063E  6F                 	db	111	;'o'
   207  00063F  6F                 	db	111	;'o'
   208  000640  64                 	db	100	;'d'
   209  000641  20                 	db	32
   210  000642  21                 	db	33
   211  000643  20                 	db	32
   212  000644  20                 	db	32
   213  000645  20                 	db	32
   214  000646  00                 	db	0
   215  000647                     STR_9:
   216  000647  20                 	db	32
   217  000648  20                 	db	32
   218  000649  20                 	db	32
   219  00064A  53                 	db	83	;'S'
   220  00064B  65                 	db	101	;'e'
   221  00064C  74                 	db	116	;'t'
   222  00064D  20                 	db	32
   223  00064E  54                 	db	84	;'T'
   224  00064F  69                 	db	105	;'i'
   225  000650  6D                 	db	109	;'m'
   226  000651  65                 	db	101	;'e'
   227  000652  20                 	db	32
   228  000653  21                 	db	33
   229  000654  20                 	db	32
   230  000655  20                 	db	32
   231  000656  20                 	db	32
   232  000657  00                 	db	0
   233  000658                     STR_7:
   234  000658  20                 	db	32
   235  000659  20                 	db	32
   236  00065A  20                 	db	32
   237  00065B  43                 	db	67	;'C'
   238  00065C  6C                 	db	108	;'l'
   239  00065D  6F                 	db	111	;'o'
   240  00065E  73                 	db	115	;'s'
   241  00065F  65                 	db	101	;'e'
   242  000660  20                 	db	32
   243  000661  44                 	db	68	;'D'
   244  000662  6F                 	db	111	;'o'
   245  000663  6F                 	db	111	;'o'
   246  000664  72                 	db	114	;'r'
   247  000665  20                 	db	32
   248  000666  21                 	db	33
   249  000667  20                 	db	32
   250  000668  00                 	db	0
   251  000669                     STR_4:
   252  000669  20                 	db	32
   253  00066A  20                 	db	32
   254  00066B  50                 	db	80	;'P'
   255  00066C  72                 	db	114	;'r'
   256  00066D  65                 	db	101	;'e'
   257  00066E  73                 	db	115	;'s'
   258  00066F  73                 	db	115	;'s'
   259  000670  20                 	db	32
   260  000671  41                 	db	65	;'A'
   261  000672  6E                 	db	110	;'n'
   262  000673  79                 	db	121	;'y'
   263  000674  20                 	db	32
   264  000675  4B                 	db	75	;'K'
   265  000676  65                 	db	101	;'e'
   266  000677  79                 	db	121	;'y'
   267  000678  20                 	db	32
   268  000679  00                 	db	0
   269  00067A                     STR_8:
   270  00067A  20                 	db	32
   271  00067B  20                 	db	32
   272  00067C  20                 	db	32
   273  00067D  20                 	db	32
   274  00067E  50                 	db	80	;'P'
   275  00067F  61                 	db	97	;'a'
   276  000680  75                 	db	117	;'u'
   277  000681  73                 	db	115	;'s'
   278  000682  65                 	db	101	;'e'
   279  000683  64                 	db	100	;'d'
   280  000684  20                 	db	32
   281  000685  21                 	db	33
   282  000686  20                 	db	32
   283  000687  20                 	db	32
   284  000688  20                 	db	32
   285  000689  00                 	db	0
   286  00068A                     STR_5:
   287  00068A  20                 	db	32
   288  00068B  20                 	db	32
   289  00068C  20                 	db	32
   290  00068D  20                 	db	32
   291  00068E  20                 	db	32
   292  00068F  48                 	db	72	;'H'
   293  000690  65                 	db	101	;'e'
   294  000691  61                 	db	97	;'a'
   295  000692  74                 	db	116	;'t'
   296  000693  69                 	db	105	;'i'
   297  000694  6E                 	db	110	;'n'
   298  000695  67                 	db	103	;'g'
   299  000696  2E                 	db	46
   300  000697  2E                 	db	46
   301  000698  2E                 	db	46
   302  000699  00                 	db	0
   303                           
   304                           ; #config settings
   305  00069A  00                 	db	0	; dummy byte at the end
   306  0000                     
   307                           	psect	cinit
   308  00202C                     __pcinit:
   309                           	opt callstack 0
   310  00202C                     start_initialization:
   311                           	opt callstack 0
   312  00202C                     __initialization:
   313                           	opt callstack 0
   314                           
   315                           ; Initialize objects allocated to COMRAM (8 bytes)
   316                           ; load TBLPTR registers with __pidataCOMRAM
   317  00202C  0E02               	movlw	low __pidataCOMRAM
   318  00202E  6EF6               	movwf	tblptrl,c
   319  002030  0E23               	movlw	high __pidataCOMRAM
   320  002032  6EF7               	movwf	tblptrh,c
   321  002034  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   322  002036  6EF8               	movwf	tblptru,c
   323  002038  EE00  F070         	lfsr	0,__pdataCOMRAM
   324  00203C  EE10 F008          	lfsr	1,8
   325  002040                     copy_data0:
   326  002040  0009               	tblrd		*+
   327  002042  CFF5 FFEE          	movff	tablat,postinc0
   328  002046  50E5               	movf	postdec1,w,c
   329  002048  50E1               	movf	fsr1l,w,c
   330  00204A  E1FA               	bnz	copy_data0
   331                           
   332                           ; Clear objects allocated to BANK0 (16 bytes)
   333  00204C  EE00  F080         	lfsr	0,__pbssBANK0
   334  002050  0E10               	movlw	16
   335  002052                     clear_0:
   336  002052  6AEE               	clrf	postinc0,c
   337  002054  06E8               	decf	wreg,f,c
   338  002056  E1FD               	bnz	clear_0
   339                           
   340                           ; Clear objects allocated to COMRAM (74 bytes)
   341  002058  EE00  F001         	lfsr	0,__pbssCOMRAM
   342  00205C  0E4A               	movlw	74
   343  00205E                     clear_1:
   344  00205E  6AEE               	clrf	postinc0,c
   345  002060  06E8               	decf	wreg,f,c
   346  002062  E1FD               	bnz	clear_1
   347  002064                     end_of_initialization:
   348                           	opt callstack 0
   349  002064                     __end_of__initialization:
   350                           	opt callstack 0
   351  002064  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   352  002066  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   353  002068  0E00               	movlw	low (__Lmediumconst shr (0+16))
   354  00206A  6EF8               	movwf	tblptru,c
   355  00206C  0100               	movlb	0
   356  00206E  EFB2  F010         	goto	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMRAM
   359  000001                     __pbssCOMRAM:
   360                           	opt callstack 0
   361  000001                     _Keypad_Recv_Buffer:
   362                           	opt callstack 0
   363  000001                     	ds	7
   364  000008                     _SWs_Info:
   365                           	opt callstack 0
   366  000008                     	ds	6
   367  00000E                     Keypad_Update@Keypad_Update_Counter:
   368                           	opt callstack 0
   369  00000E                     	ds	2
   370  000010                     _TIM_CurrentTime:
   371                           	opt callstack 0
   372  000010                     	ds	2
   373  000012                     Disp_and_Blink_Time@Blink_Counter:
   374                           	opt callstack 0
   375  000012                     	ds	2
   376  000014                     SW_Update@SW_counter:
   377                           	opt callstack 0
   378  000014                     	ds	2
   379  000016                     	ds	1
   380  000017                     	ds	1
   381  000018                     	ds	1
   382  000019                     Keypad_Scan@Old_Key:
   383                           	opt callstack 0
   384  000019                     	ds	1
   385  00001A                     _KEYPAD_writing_index:
   386                           	opt callstack 0
   387  00001A                     	ds	1
   388  00001B                     _KEYPAD_reading_index:
   389                           	opt callstack 0
   390  00001B                     	ds	1
   391  00001C                     _TIM_Current_Count_State:
   392                           	opt callstack 0
   393  00001C                     	ds	1
   394  00001D                     Toggle_Lamps@Lamp_counter:
   395                           	opt callstack 0
   396  00001D                     	ds	1
   397  00001E                     _Disp_Current_State:
   398                           	opt callstack 0
   399  00001E                     	ds	1
   400  00001F                     _Disp_Current_Count_State:
   401                           	opt callstack 0
   402  00001F                     	ds	1
   403  000020                     _Sec_Ten:
   404                           	opt callstack 0
   405  000020                     	ds	1
   406  000021                     _Sec_Unit:
   407                           	opt callstack 0
   408  000021                     	ds	1
   409  000022                     _Min_Ten:
   410                           	opt callstack 0
   411  000022                     	ds	1
   412  000023                     _Min_Unit:
   413                           	opt callstack 0
   414  000023                     	ds	1
   415  000024                     MW_Update@Sec_Ten_val:
   416                           	opt callstack 0
   417  000024                     	ds	1
   418  000025                     MW_Update@Sec_Unit_val:
   419                           	opt callstack 0
   420  000025                     	ds	1
   421  000026                     MW_Update@Min_Ten_val:
   422                           	opt callstack 0
   423  000026                     	ds	1
   424  000027                     MW_Update@Min_Unit_val:
   425                           	opt callstack 0
   426  000027                     	ds	1
   427  000028                     _Current_MW_State:
   428                           	opt callstack 0
   429  000028                     	ds	1
   430  000029                     _Door_State:
   431                           	opt callstack 0
   432  000029                     	ds	1
   433  00002A                     _Weight_State:
   434                           	opt callstack 0
   435  00002A                     	ds	1
   436  00002B                     Disp_and_Blink_Time@LCD_Buffer_1:
   437                           	opt callstack 0
   438  00002B                     	ds	16
   439  00003B                     _LCD_LINE_1_Buffer:
   440                           	opt callstack 0
   441  00003B                     	ds	16
   442                           
   443                           	psect	dataCOMRAM
   444  000070                     __pdataCOMRAM:
   445                           	opt callstack 0
   446  000070                     TIM_Update@Tim_Counter:
   447                           	opt callstack 0
   448  000070                     	ds	2
   449  000072                     _Last_Valid_Key:
   450                           	opt callstack 0
   451  000072                     	ds	1
   452  000073                     Disp_Update@Disp_Counter:
   453                           	opt callstack 0
   454  000073                     	ds	1
   455  000074                     LCD_Update@LCD_Update_Counter:
   456                           	opt callstack 0
   457  000074                     	ds	1
   458  000075                     MW_Update@MW_Update_Counter:
   459                           	opt callstack 0
   460  000075                     	ds	1
   461  000076                     _Current_Count_State:
   462                           	opt callstack 0
   463  000076                     	ds	1
   464  000077                     MW_Update@Pressed_Key:
   465                           	opt callstack 0
   466  000077                     	ds	1
   467                           
   468                           	psect	bssBANK0
   469  000080                     __pbssBANK0:
   470                           	opt callstack 0
   471  000080                     _LCD_LINE_2_Buffer:
   472                           	opt callstack 0
   473  000080                     	ds	16
   474                           
   475                           	psect	cstackBANK0
   476  000090                     __pcstackBANK0:
   477                           	opt callstack 0
   478  000090                     ??_SW_Init:
   479  000090                     LCD_Port@Data:
   480                           	opt callstack 0
   481                           
   482                           ; 1 bytes @ 0x0
   483  000090                     	ds	1
   484  000091                     LCD_SendCommand@command:
   485                           	opt callstack 0
   486                           
   487                           ; 1 bytes @ 0x1
   488  000091                     	ds	1
   489  000092                     SW_Init@sw:
   490                           	opt callstack 0
   491                           
   492                           ; 1 bytes @ 0x2
   493  000092                     	ds	1
   494  000093                     
   495                           ; 1 bytes @ 0x3
   496                           
   497                           	psect	cstackCOMRAM
   498  00004B                     __pcstackCOMRAM:
   499                           	opt callstack 0
   500  00004B                     ??_SW_Update:
   501  00004B                     ?___awdiv:
   502                           	opt callstack 0
   503  00004B                     ?___awmod:
   504                           	opt callstack 0
   505  00004B                     SW_GetState@sw:
   506                           	opt callstack 0
   507  00004B                     Set_Disp_State@Current_MW_State:
   508                           	opt callstack 0
   509  00004B                     Set_Disp_Current_Count_State@Current_Count_State:
   510                           	opt callstack 0
   511  00004B                     DO_SetState@state:
   512                           	opt callstack 0
   513  00004B                     Set_Time@minutes_units:
   514                           	opt callstack 0
   515  00004B                     Set_TIM_Current_Count_State@Current_Count_State:
   516                           	opt callstack 0
   517  00004B                     i2LCD_Port@Data:
   518                           	opt callstack 0
   519  00004B                     TIM_GetTime@time:
   520                           	opt callstack 0
   521  00004B                     Keypad_Get_Data_From_buffer@pKey:
   522                           	opt callstack 0
   523  00004B                     Keypad_Scan@pKey:
   524                           	opt callstack 0
   525  00004B                     ___awdiv@dividend:
   526                           	opt callstack 0
   527  00004B                     ___awmod@dividend:
   528                           	opt callstack 0
   529  00004B                     strcpy@dest:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x0
   533  00004B                     	ds	1
   534  00004C                     ??_DO_SetState:
   535  00004C                     LCD_SendData@Low_4:
   536                           	opt callstack 0
   537  00004C                     Set_Time@seconds_tens:
   538                           	opt callstack 0
   539  00004C                     i2LCD_SendCommand@command:
   540                           	opt callstack 0
   541                           
   542                           ; 1 bytes @ 0x1
   543  00004C                     	ds	1
   544  00004D                     ??_Keypad_Scan:
   545  00004D                     LCD_SendData@High_4:
   546                           	opt callstack 0
   547  00004D                     LCD_GoTo@column:
   548                           	opt callstack 0
   549  00004D                     SW_Update@index:
   550                           	opt callstack 0
   551  00004D                     Set_Time@seconds_units:
   552                           	opt callstack 0
   553  00004D                     ___awdiv@divisor:
   554                           	opt callstack 0
   555  00004D                     ___awmod@divisor:
   556                           	opt callstack 0
   557  00004D                     strcpy@src:
   558                           	opt callstack 0
   559                           
   560                           ; 2 bytes @ 0x2
   561  00004D                     	ds	1
   562  00004E                     ??_LCD_GoTo:
   563  00004E                     LCD_SendData@character:
   564                           	opt callstack 0
   565  00004E                     DO_SetState@device:
   566                           	opt callstack 0
   567  00004E                     Set_Time@minutes_tens:
   568                           	opt callstack 0
   569  00004E                     Keypad_Scan@Key:
   570                           	opt callstack 0
   571                           
   572                           ; 1 bytes @ 0x3
   573  00004E                     	ds	1
   574  00004F                     ??_strcpy:
   575  00004F                     Keypad_Update@Key:
   576                           	opt callstack 0
   577  00004F                     ___awdiv@counter:
   578                           	opt callstack 0
   579  00004F                     ___awmod@counter:
   580                           	opt callstack 0
   581                           
   582                           ; 1 bytes @ 0x4
   583  00004F                     	ds	1
   584  000050                     ___awdiv@sign:
   585                           	opt callstack 0
   586  000050                     ___awmod@sign:
   587                           	opt callstack 0
   588                           
   589                           ; 1 bytes @ 0x5
   590  000050                     	ds	1
   591  000051                     LCD_GoTo@line:
   592                           	opt callstack 0
   593  000051                     ___awdiv@quotient:
   594                           	opt callstack 0
   595  000051                     strcpy@s:
   596                           	opt callstack 0
   597                           
   598                           ; 2 bytes @ 0x6
   599  000051                     	ds	1
   600  000052                     LCD_GoTo@Low_4:
   601                           	opt callstack 0
   602                           
   603                           ; 1 bytes @ 0x7
   604  000052                     	ds	1
   605  000053                     LCD_GoTo@High_4:
   606                           	opt callstack 0
   607  000053                     strcpy@d:
   608                           	opt callstack 0
   609                           
   610                           ; 2 bytes @ 0x8
   611  000053                     	ds	1
   612  000054                     LCD_GoTo@address:
   613                           	opt callstack 0
   614                           
   615                           ; 1 bytes @ 0x9
   616  000054                     	ds	1
   617  000055                     LCD_SendChar@line:
   618                           	opt callstack 0
   619  000055                     Set_LCD_BUFFER1@BUF_1:
   620                           	opt callstack 0
   621  000055                     Set_LCD_BUFFER2@BUF_2:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0xA
   625  000055                     	ds	1
   626  000056                     LCD_SendChar@column:
   627                           	opt callstack 0
   628                           
   629                           ; 1 bytes @ 0xB
   630  000056                     	ds	1
   631  000057                     ??_MW_Update:
   632  000057                     LCD_SendChar@character:
   633                           	opt callstack 0
   634  000057                     Disp_and_Blink_Time@Min_Unit:
   635                           	opt callstack 0
   636                           
   637                           ; 1 bytes @ 0xC
   638  000057                     	ds	1
   639  000058                     Disp_and_Blink_Time@Sec_Ten:
   640                           	opt callstack 0
   641  000058                     LCD_SendString@str:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0xD
   645  000058                     	ds	1
   646  000059                     Disp_and_Blink_Time@Sec_Unit:
   647                           	opt callstack 0
   648  000059                     MW_Update@Time_Val:
   649                           	opt callstack 0
   650                           
   651                           ; 2 bytes @ 0xE
   652  000059                     	ds	1
   653  00005A                     LCD_SendString@col:
   654                           	opt callstack 0
   655  00005A                     Disp_and_Blink_Time@Blink_State:
   656                           	opt callstack 0
   657                           
   658                           ; 1 bytes @ 0xF
   659  00005A                     	ds	1
   660  00005B                     ??_Disp_and_Blink_Time:
   661  00005B                     LCD_SendString@line:
   662                           	opt callstack 0
   663                           
   664                           ; 1 bytes @ 0x10
   665  00005B                     	ds	1
   666  00005C                     LCD_SendString@i:
   667                           	opt callstack 0
   668                           
   669                           ; 1 bytes @ 0x11
   670  00005C                     	ds	1
   671  00005D                     Disp_and_Blink_Time@i:
   672                           	opt callstack 0
   673                           
   674                           ; 1 bytes @ 0x12
   675  00005D                     	ds	1
   676  00005E                     Disp_and_Blink_Time@Min_Ten:
   677                           	opt callstack 0
   678                           
   679                           ; 1 bytes @ 0x13
   680  00005E                     	ds	1
   681  00005F                     ??_Disp_Time:
   682                           
   683                           ; 1 bytes @ 0x14
   684  00005F                     	ds	2
   685  000061                     Disp_Time@Disp_Current_State:
   686                           	opt callstack 0
   687                           
   688                           ; 1 bytes @ 0x16
   689  000061                     	ds	1
   690  000062                     Disp_Update@time:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x17
   694  000062                     	ds	2
   695  000064                     ??_TMR_Update:
   696                           
   697                           ; 1 bytes @ 0x19
   698  000064                     	ds	12
   699                           
   700 ;;
   701 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   702 ;;
   703 ;; *************** function _main *****************
   704 ;; Defined at:
   705 ;;		line 75 in file "Microwave.c"
   706 ;; Parameters:    Size  Location     Type
   707 ;;		None
   708 ;; Auto vars:     Size  Location     Type
   709 ;;		None
   710 ;; Return value:  Size  Location     Type
   711 ;;                  2  494[None  ] int 
   712 ;; Registers used:
   713 ;;		wreg, status,2, status,0, cstack
   714 ;; Tracked objects:
   715 ;;		On entry : 0/0
   716 ;;		On exit  : 0/0
   717 ;;		Unchanged: 0/0
   718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   719 ;;      Params:         0       0       0       0       0       0       0
   720 ;;      Locals:         0       0       0       0       0       0       0
   721 ;;      Temps:          0       0       0       0       0       0       0
   722 ;;      Totals:         0       0       0       0       0       0       0
   723 ;;Total ram usage:        0 bytes
   724 ;; Hardware stack levels required when called:   10
   725 ;; This function calls:
   726 ;;		_DO_Init
   727 ;;		_Keypad_Init
   728 ;;		_LCD_Init
   729 ;;		_SW_Init
   730 ;;		_TIM_Init
   731 ;;		_TMR_Init
   732 ;;		_TMR_Start
   733 ;; This function is called by:
   734 ;;		Startup code after reset
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           	psect	text0
   739  002164                     __ptext0:
   740                           	opt callstack 0
   741  002164                     _main:
   742                           	opt callstack 21
   743  002164  FFFF               	dw	65535	; assembler added errata NOP
   744                           
   745                           ;Microwave.c: 77:     LCD_Init();
   746  002166  EC7A  F00E         	call	_LCD_Init	;wreg free
   747  00216A                     
   748                           ;Microwave.c: 78:     TIM_Init();
   749  00216A  EC68  F011         	call	_TIM_Init	;wreg free
   750  00216E                     
   751                           ;Microwave.c: 79:     Keypad_Init();
   752  00216E  EC5A  F010         	call	_Keypad_Init	;wreg free
   753  002172                     
   754                           ;Microwave.c: 80:     TMR_Init();
   755  002172  EC60  F011         	call	_TMR_Init	;wreg free
   756  002176                     
   757                           ;Microwave.c: 81:     TMR_Start();
   758  002176  EC4C  F011         	call	_TMR_Start	;wreg free
   759  00217A                     
   760                           ;Microwave.c: 82:     SW_Init(WEIGHT_SW);
   761  00217A  0E01               	movlw	1
   762  00217C  ECC1  F00E         	call	_SW_Init
   763  002180                     
   764                           ;Microwave.c: 83:     SW_Init(DOOR_SW);
   765  002180  0E00               	movlw	0
   766  002182  ECC1  F00E         	call	_SW_Init
   767  002186                     
   768                           ;Microwave.c: 84:     DO_Init();
   769  002186  EC97  F010         	call	_DO_Init	;wreg free
   770  00218A                     l495:
   771  00218A  FFFF               	dw	65535	; assembler added errata NOP
   772  00218C  EFC5  F010         	goto	l495
   773  002190  EF4A  F000         	goto	start
   774  002194                     __end_of_main:
   775                           	opt callstack 0
   776                           
   777 ;; *************** function _TMR_Start *****************
   778 ;; Defined at:
   779 ;;		line 17 in file "TMR0.c"
   780 ;; Parameters:    Size  Location     Type
   781 ;;		None
   782 ;; Auto vars:     Size  Location     Type
   783 ;;		None
   784 ;; Return value:  Size  Location     Type
   785 ;;                  1    wreg      void 
   786 ;; Registers used:
   787 ;;		wreg, status,2
   788 ;; Tracked objects:
   789 ;;		On entry : 0/0
   790 ;;		On exit  : 0/0
   791 ;;		Unchanged: 0/0
   792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   793 ;;      Params:         0       0       0       0       0       0       0
   794 ;;      Locals:         0       0       0       0       0       0       0
   795 ;;      Temps:          0       0       0       0       0       0       0
   796 ;;      Totals:         0       0       0       0       0       0       0
   797 ;;Total ram usage:        0 bytes
   798 ;; Hardware stack levels used:    1
   799 ;; Hardware stack levels required when called:    7
   800 ;; This function calls:
   801 ;;		Nothing
   802 ;; This function is called by:
   803 ;;		_main
   804 ;; This function uses a non-reentrant model
   805 ;;
   806                           
   807                           	psect	text1
   808  002298                     __ptext1:
   809                           	opt callstack 0
   810  002298                     _TMR_Start:
   811                           	opt callstack 0
   812  002298  FFFF               	dw	65535	; assembler added errata NOP
   813  00229A                     
   814                           ;TMR0.c: 19:  (TMR0IF = 0);
   815  00229A  94F2               	bcf	4082,2,c	;volatile
   816  00229C                     
   817                           ;TMR0.c: 20:  (TMR0 = 256 -((10) * 1000 )/(4*.125*8));
   818  00229C  0EF7               	movlw	247
   819  00229E  6ED7               	movwf	215,c	;volatile
   820  0022A0  0E3C               	movlw	60
   821  0022A2  6ED6               	movwf	214,c	;volatile
   822  0022A4                     
   823                           ;TMR0.c: 21:  (TMR0IE = 1);
   824  0022A4  8AF2               	bsf	4082,5,c	;volatile
   825  0022A6                     
   826                           ;TMR0.c: 22:  (GIE = 1);
   827  0022A6  8EF2               	bsf	4082,7,c	;volatile
   828  0022A8                     
   829                           ;TMR0.c: 23:  (TMR0ON = 1);
   830  0022A8  8ED5               	bsf	4053,7,c	;volatile
   831  0022AA  0012               	return		;funcret
   832  0022AC  FFFF               	dw	65535	; errata NOP
   833  0022AE                     __end_of_TMR_Start:
   834                           	opt callstack 0
   835                           
   836 ;; *************** function _TMR_Init *****************
   837 ;; Defined at:
   838 ;;		line 12 in file "TMR0.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;		None
   841 ;; Auto vars:     Size  Location     Type
   842 ;;		None
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		None
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   852 ;;      Params:         0       0       0       0       0       0       0
   853 ;;      Locals:         0       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0
   855 ;;      Totals:         0       0       0       0       0       0       0
   856 ;;Total ram usage:        0 bytes
   857 ;; Hardware stack levels used:    1
   858 ;; Hardware stack levels required when called:    7
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_main
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           	psect	text2
   867  0022C0                     __ptext2:
   868                           	opt callstack 0
   869  0022C0                     _TMR_Init:
   870                           	opt callstack 0
   871  0022C0  FFFF               	dw	65535	; assembler added errata NOP
   872  0022C2                     
   873                           ;TMR0.c: 14:  T0PS2 = 0; T0PS1 = 1; T0PS0 = 0; PSA = 0;
   874  0022C2  94D5               	bcf	4053,2,c	;volatile
   875  0022C4  82D5               	bsf	4053,1,c	;volatile
   876  0022C6  90D5               	bcf	4053,0,c	;volatile
   877  0022C8  96D5               	bcf	4053,3,c	;volatile
   878                           
   879                           ;TMR0.c: 15:  (TMR0ON = 0);
   880  0022CA  9ED5               	bcf	4053,7,c	;volatile
   881  0022CC  0012               	return		;funcret
   882  0022CE  FFFF               	dw	65535	; errata NOP
   883  0022D0                     __end_of_TMR_Init:
   884                           	opt callstack 0
   885                           
   886 ;; *************** function _TIM_Init *****************
   887 ;; Defined at:
   888 ;;		line 17 in file "Time.c"
   889 ;; Parameters:    Size  Location     Type
   890 ;;		None
   891 ;; Auto vars:     Size  Location     Type
   892 ;;		None
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   902 ;;      Params:         0       0       0       0       0       0       0
   903 ;;      Locals:         0       0       0       0       0       0       0
   904 ;;      Temps:          0       0       0       0       0       0       0
   905 ;;      Totals:         0       0       0       0       0       0       0
   906 ;;Total ram usage:        0 bytes
   907 ;; Hardware stack levels used:    1
   908 ;; Hardware stack levels required when called:    7
   909 ;; This function calls:
   910 ;;		Nothing
   911 ;; This function is called by:
   912 ;;		_main
   913 ;; This function uses a non-reentrant model
   914 ;;
   915                           
   916                           	psect	text3
   917  0022D0                     __ptext3:
   918                           	opt callstack 0
   919  0022D0                     _TIM_Init:
   920                           	opt callstack 0
   921  0022D0  FFFF               	dw	65535	; assembler added errata NOP
   922  0022D2                     
   923                           ;Time.c: 19:     TIM_CurrentTime.seconds = 0;
   924  0022D2  0E00               	movlw	0
   925  0022D4  6E10               	movwf	_TIM_CurrentTime^0,c
   926                           
   927                           ;Time.c: 20:     TIM_CurrentTime.minutes = 0;
   928  0022D6  0E00               	movlw	0
   929  0022D8  6E11               	movwf	(_TIM_CurrentTime+1)^0,c
   930  0022DA  0012               	return		;funcret
   931  0022DC  FFFF               	dw	65535	; errata NOP
   932  0022DE                     __end_of_TIM_Init:
   933                           	opt callstack 0
   934                           
   935 ;; *************** function _SW_Init *****************
   936 ;; Defined at:
   937 ;;		line 34 in file "SW.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;  sw              1    wreg     enum E9
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  sw              1    2[BANK0 ] enum E9
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		wreg, status,2, status,0
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   951 ;;      Params:         0       0       0       0       0       0       0
   952 ;;      Locals:         0       1       0       0       0       0       0
   953 ;;      Temps:          0       2       0       0       0       0       0
   954 ;;      Totals:         0       3       0       0       0       0       0
   955 ;;Total ram usage:        3 bytes
   956 ;; Hardware stack levels used:    1
   957 ;; Hardware stack levels required when called:    7
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_main
   962 ;; This function uses a non-reentrant model
   963 ;;
   964                           
   965                           	psect	text4
   966  001D82                     __ptext4:
   967                           	opt callstack 0
   968  001D82                     _SW_Init:
   969                           	opt callstack 0
   970  001D82  FFFF               	dw	65535	; assembler added errata NOP
   971                           
   972                           ;incstack = 0
   973                           ;SW_Init@sw stored from wreg
   974  001D84  0100               	movlb	0	; () banked
   975  001D86  6F92               	movwf	SW_Init@sw& (0+255),b
   976  001D88                     
   977                           ;SW.c: 34: void SW_Init(tSW sw);SW.c: 35: {;SW.c: 37:     switch(sw)
   978  001D88  EFE0  F00E         	goto	l3124
   979  001D8C                     l3106:
   980  001D8C  FFFF               	dw	65535	; assembler added errata NOP
   981                           
   982                           ; BSR set to: 0
   983                           ;SW.c: 41:             ((((TRISB))) = (((TRISB)) & (~(1 << ((3)))))|((1) << ((3))));
   984  001D8E  5093               	movf	147,w,c	;volatile
   985  001D90  0BF7               	andlw	247
   986  001D92  0908               	iorlw	8
   987  001D94  6E93               	movwf	147,c	;volatile
   988  001D96                     
   989                           ; BSR set to: 0
   990                           ;SW.c: 43:             SWs_Info[DOOR_SW].sw_samples[0] = (1);
   991  001D96  0E01               	movlw	1
   992  001D98  6E08               	movwf	_SWs_Info^0,c
   993  001D9A                     
   994                           ; BSR set to: 0
   995                           ;SW.c: 44:             SWs_Info[DOOR_SW].sw_samples[1] = (1);
   996  001D9A  0E01               	movlw	1
   997  001D9C  6E09               	movwf	(_SWs_Info+1)^0,c
   998  001D9E                     
   999                           ; BSR set to: 0
  1000                           ;SW.c: 47:             SWs_Info[DOOR_SW].sw_state = SW_RELEASED;
  1001  001D9E  0E00               	movlw	0
  1002  001DA0  6E0A               	movwf	(_SWs_Info+2)^0,c
  1003                           
  1004                           ;SW.c: 49:             break;
  1005  001DA2  EFF8  F00E         	goto	l188
  1006  001DA6                     l3114:
  1007  001DA6  FFFF               	dw	65535	; assembler added errata NOP
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;SW.c: 53:             ((((TRISB))) = (((TRISB)) & (~(1 << ((4)))))|((1) << ((4))));
  1011  001DA8  5093               	movf	147,w,c	;volatile
  1012  001DAA  0BEF               	andlw	239
  1013  001DAC  0910               	iorlw	16
  1014  001DAE  6E93               	movwf	147,c	;volatile
  1015  001DB0                     
  1016                           ; BSR set to: 0
  1017                           ;SW.c: 55:             SWs_Info[WEIGHT_SW].sw_samples[0] = (1);
  1018  001DB0  0E01               	movlw	1
  1019  001DB2  6E0B               	movwf	(_SWs_Info+3)^0,c
  1020  001DB4                     
  1021                           ; BSR set to: 0
  1022                           ;SW.c: 56:             SWs_Info[WEIGHT_SW].sw_samples[1] = (1);
  1023  001DB4  0E01               	movlw	1
  1024  001DB6  6E0C               	movwf	(_SWs_Info+4)^0,c
  1025  001DB8                     
  1026                           ; BSR set to: 0
  1027                           ;SW.c: 59:             SWs_Info[WEIGHT_SW].sw_state = SW_RELEASED;
  1028  001DB8  0E00               	movlw	0
  1029  001DBA  6E0D               	movwf	(_SWs_Info+5)^0,c
  1030                           
  1031                           ;SW.c: 61:             break;
  1032  001DBC  EFF8  F00E         	goto	l188
  1033  001DC0                     l3124:
  1034  001DC0  FFFF               	dw	65535	; assembler added errata NOP
  1035  001DC2  0100               	movlb	0	; () banked
  1036  001DC4  5192               	movf	SW_Init@sw& (0+255),w,b
  1037  001DC6  6F90               	movwf	??_SW_Init& (0+255),b
  1038  001DC8  6B91               	clrf	(??_SW_Init+1)& (0+255),b
  1039                           
  1040                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1041                           ; Switch size 1, requested type "simple"
  1042                           ; Number of cases is 1, Range of values is 0 to 0
  1043                           ; switch strategies available:
  1044                           ; Name         Instructions Cycles
  1045                           ; simple_byte            4     3 (average)
  1046                           ;	Chosen strategy is simple_byte
  1047  001DCA  5191               	movf	(??_SW_Init+1)& (0+255),w,b
  1048  001DCC  0A00               	xorlw	0	; case 0
  1049  001DCE  B4D8               	btfsc	status,2,c
  1050  001DD0  EFEC  F00E         	goto	l3300
  1051  001DD4  EFF8  F00E         	goto	l188
  1052  001DD8                     l3300:
  1053  001DD8  FFFF               	dw	65535	; assembler added errata NOP
  1054                           
  1055                           ; BSR set to: 0
  1056                           ; Switch size 1, requested type "simple"
  1057                           ; Number of cases is 2, Range of values is 0 to 1
  1058                           ; switch strategies available:
  1059                           ; Name         Instructions Cycles
  1060                           ; simple_byte            7     4 (average)
  1061                           ;	Chosen strategy is simple_byte
  1062  001DDA  5190               	movf	??_SW_Init& (0+255),w,b
  1063  001DDC  0A00               	xorlw	0	; case 0
  1064  001DDE  B4D8               	btfsc	status,2,c
  1065  001DE0  EFC6  F00E         	goto	l3106
  1066  001DE4  0A01               	xorlw	1	; case 1
  1067  001DE6  B4D8               	btfsc	status,2,c
  1068  001DE8  EFD3  F00E         	goto	l3114
  1069  001DEC  EFF8  F00E         	goto	l188
  1070  001DF0                     l188:
  1071  001DF0  FFFF               	dw	65535	; assembler added errata NOP
  1072                           
  1073                           ; BSR set to: 0
  1074  001DF2  0012               	return		;funcret
  1075  001DF4  FFFF               	dw	65535	; errata NOP
  1076  001DF6                     __end_of_SW_Init:
  1077                           	opt callstack 0
  1078                           
  1079 ;; *************** function _LCD_Init *****************
  1080 ;; Defined at:
  1081 ;;		line 20 in file "LCD.c"
  1082 ;; Parameters:    Size  Location     Type
  1083 ;;		None
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;		None
  1086 ;; Return value:  Size  Location     Type
  1087 ;;                  1    wreg      void 
  1088 ;; Registers used:
  1089 ;;		wreg, status,2, status,0, cstack
  1090 ;; Tracked objects:
  1091 ;;		On entry : 0/0
  1092 ;;		On exit  : 0/0
  1093 ;;		Unchanged: 0/0
  1094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1095 ;;      Params:         0       0       0       0       0       0       0
  1096 ;;      Locals:         0       0       0       0       0       0       0
  1097 ;;      Temps:          0       0       0       0       0       0       0
  1098 ;;      Totals:         0       0       0       0       0       0       0
  1099 ;;Total ram usage:        0 bytes
  1100 ;; Hardware stack levels used:    1
  1101 ;; Hardware stack levels required when called:    9
  1102 ;; This function calls:
  1103 ;;		_LCD_SendCommand
  1104 ;; This function is called by:
  1105 ;;		_main
  1106 ;; This function uses a non-reentrant model
  1107 ;;
  1108                           
  1109                           	psect	text5
  1110  001CF4                     __ptext5:
  1111                           	opt callstack 0
  1112  001CF4                     _LCD_Init:
  1113                           	opt callstack 0
  1114  001CF4  FFFF               	dw	65535	; assembler added errata NOP
  1115  001CF6                     
  1116                           ;LCD.c: 23:     ((((TRISD))) = (((TRISD)) & (~(1 << (4))))|((0) << (4)));
  1117  001CF6  5095               	movf	149,w,c	;volatile
  1118  001CF8  0BEF               	andlw	239
  1119  001CFA  6E95               	movwf	149,c	;volatile
  1120                           
  1121                           ;LCD.c: 24:     ((((TRISD))) = (((TRISD)) & (~(1 << (5))))|((0) << (5)));
  1122  001CFC  5095               	movf	149,w,c	;volatile
  1123  001CFE  0BDF               	andlw	223
  1124  001D00  6E95               	movwf	149,c	;volatile
  1125                           
  1126                           ;LCD.c: 25:     ((((TRISD))) = (((TRISD)) & (~(1 << (6))))|((0) << (6)));
  1127  001D02  5095               	movf	149,w,c	;volatile
  1128  001D04  0BBF               	andlw	191
  1129  001D06  6E95               	movwf	149,c	;volatile
  1130                           
  1131                           ;LCD.c: 26:     ((((TRISD))) = (((TRISD)) & (~(1 << (7))))|((0) << (7)));
  1132  001D08  5095               	movf	149,w,c	;volatile
  1133  001D0A  0B7F               	andlw	127
  1134  001D0C  6E95               	movwf	149,c	;volatile
  1135                           
  1136                           ;LCD.c: 28:     ((((PORTD))) = (((PORTD)) & (~(1 << (4))))|(0 << (4)));
  1137  001D0E  5083               	movf	131,w,c	;volatile
  1138  001D10  0BEF               	andlw	239
  1139  001D12  6E83               	movwf	131,c	;volatile
  1140                           
  1141                           ;LCD.c: 29:     ((((PORTD))) = (((PORTD)) & (~(1 << (5))))|(0 << (5)));
  1142  001D14  5083               	movf	131,w,c	;volatile
  1143  001D16  0BDF               	andlw	223
  1144  001D18  6E83               	movwf	131,c	;volatile
  1145                           
  1146                           ;LCD.c: 30:     ((((PORTD))) = (((PORTD)) & (~(1 << (6))))|(0 << (6)));
  1147  001D1A  5083               	movf	131,w,c	;volatile
  1148  001D1C  0BBF               	andlw	191
  1149  001D1E  6E83               	movwf	131,c	;volatile
  1150                           
  1151                           ;LCD.c: 31:     ((((PORTD))) = (((PORTD)) & (~(1 << (7))))|(0 << (7)));
  1152  001D20  5083               	movf	131,w,c	;volatile
  1153  001D22  0B7F               	andlw	127
  1154  001D24  6E83               	movwf	131,c	;volatile
  1155                           
  1156                           ;LCD.c: 33:     ((((TRISE))) = (((TRISE)) & (~(1 << ((2)))))|((0) << ((2))));
  1157  001D26  5096               	movf	150,w,c	;volatile
  1158  001D28  0BFB               	andlw	251
  1159  001D2A  6E96               	movwf	150,c	;volatile
  1160                           
  1161                           ;LCD.c: 34:     ((((TRISE))) = (((TRISE)) & (~(1 << ((1)))))|((0) << ((1))));
  1162  001D2C  5096               	movf	150,w,c	;volatile
  1163  001D2E  0BFD               	andlw	253
  1164  001D30  6E96               	movwf	150,c	;volatile
  1165  001D32                     
  1166                           ;LCD.c: 37:     LCD_SendCommand((0x03));
  1167  001D32  0E03               	movlw	3
  1168  001D34  ECCA  F010         	call	_LCD_SendCommand
  1169  001D38                     
  1170                           ;LCD.c: 38:     _delay((unsigned long)((100)*(8000000/4000000.0)));
  1171  001D38  0E32               	movlw	50
  1172  001D3A                     u2377:
  1173  001D3A  FFFF               	dw	65535	; errata NOP
  1174  001D3C  2EE8               	decfsz	wreg,f,c
  1175  001D3E  D7FD               	bra	u2377
  1176  001D40                     
  1177                           ;LCD.c: 39:     LCD_SendCommand((0x03));
  1178  001D40  0E03               	movlw	3
  1179  001D42  ECCA  F010         	call	_LCD_SendCommand
  1180  001D46                     
  1181                           ;LCD.c: 40:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  1182  001D46  0E19               	movlw	25
  1183  001D48                     u2387:
  1184  001D48  FFFF               	dw	65535	; errata NOP
  1185  001D4A  2EE8               	decfsz	wreg,f,c
  1186  001D4C  D7FD               	bra	u2387
  1187  001D4E                     
  1188                           ;LCD.c: 41:     LCD_SendCommand((0x03));
  1189  001D4E  0E03               	movlw	3
  1190  001D50  ECCA  F010         	call	_LCD_SendCommand
  1191  001D54                     
  1192                           ;LCD.c: 45:     LCD_SendCommand(0x02);
  1193  001D54  0E02               	movlw	2
  1194  001D56  ECCA  F010         	call	_LCD_SendCommand
  1195  001D5A                     
  1196                           ;LCD.c: 47:  LCD_SendCommand(0x02);
  1197  001D5A  0E02               	movlw	2
  1198  001D5C  ECCA  F010         	call	_LCD_SendCommand
  1199  001D60                     
  1200                           ;LCD.c: 48:     LCD_SendCommand(0x08);
  1201  001D60  0E08               	movlw	8
  1202  001D62  ECCA  F010         	call	_LCD_SendCommand
  1203  001D66                     
  1204                           ;LCD.c: 50:     LCD_SendCommand(0x00);
  1205  001D66  0E00               	movlw	0
  1206  001D68  ECCA  F010         	call	_LCD_SendCommand
  1207  001D6C                     
  1208                           ;LCD.c: 51:     LCD_SendCommand(0x0C);
  1209  001D6C  0E0C               	movlw	12
  1210  001D6E  ECCA  F010         	call	_LCD_SendCommand
  1211  001D72                     
  1212                           ;LCD.c: 53:     LCD_SendCommand(0x00);
  1213  001D72  0E00               	movlw	0
  1214  001D74  ECCA  F010         	call	_LCD_SendCommand
  1215  001D78                     
  1216                           ;LCD.c: 55:     LCD_SendCommand(0x06);
  1217  001D78  0E06               	movlw	6
  1218  001D7A  ECCA  F010         	call	_LCD_SendCommand
  1219  001D7E  0012               	return		;funcret
  1220  001D80  FFFF               	dw	65535	; errata NOP
  1221  001D82                     __end_of_LCD_Init:
  1222                           	opt callstack 0
  1223                           
  1224 ;; *************** function _LCD_SendCommand *****************
  1225 ;; Defined at:
  1226 ;;		line 58 in file "LCD.c"
  1227 ;; Parameters:    Size  Location     Type
  1228 ;;  command         1    wreg     unsigned char 
  1229 ;; Auto vars:     Size  Location     Type
  1230 ;;  command         1    1[BANK0 ] unsigned char 
  1231 ;; Return value:  Size  Location     Type
  1232 ;;                  1    wreg      void 
  1233 ;; Registers used:
  1234 ;;		wreg, status,2, status,0, cstack
  1235 ;; Tracked objects:
  1236 ;;		On entry : 0/0
  1237 ;;		On exit  : 0/0
  1238 ;;		Unchanged: 0/0
  1239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1240 ;;      Params:         0       0       0       0       0       0       0
  1241 ;;      Locals:         0       1       0       0       0       0       0
  1242 ;;      Temps:          0       0       0       0       0       0       0
  1243 ;;      Totals:         0       1       0       0       0       0       0
  1244 ;;Total ram usage:        1 bytes
  1245 ;; Hardware stack levels used:    1
  1246 ;; Hardware stack levels required when called:    8
  1247 ;; This function calls:
  1248 ;;		_LCD_Port
  1249 ;; This function is called by:
  1250 ;;		_LCD_Init
  1251 ;; This function uses a non-reentrant model
  1252 ;;
  1253                           
  1254                           	psect	text6
  1255  002194                     __ptext6:
  1256                           	opt callstack 0
  1257  002194                     _LCD_SendCommand:
  1258                           	opt callstack 0
  1259  002194  FFFF               	dw	65535	; assembler added errata NOP
  1260                           
  1261                           ;incstack = 0
  1262                           ;LCD_SendCommand@command stored from wreg
  1263  002196  0100               	movlb	0	; () banked
  1264  002198  6F91               	movwf	LCD_SendCommand@command& (0+255),b
  1265  00219A                     
  1266                           ;LCD.c: 58: static void LCD_SendCommand(tByte command);LCD.c: 59: {;LCD.c: 62:     ((((P
      +                          ORTE))) = (((PORTE)) & (~(1 << ((2)))))|(0 << ((2))));
  1267  00219A  5084               	movf	132,w,c	;volatile
  1268  00219C  0BFB               	andlw	251
  1269  00219E  6E84               	movwf	132,c	;volatile
  1270  0021A0                     
  1271                           ;LCD.c: 63:     LCD_Port(command);
  1272  0021A0  0100               	movlb	0	; () banked
  1273  0021A2  5191               	movf	LCD_SendCommand@command& (0+255),w,b
  1274  0021A4  EC34  F00D         	call	_LCD_Port
  1275  0021A8                     
  1276                           ;LCD.c: 64:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(1 << ((1))));
  1277  0021A8  5084               	movf	132,w,c	;volatile
  1278  0021AA  0BFD               	andlw	253
  1279  0021AC  0902               	iorlw	2
  1280  0021AE  6E84               	movwf	132,c	;volatile
  1281  0021B0                     
  1282                           ;LCD.c: 65:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  1283  0021B0  0E05               	movlw	5
  1284  0021B2                     u2397:
  1285  0021B2  FFFF               	dw	65535	; errata NOP
  1286  0021B4  2EE8               	decfsz	wreg,f,c
  1287  0021B6  D7FD               	bra	u2397
  1288  0021B8                     
  1289                           ;LCD.c: 66:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(0 << ((1))));
  1290  0021B8  5084               	movf	132,w,c	;volatile
  1291  0021BA  0BFD               	andlw	253
  1292  0021BC  6E84               	movwf	132,c	;volatile
  1293  0021BE  0012               	return		;funcret
  1294  0021C0  FFFF               	dw	65535	; errata NOP
  1295  0021C2                     __end_of_LCD_SendCommand:
  1296                           	opt callstack 0
  1297                           
  1298 ;; *************** function _LCD_Port *****************
  1299 ;; Defined at:
  1300 ;;		line 112 in file "LCD.c"
  1301 ;; Parameters:    Size  Location     Type
  1302 ;;  Data            1    wreg     unsigned char 
  1303 ;; Auto vars:     Size  Location     Type
  1304 ;;  Data            1    0[BANK0 ] unsigned char 
  1305 ;; Return value:  Size  Location     Type
  1306 ;;                  1    wreg      void 
  1307 ;; Registers used:
  1308 ;;		wreg, status,2, status,0
  1309 ;; Tracked objects:
  1310 ;;		On entry : 0/0
  1311 ;;		On exit  : 0/0
  1312 ;;		Unchanged: 0/0
  1313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1314 ;;      Params:         0       0       0       0       0       0       0
  1315 ;;      Locals:         0       1       0       0       0       0       0
  1316 ;;      Temps:          0       0       0       0       0       0       0
  1317 ;;      Totals:         0       1       0       0       0       0       0
  1318 ;;Total ram usage:        1 bytes
  1319 ;; Hardware stack levels used:    1
  1320 ;; Hardware stack levels required when called:    7
  1321 ;; This function calls:
  1322 ;;		Nothing
  1323 ;; This function is called by:
  1324 ;;		_LCD_SendCommand
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327                           
  1328                           	psect	text7
  1329  001A68                     __ptext7:
  1330                           	opt callstack 0
  1331  001A68                     _LCD_Port:
  1332                           	opt callstack 0
  1333  001A68  FFFF               	dw	65535	; assembler added errata NOP
  1334                           
  1335                           ;incstack = 0
  1336                           ;LCD_Port@Data stored from wreg
  1337  001A6A  0100               	movlb	0	; () banked
  1338  001A6C  6F90               	movwf	LCD_Port@Data& (0+255),b
  1339  001A6E                     
  1340                           ;LCD.c: 112: static void LCD_Port(tByte Data);LCD.c: 113: {;LCD.c: 114:     if(Data & 1)
  1341  001A6E  0100               	movlb	0	; () banked
  1342  001A70  A190               	btfss	LCD_Port@Data& (0+255),0,b
  1343  001A72  EF3D  F00D         	goto	u2331
  1344  001A76  EF40  F00D         	goto	u2330
  1345  001A7A                     u2331:
  1346  001A7A  FFFF               	dw	65535	; assembler added errata NOP
  1347  001A7C  EF47  F00D         	goto	l3048
  1348  001A80                     u2330:
  1349  001A80  FFFF               	dw	65535	; assembler added errata NOP
  1350  001A82                     
  1351                           ; BSR set to: 0
  1352                           ;LCD.c: 115:         (((PORTD)) = ((PORTD) & (~(1 << (4))))|(1 << (4)));
  1353  001A82  5083               	movf	131,w,c	;volatile
  1354  001A84  0BEF               	andlw	239
  1355  001A86  0910               	iorlw	16
  1356  001A88  6E83               	movwf	131,c	;volatile
  1357  001A8A  EF4B  F00D         	goto	l3050
  1358  001A8E                     l3048:
  1359  001A8E  FFFF               	dw	65535	; assembler added errata NOP
  1360                           
  1361                           ; BSR set to: 0
  1362                           ;LCD.c: 117:         (((PORTD)) = ((PORTD) & (~(1 << (4))))|(0 << (4)));
  1363  001A90  5083               	movf	131,w,c	;volatile
  1364  001A92  0BEF               	andlw	239
  1365  001A94  6E83               	movwf	131,c	;volatile
  1366  001A96                     l3050:
  1367  001A96  FFFF               	dw	65535	; assembler added errata NOP
  1368                           
  1369                           ; BSR set to: 0
  1370                           ;LCD.c: 118:     if(Data & 2)
  1371  001A98  A390               	btfss	LCD_Port@Data& (0+255),1,b
  1372  001A9A  EF51  F00D         	goto	u2341
  1373  001A9E  EF54  F00D         	goto	u2340
  1374  001AA2                     u2341:
  1375  001AA2  FFFF               	dw	65535	; assembler added errata NOP
  1376  001AA4  EF5B  F00D         	goto	l3054
  1377  001AA8                     u2340:
  1378  001AA8  FFFF               	dw	65535	; assembler added errata NOP
  1379  001AAA                     
  1380                           ; BSR set to: 0
  1381                           ;LCD.c: 119:         (((PORTD)) = ((PORTD) & (~(1 << (5))))|(1 << (5)));
  1382  001AAA  5083               	movf	131,w,c	;volatile
  1383  001AAC  0BDF               	andlw	223
  1384  001AAE  0920               	iorlw	32
  1385  001AB0  6E83               	movwf	131,c	;volatile
  1386  001AB2  EF5F  F00D         	goto	l3056
  1387  001AB6                     l3054:
  1388  001AB6  FFFF               	dw	65535	; assembler added errata NOP
  1389                           
  1390                           ; BSR set to: 0
  1391                           ;LCD.c: 121:         (((PORTD)) = ((PORTD) & (~(1 << (5))))|(0 << (5)));
  1392  001AB8  5083               	movf	131,w,c	;volatile
  1393  001ABA  0BDF               	andlw	223
  1394  001ABC  6E83               	movwf	131,c	;volatile
  1395  001ABE                     l3056:
  1396  001ABE  FFFF               	dw	65535	; assembler added errata NOP
  1397                           
  1398                           ; BSR set to: 0
  1399                           ;LCD.c: 122:     if(Data & 4)
  1400  001AC0  A590               	btfss	LCD_Port@Data& (0+255),2,b
  1401  001AC2  EF65  F00D         	goto	u2351
  1402  001AC6  EF68  F00D         	goto	u2350
  1403  001ACA                     u2351:
  1404  001ACA  FFFF               	dw	65535	; assembler added errata NOP
  1405  001ACC  EF6F  F00D         	goto	l3060
  1406  001AD0                     u2350:
  1407  001AD0  FFFF               	dw	65535	; assembler added errata NOP
  1408  001AD2                     
  1409                           ; BSR set to: 0
  1410                           ;LCD.c: 123:         (((PORTD)) = ((PORTD) & (~(1 << (6))))|(1 << (6)));
  1411  001AD2  5083               	movf	131,w,c	;volatile
  1412  001AD4  0BBF               	andlw	191
  1413  001AD6  0940               	iorlw	64
  1414  001AD8  6E83               	movwf	131,c	;volatile
  1415  001ADA  EF73  F00D         	goto	l3062
  1416  001ADE                     l3060:
  1417  001ADE  FFFF               	dw	65535	; assembler added errata NOP
  1418                           
  1419                           ; BSR set to: 0
  1420                           ;LCD.c: 125:         (((PORTD)) = ((PORTD) & (~(1 << (6))))|(0 << (6)));
  1421  001AE0  5083               	movf	131,w,c	;volatile
  1422  001AE2  0BBF               	andlw	191
  1423  001AE4  6E83               	movwf	131,c	;volatile
  1424  001AE6                     l3062:
  1425  001AE6  FFFF               	dw	65535	; assembler added errata NOP
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;LCD.c: 126:     if(Data & 8)
  1429  001AE8  A790               	btfss	LCD_Port@Data& (0+255),3,b
  1430  001AEA  EF79  F00D         	goto	u2361
  1431  001AEE  EF7C  F00D         	goto	u2360
  1432  001AF2                     u2361:
  1433  001AF2  FFFF               	dw	65535	; assembler added errata NOP
  1434  001AF4  EF83  F00D         	goto	l3066
  1435  001AF8                     u2360:
  1436  001AF8  FFFF               	dw	65535	; assembler added errata NOP
  1437  001AFA                     
  1438                           ; BSR set to: 0
  1439                           ;LCD.c: 127:         (((PORTD)) = ((PORTD) & (~(1 << (7))))|(1 << (7)));
  1440  001AFA  5083               	movf	131,w,c	;volatile
  1441  001AFC  0B7F               	andlw	127
  1442  001AFE  0980               	iorlw	128
  1443  001B00  6E83               	movwf	131,c	;volatile
  1444  001B02  EF87  F00D         	goto	l155
  1445  001B06                     l3066:
  1446  001B06  FFFF               	dw	65535	; assembler added errata NOP
  1447                           
  1448                           ; BSR set to: 0
  1449                           ;LCD.c: 129:         (((PORTD)) = ((PORTD) & (~(1 << (7))))|(0 << (7)));
  1450  001B08  5083               	movf	131,w,c	;volatile
  1451  001B0A  0B7F               	andlw	127
  1452  001B0C  6E83               	movwf	131,c	;volatile
  1453  001B0E                     l155:
  1454  001B0E  FFFF               	dw	65535	; assembler added errata NOP
  1455                           
  1456                           ; BSR set to: 0
  1457  001B10  0012               	return		;funcret
  1458  001B12  FFFF               	dw	65535	; errata NOP
  1459  001B14                     __end_of_LCD_Port:
  1460                           	opt callstack 0
  1461                           
  1462 ;; *************** function _Keypad_Init *****************
  1463 ;; Defined at:
  1464 ;;		line 24 in file "keypad.c"
  1465 ;; Parameters:    Size  Location     Type
  1466 ;;		None
  1467 ;; Auto vars:     Size  Location     Type
  1468 ;;		None
  1469 ;; Return value:  Size  Location     Type
  1470 ;;                  1    wreg      void 
  1471 ;; Registers used:
  1472 ;;		wreg, status,2, status,0
  1473 ;; Tracked objects:
  1474 ;;		On entry : 0/0
  1475 ;;		On exit  : 0/0
  1476 ;;		Unchanged: 0/0
  1477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1478 ;;      Params:         0       0       0       0       0       0       0
  1479 ;;      Locals:         0       0       0       0       0       0       0
  1480 ;;      Temps:          0       0       0       0       0       0       0
  1481 ;;      Totals:         0       0       0       0       0       0       0
  1482 ;;Total ram usage:        0 bytes
  1483 ;; Hardware stack levels used:    1
  1484 ;; Hardware stack levels required when called:    7
  1485 ;; This function calls:
  1486 ;;		Nothing
  1487 ;; This function is called by:
  1488 ;;		_main
  1489 ;; This function uses a non-reentrant model
  1490 ;;
  1491                           
  1492                           	psect	text8
  1493  0020B4                     __ptext8:
  1494                           	opt callstack 0
  1495  0020B4                     _Keypad_Init:
  1496                           	opt callstack 0
  1497  0020B4  FFFF               	dw	65535	; assembler added errata NOP
  1498  0020B6                     
  1499                           ;keypad.c: 27:     ((((TRISB))) = (((TRISB)) & (~(1 << ((0)))))|((0) << ((0))));
  1500  0020B6  5093               	movf	147,w,c	;volatile
  1501  0020B8  0BFE               	andlw	254
  1502  0020BA  6E93               	movwf	147,c	;volatile
  1503                           
  1504                           ;keypad.c: 28:     ((((TRISB))) = (((TRISB)) & (~(1 << ((1)))))|((0) << ((1))));
  1505  0020BC  5093               	movf	147,w,c	;volatile
  1506  0020BE  0BFD               	andlw	253
  1507  0020C0  6E93               	movwf	147,c	;volatile
  1508                           
  1509                           ;keypad.c: 29:     ((((TRISB))) = (((TRISB)) & (~(1 << ((2)))))|((0) << ((2))));
  1510  0020C2  5093               	movf	147,w,c	;volatile
  1511  0020C4  0BFB               	andlw	251
  1512  0020C6  6E93               	movwf	147,c	;volatile
  1513                           
  1514                           ;keypad.c: 31:     ((((TRISD))) = (((TRISD)) & (~(1 << ((3)))))|((1) << ((3))));
  1515  0020C8  5095               	movf	149,w,c	;volatile
  1516  0020CA  0BF7               	andlw	247
  1517  0020CC  0908               	iorlw	8
  1518  0020CE  6E95               	movwf	149,c	;volatile
  1519                           
  1520                           ;keypad.c: 32:     ((((TRISD))) = (((TRISD)) & (~(1 << ((2)))))|((1) << ((2))));
  1521  0020D0  5095               	movf	149,w,c	;volatile
  1522  0020D2  0BFB               	andlw	251
  1523  0020D4  0904               	iorlw	4
  1524  0020D6  6E95               	movwf	149,c	;volatile
  1525                           
  1526                           ;keypad.c: 33:     ((((TRISD))) = (((TRISD)) & (~(1 << ((1)))))|((1) << ((1))));
  1527  0020D8  5095               	movf	149,w,c	;volatile
  1528  0020DA  0BFD               	andlw	253
  1529  0020DC  0902               	iorlw	2
  1530  0020DE  6E95               	movwf	149,c	;volatile
  1531                           
  1532                           ;keypad.c: 34:     ((((TRISD))) = (((TRISD)) & (~(1 << ((0)))))|((1) << ((0))));
  1533  0020E0  5095               	movf	149,w,c	;volatile
  1534  0020E2  0BFE               	andlw	254
  1535  0020E4  0901               	iorlw	1
  1536  0020E6  6E95               	movwf	149,c	;volatile
  1537  0020E8                     
  1538                           ;keypad.c: 36:     KEYPAD_reading_index = 0;
  1539  0020E8  0E00               	movlw	0
  1540  0020EA  6E1B               	movwf	_KEYPAD_reading_index^0,c
  1541  0020EC                     
  1542                           ;keypad.c: 37:     KEYPAD_writing_index = 0;
  1543  0020EC  0E00               	movlw	0
  1544  0020EE  6E1A               	movwf	_KEYPAD_writing_index^0,c
  1545  0020F0  0012               	return		;funcret
  1546  0020F2  FFFF               	dw	65535	; errata NOP
  1547  0020F4                     __end_of_Keypad_Init:
  1548                           	opt callstack 0
  1549                           
  1550 ;; *************** function _DO_Init *****************
  1551 ;; Defined at:
  1552 ;;		line 7 in file "DO.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      void 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 0/0
  1563 ;;		On exit  : 0/0
  1564 ;;		Unchanged: 0/0
  1565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1566 ;;      Params:         0       0       0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    7
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579                           
  1580                           	psect	text9
  1581  00212E                     __ptext9:
  1582                           	opt callstack 0
  1583  00212E                     _DO_Init:
  1584                           	opt callstack 0
  1585  00212E  FFFF               	dw	65535	; assembler added errata NOP
  1586  002130                     
  1587                           ;DO.c: 10:     ((((TRISC))) = (((TRISC)) & (~(1 << ((5)))))|((0) << ((5))));
  1588  002130  5094               	movf	148,w,c	;volatile
  1589  002132  0BDF               	andlw	223
  1590  002134  6E94               	movwf	148,c	;volatile
  1591                           
  1592                           ;DO.c: 11:     ((((TRISC))) = (((TRISC)) & (~(1 << ((2)))))|((0) << ((2))));
  1593  002136  5094               	movf	148,w,c	;volatile
  1594  002138  0BFB               	andlw	251
  1595  00213A  6E94               	movwf	148,c	;volatile
  1596                           
  1597                           ;DO.c: 12:     ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
  1598  00213C  5093               	movf	147,w,c	;volatile
  1599  00213E  0B7F               	andlw	127
  1600  002140  6E93               	movwf	147,c	;volatile
  1601                           
  1602                           ;DO.c: 13:     ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
  1603  002142  5093               	movf	147,w,c	;volatile
  1604  002144  0BBF               	andlw	191
  1605  002146  6E93               	movwf	147,c	;volatile
  1606                           
  1607                           ;DO.c: 16:     ((((PORTC))) = (((PORTC)) & (~(1 << ((5)))))|(OFF << ((5))));
  1608  002148  5082               	movf	130,w,c	;volatile
  1609  00214A  0BDF               	andlw	223
  1610  00214C  6E82               	movwf	130,c	;volatile
  1611                           
  1612                           ;DO.c: 17:     ((((PORTC))) = (((PORTC)) & (~(1 << ((2)))))|(OFF << ((2))));
  1613  00214E  5082               	movf	130,w,c	;volatile
  1614  002150  0BFB               	andlw	251
  1615  002152  6E82               	movwf	130,c	;volatile
  1616                           
  1617                           ;DO.c: 18:     ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(OFF << ((7))));
  1618  002154  5081               	movf	129,w,c	;volatile
  1619  002156  0B7F               	andlw	127
  1620  002158  6E81               	movwf	129,c	;volatile
  1621                           
  1622                           ;DO.c: 19:     ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(OFF << ((6))));
  1623  00215A  5081               	movf	129,w,c	;volatile
  1624  00215C  0BBF               	andlw	191
  1625  00215E  6E81               	movwf	129,c	;volatile
  1626  002160  0012               	return		;funcret
  1627  002162  FFFF               	dw	65535	; errata NOP
  1628  002164                     __end_of_DO_Init:
  1629                           	opt callstack 0
  1630                           
  1631 ;; *************** function _TMR_Update *****************
  1632 ;; Defined at:
  1633 ;;		line 34 in file "TMR0.c"
  1634 ;; Parameters:    Size  Location     Type
  1635 ;;		None
  1636 ;; Auto vars:     Size  Location     Type
  1637 ;;		None
  1638 ;; Return value:  Size  Location     Type
  1639 ;;                  1    wreg      void 
  1640 ;; Registers used:
  1641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1642 ;; Tracked objects:
  1643 ;;		On entry : 0/0
  1644 ;;		On exit  : 0/0
  1645 ;;		Unchanged: 0/0
  1646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1647 ;;      Params:         0       0       0       0       0       0       0
  1648 ;;      Locals:         0       0       0       0       0       0       0
  1649 ;;      Temps:         12       0       0       0       0       0       0
  1650 ;;      Totals:        12       0       0       0       0       0       0
  1651 ;;Total ram usage:       12 bytes
  1652 ;; Hardware stack levels used:    1
  1653 ;; Hardware stack levels required when called:    6
  1654 ;; This function calls:
  1655 ;;		_Disp_Update
  1656 ;;		_Keypad_Update
  1657 ;;		_LCD_Update
  1658 ;;		_MW_Update
  1659 ;;		_SW_Update
  1660 ;;		_TIM_Update
  1661 ;; This function is called by:
  1662 ;;		Interrupt level 2
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           	psect	intcode
  1667  000008                     __pintcode:
  1668                           	opt callstack 0
  1669  000008                     _TMR_Update:
  1670                           	opt callstack 0
  1671  000008  FFFF               	dw	65535	; assembler added errata NOP
  1672                           
  1673                           ;incstack = 0
  1674  00000A  8278               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  1675  00000C  CFE9 F064          	movff	fsr0l,??_TMR_Update
  1676  000010  CFEA F065          	movff	fsr0h,??_TMR_Update+1
  1677  000014  CFE1 F066          	movff	fsr1l,??_TMR_Update+2
  1678  000018  CFE2 F067          	movff	fsr1h,??_TMR_Update+3
  1679  00001C  CFD9 F068          	movff	fsr2l,??_TMR_Update+4
  1680  000020  CFDA F069          	movff	fsr2h,??_TMR_Update+5
  1681  000024  CFF3 F06A          	movff	prodl,??_TMR_Update+6
  1682  000028  CFF4 F06B          	movff	prodh,??_TMR_Update+7
  1683  00002C  CFF6 F06C          	movff	tblptrl,??_TMR_Update+8
  1684  000030  CFF7 F06D          	movff	tblptrh,??_TMR_Update+9
  1685  000034  CFF8 F06E          	movff	tblptru,??_TMR_Update+10
  1686  000038  CFF5 F06F          	movff	tablat,??_TMR_Update+11
  1687  00003C                     
  1688                           ;TMR0.c: 36:  (TMR0IF = 0);
  1689  00003C  94F2               	bcf	4082,2,c	;volatile
  1690  00003E                     
  1691                           ;TMR0.c: 37:  (TMR0 = 256 -((10) * 1000 )/(4*.125*8));
  1692  00003E  0EF7               	movlw	247
  1693  000040  6ED7               	movwf	215,c	;volatile
  1694  000042  0E3C               	movlw	60
  1695  000044  6ED6               	movwf	214,c	;volatile
  1696  000046                     
  1697                           ;TMR0.c: 39:     Keypad_Update();
  1698  000046  ECDE  F00D         	call	_Keypad_Update	;wreg free
  1699  00004A                     
  1700                           ;TMR0.c: 40:     SW_Update();
  1701  00004A  EC30  F008         	call	_SW_Update	;wreg free
  1702  00004E                     
  1703                           ;TMR0.c: 41:     MW_Update();
  1704  00004E  EC4E  F003         	call	_MW_Update	;wreg free
  1705  000052                     
  1706                           ;TMR0.c: 42:     Disp_Update();
  1707  000052  EC2F  F00E         	call	_Disp_Update	;wreg free
  1708  000056                     
  1709                           ;TMR0.c: 43:     TIM_Update();
  1710  000056  ECD6  F00C         	call	_TIM_Update	;wreg free
  1711  00005A                     
  1712                           ;TMR0.c: 44:     LCD_Update();
  1713  00005A  EC95  F00F         	call	_LCD_Update	;wreg free
  1714  00005E  C06F  FFF5         	movff	??_TMR_Update+11,tablat
  1715  000062  C06E  FFF8         	movff	??_TMR_Update+10,tblptru
  1716  000066  C06D  FFF7         	movff	??_TMR_Update+9,tblptrh
  1717  00006A  C06C  FFF6         	movff	??_TMR_Update+8,tblptrl
  1718  00006E  C06B  FFF4         	movff	??_TMR_Update+7,prodh
  1719  000072  C06A  FFF3         	movff	??_TMR_Update+6,prodl
  1720  000076  C069  FFDA         	movff	??_TMR_Update+5,fsr2h
  1721  00007A  C068  FFD9         	movff	??_TMR_Update+4,fsr2l
  1722  00007E  C067  FFE2         	movff	??_TMR_Update+3,fsr1h
  1723  000082  C066  FFE1         	movff	??_TMR_Update+2,fsr1l
  1724  000086  C065  FFEA         	movff	??_TMR_Update+1,fsr0h
  1725  00008A  C064  FFE9         	movff	??_TMR_Update,fsr0l
  1726  00008E  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1727  000090  0011               	retfie		f
  1728  000092  FFFF               	dw	65535	; errata NOP
  1729  000094                     __end_of_TMR_Update:
  1730                           	opt callstack 0
  1731                           
  1732 ;; *************** function _TIM_Update *****************
  1733 ;; Defined at:
  1734 ;;		line 31 in file "Time.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;		None
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  1    wreg      void 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1748 ;;      Params:         0       0       0       0       0       0       0
  1749 ;;      Locals:         0       0       0       0       0       0       0
  1750 ;;      Temps:          0       0       0       0       0       0       0
  1751 ;;      Totals:         0       0       0       0       0       0       0
  1752 ;;Total ram usage:        0 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; This function calls:
  1755 ;;		Nothing
  1756 ;; This function is called by:
  1757 ;;		_TMR_Update
  1758 ;; This function uses a non-reentrant model
  1759 ;;
  1760                           
  1761                           	psect	text11
  1762  0019AC                     __ptext11:
  1763                           	opt callstack 0
  1764  0019AC                     _TIM_Update:
  1765                           	opt callstack 0
  1766  0019AC  FFFF               	dw	65535	; assembler added errata NOP
  1767  0019AE                     
  1768                           ;Time.c: 33:     static tWord Tim_Counter = 20;;Time.c: 35:     Tim_Counter += (10);
  1769  0019AE  0E0A               	movlw	10
  1770  0019B0  2670               	addwf	TIM_Update@Tim_Counter^0,f,c
  1771  0019B2  0E00               	movlw	0
  1772  0019B4  2271               	addwfc	(TIM_Update@Tim_Counter+1)^0,f,c
  1773                           
  1774                           ;Time.c: 36:     if(Tim_Counter != (1000))
  1775  0019B6  0EE8               	movlw	232
  1776  0019B8  1870               	xorwf	TIM_Update@Tim_Counter^0,w,c
  1777  0019BA  E10A               	bnz	i2u118_40
  1778  0019BC  0E03               	movlw	3
  1779  0019BE  1871               	xorwf	(TIM_Update@Tim_Counter+1)^0,w,c
  1780  0019C0  B4D8               	btfsc	status,2,c
  1781  0019C2  EFE5  F00C         	goto	i2u118_41
  1782  0019C6  EFE8  F00C         	goto	i2u118_40
  1783  0019CA                     i2u118_41:
  1784  0019CA  FFFF               	dw	65535	; assembler added errata NOP
  1785  0019CC  EFEB  F00C         	goto	i2l2110
  1786  0019D0                     i2u118_40:
  1787  0019D0  FFFF               	dw	65535	; assembler added errata NOP
  1788  0019D2  EF31  F00D         	goto	i2l349
  1789  0019D6                     i2l2110:
  1790  0019D6  FFFF               	dw	65535	; assembler added errata NOP
  1791                           
  1792                           ;Time.c: 40:     Tim_Counter = 0;
  1793  0019D8  0E00               	movlw	0
  1794  0019DA  6E71               	movwf	(TIM_Update@Tim_Counter+1)^0,c
  1795  0019DC  0E00               	movlw	0
  1796  0019DE  6E70               	movwf	TIM_Update@Tim_Counter^0,c
  1797  0019E0                     
  1798                           ;Time.c: 42:     if(TIM_Current_Count_State == Count_Time)
  1799  0019E0  0E02               	movlw	2
  1800  0019E2  181C               	xorwf	_TIM_Current_Count_State^0,w,c
  1801  0019E4  A4D8               	btfss	status,2,c
  1802  0019E6  EFF7  F00C         	goto	i2u119_41
  1803  0019EA  EFFA  F00C         	goto	i2u119_40
  1804  0019EE                     i2u119_41:
  1805  0019EE  FFFF               	dw	65535	; assembler added errata NOP
  1806  0019F0  EF31  F00D         	goto	i2l349
  1807  0019F4                     i2u119_40:
  1808  0019F4  FFFF               	dw	65535	; assembler added errata NOP
  1809  0019F6                     
  1810                           ;Time.c: 43:     {;Time.c: 44:         if ( (TIM_CurrentTime.seconds == 0) && (TIM_Curre
      +                          ntTime.minutes > 0))
  1811  0019F6  5010               	movf	_TIM_CurrentTime^0,w,c
  1812  0019F8  A4D8               	btfss	status,2,c
  1813  0019FA  EF01  F00D         	goto	i2u120_41
  1814  0019FE  EF04  F00D         	goto	i2u120_40
  1815  001A02                     i2u120_41:
  1816  001A02  FFFF               	dw	65535	; assembler added errata NOP
  1817  001A04  EF14  F00D         	goto	i2l2122
  1818  001A08                     i2u120_40:
  1819  001A08  FFFF               	dw	65535	; assembler added errata NOP
  1820  001A0A  5011               	movf	(_TIM_CurrentTime+1)^0,w,c
  1821  001A0C  B4D8               	btfsc	status,2,c
  1822  001A0E  EF0B  F00D         	goto	i2u121_41
  1823  001A12  EF0E  F00D         	goto	i2u121_40
  1824  001A16                     i2u121_41:
  1825  001A16  FFFF               	dw	65535	; assembler added errata NOP
  1826  001A18  EF14  F00D         	goto	i2l2122
  1827  001A1C                     i2u121_40:
  1828  001A1C  FFFF               	dw	65535	; assembler added errata NOP
  1829  001A1E                     
  1830                           ;Time.c: 45:         {;Time.c: 46:             TIM_CurrentTime.seconds = 59;
  1831  001A1E  0E3B               	movlw	59
  1832  001A20  6E10               	movwf	_TIM_CurrentTime^0,c
  1833  001A22                     
  1834                           ;Time.c: 47:             TIM_CurrentTime.minutes --;
  1835  001A22  0611               	decf	(_TIM_CurrentTime+1)^0,f,c
  1836                           
  1837                           ;Time.c: 49:         }
  1838  001A24  EF31  F00D         	goto	i2l349
  1839  001A28                     i2l2122:
  1840  001A28  FFFF               	dw	65535	; assembler added errata NOP
  1841  001A2A  5010               	movf	_TIM_CurrentTime^0,w,c
  1842  001A2C  A4D8               	btfss	status,2,c
  1843  001A2E  EF1B  F00D         	goto	i2u122_41
  1844  001A32  EF1E  F00D         	goto	i2u122_40
  1845  001A36                     i2u122_41:
  1846  001A36  FFFF               	dw	65535	; assembler added errata NOP
  1847  001A38  EF2F  F00D         	goto	i2l2128
  1848  001A3C                     i2u122_40:
  1849  001A3C  FFFF               	dw	65535	; assembler added errata NOP
  1850  001A3E  5011               	movf	(_TIM_CurrentTime+1)^0,w,c
  1851  001A40  A4D8               	btfss	status,2,c
  1852  001A42  EF25  F00D         	goto	i2u123_41
  1853  001A46  EF28  F00D         	goto	i2u123_40
  1854  001A4A                     i2u123_41:
  1855  001A4A  FFFF               	dw	65535	; assembler added errata NOP
  1856  001A4C  EF2F  F00D         	goto	i2l2128
  1857  001A50                     i2u123_40:
  1858  001A50  FFFF               	dw	65535	; assembler added errata NOP
  1859  001A52                     
  1860                           ;Time.c: 51:         {;Time.c: 52:             TIM_CurrentTime.seconds = 0;
  1861  001A52  0E00               	movlw	0
  1862  001A54  6E10               	movwf	_TIM_CurrentTime^0,c
  1863                           
  1864                           ;Time.c: 53:             TIM_CurrentTime.minutes = 0;
  1865  001A56  0E00               	movlw	0
  1866  001A58  6E11               	movwf	(_TIM_CurrentTime+1)^0,c
  1867                           
  1868                           ;Time.c: 54:         }
  1869  001A5A  EF31  F00D         	goto	i2l349
  1870  001A5E                     i2l2128:
  1871  001A5E  FFFF               	dw	65535	; assembler added errata NOP
  1872                           
  1873                           ;Time.c: 56:         {;Time.c: 57:            TIM_CurrentTime.seconds --;
  1874  001A60  0610               	decf	_TIM_CurrentTime^0,f,c
  1875  001A62                     i2l349:
  1876  001A62  FFFF               	dw	65535	; assembler added errata NOP
  1877  001A64  0012               	return		;funcret
  1878  001A66  FFFF               	dw	65535	; errata NOP
  1879  001A68                     __end_of_TIM_Update:
  1880                           	opt callstack 0
  1881                           
  1882 ;; *************** function _SW_Update *****************
  1883 ;; Defined at:
  1884 ;;		line 83 in file "SW.c"
  1885 ;; Parameters:    Size  Location     Type
  1886 ;;		None
  1887 ;; Auto vars:     Size  Location     Type
  1888 ;;  index           1    2[COMRAM] unsigned char 
  1889 ;; Return value:  Size  Location     Type
  1890 ;;                  1    wreg      void 
  1891 ;; Registers used:
  1892 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1893 ;; Tracked objects:
  1894 ;;		On entry : 0/0
  1895 ;;		On exit  : 0/0
  1896 ;;		Unchanged: 0/0
  1897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1898 ;;      Params:         0       0       0       0       0       0       0
  1899 ;;      Locals:         1       0       0       0       0       0       0
  1900 ;;      Temps:          2       0       0       0       0       0       0
  1901 ;;      Totals:         3       0       0       0       0       0       0
  1902 ;;Total ram usage:        3 bytes
  1903 ;; Hardware stack levels used:    1
  1904 ;; This function calls:
  1905 ;;		Nothing
  1906 ;; This function is called by:
  1907 ;;		_TMR_Update
  1908 ;; This function uses a non-reentrant model
  1909 ;;
  1910                           
  1911                           	psect	text12
  1912  001060                     __ptext12:
  1913                           	opt callstack 0
  1914  001060                     _SW_Update:
  1915                           	opt callstack 0
  1916  001060  FFFF               	dw	65535	; assembler added errata NOP
  1917  001062                     
  1918                           ;SW.c: 89:     SW_counter += (10);
  1919  001062  0E0A               	movlw	10
  1920  001064  2614               	addwf	SW_Update@SW_counter^0,f,c
  1921  001066  0E00               	movlw	0
  1922  001068  2215               	addwfc	(SW_Update@SW_counter+1)^0,f,c
  1923  00106A                     
  1924                           ;SW.c: 91:     if (SW_counter != (20)){
  1925  00106A  0E14               	movlw	20
  1926  00106C  1814               	xorwf	SW_Update@SW_counter^0,w,c
  1927  00106E  1015               	iorwf	(SW_Update@SW_counter+1)^0,w,c
  1928  001070  B4D8               	btfsc	status,2,c
  1929  001072  EF3D  F008         	goto	i2u107_41
  1930  001076  EF40  F008         	goto	i2u107_40
  1931  00107A                     i2u107_41:
  1932  00107A  FFFF               	dw	65535	; assembler added errata NOP
  1933  00107C  EF43  F008         	goto	i2l2034
  1934  001080                     i2u107_40:
  1935  001080  FFFF               	dw	65535	; assembler added errata NOP
  1936  001082  EF64  F009         	goto	i2l197
  1937  001086                     i2l2034:
  1938  001086  FFFF               	dw	65535	; assembler added errata NOP
  1939                           
  1940                           ;SW.c: 95:     SW_counter = 0;
  1941  001088  0E00               	movlw	0
  1942  00108A  6E15               	movwf	(SW_Update@SW_counter+1)^0,c
  1943  00108C  0E00               	movlw	0
  1944  00108E  6E14               	movwf	SW_Update@SW_counter^0,c
  1945                           
  1946                           ;SW.c: 98:     for (index = DOOR_SW; index < (2); index++)
  1947  001090  0E00               	movlw	0
  1948  001092  6E4D               	movwf	SW_Update@index^0,c
  1949  001094                     i2l2040:
  1950  001094  FFFF               	dw	65535	; assembler added errata NOP
  1951                           
  1952                           ;SW.c: 99:     {;SW.c: 101:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_s
      +                          amples[1];
  1953  001096  504D               	movf	SW_Update@index^0,w,c
  1954  001098  0D03               	mullw	3
  1955  00109A  0E09               	movlw	low (_SWs_Info+1)
  1956  00109C  24F3               	addwf	243,w,c
  1957  00109E  6ED9               	movwf	fsr2l,c
  1958  0010A0  0E00               	movlw	high (_SWs_Info+1)
  1959  0010A2  20F4               	addwfc	prodh,w,c
  1960  0010A4  6EDA               	movwf	fsr2h,c
  1961  0010A6  504D               	movf	SW_Update@index^0,w,c
  1962  0010A8  0D03               	mullw	3
  1963  0010AA  0E08               	movlw	low _SWs_Info
  1964  0010AC  24F3               	addwf	243,w,c
  1965  0010AE  6EE1               	movwf	fsr1l,c
  1966  0010B0  0E00               	movlw	high _SWs_Info
  1967  0010B2  20F4               	addwfc	prodh,w,c
  1968  0010B4  6EE2               	movwf	fsr1h,c
  1969  0010B6  CFDF FFE7          	movff	indf2,indf1
  1970  0010BA                     
  1971                           ;SW.c: 103:         if (index == DOOR_SW)
  1972  0010BA  504D               	movf	SW_Update@index^0,w,c
  1973  0010BC  A4D8               	btfss	status,2,c
  1974  0010BE  EF63  F008         	goto	i2u108_41
  1975  0010C2  EF66  F008         	goto	i2u108_40
  1976  0010C6                     i2u108_41:
  1977  0010C6  FFFF               	dw	65535	; assembler added errata NOP
  1978  0010C8  EF76  F008         	goto	i2l2046
  1979  0010CC                     i2u108_40:
  1980  0010CC  FFFF               	dw	65535	; assembler added errata NOP
  1981  0010CE                     
  1982                           ;SW.c: 104:         {;SW.c: 105:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((3)))) >> (((3))));
  1983  0010CE  504D               	movf	SW_Update@index^0,w,c
  1984  0010D0  0D03               	mullw	3
  1985  0010D2  0E09               	movlw	low (_SWs_Info+1)
  1986  0010D4  24F3               	addwf	243,w,c
  1987  0010D6  6ED9               	movwf	fsr2l,c
  1988  0010D8  0E00               	movlw	high (_SWs_Info+1)
  1989  0010DA  20F4               	addwfc	prodh,w,c
  1990  0010DC  6EDA               	movwf	fsr2h,c
  1991  0010DE  3881               	swapf	129,w,c	;volatile
  1992  0010E0  46E8               	rlncf	wreg,f,c
  1993  0010E2  0B1F               	andlw	31
  1994  0010E4  0B01               	andlw	1
  1995  0010E6  6EDF               	movwf	indf2,c
  1996                           
  1997                           ;SW.c: 106:         }
  1998  0010E8  EF32  F009         	goto	i2l2072
  1999  0010EC                     i2l2046:
  2000  0010EC  FFFF               	dw	65535	; assembler added errata NOP
  2001  0010EE  044D               	decf	SW_Update@index^0,w,c
  2002  0010F0  A4D8               	btfss	status,2,c
  2003  0010F2  EF7D  F008         	goto	i2u109_41
  2004  0010F6  EF80  F008         	goto	i2u109_40
  2005  0010FA                     i2u109_41:
  2006  0010FA  FFFF               	dw	65535	; assembler added errata NOP
  2007  0010FC  EF8F  F008         	goto	i2l201
  2008  001100                     i2u109_40:
  2009  001100  FFFF               	dw	65535	; assembler added errata NOP
  2010  001102                     
  2011                           ;SW.c: 108:         {;SW.c: 109:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((4)))) >> (((4))));
  2012  001102  504D               	movf	SW_Update@index^0,w,c
  2013  001104  0D03               	mullw	3
  2014  001106  0E09               	movlw	low (_SWs_Info+1)
  2015  001108  24F3               	addwf	243,w,c
  2016  00110A  6ED9               	movwf	fsr2l,c
  2017  00110C  0E00               	movlw	high (_SWs_Info+1)
  2018  00110E  20F4               	addwfc	prodh,w,c
  2019  001110  6EDA               	movwf	fsr2h,c
  2020  001112  3881               	swapf	129,w,c	;volatile
  2021  001114  0B0F               	andlw	15
  2022  001116  0B01               	andlw	1
  2023  001118  6EDF               	movwf	indf2,c
  2024                           
  2025                           ;SW.c: 110:         }
  2026  00111A  EF32  F009         	goto	i2l2072
  2027  00111E                     i2l201:
  2028  00111E  FFFF               	dw	65535	; assembler added errata NOP
  2029                           
  2030                           ;SW.c: 118:         switch(SWs_Info[index].sw_state)
  2031  001120  EF32  F009         	goto	i2l2072
  2032  001124                     i2l2050:
  2033  001124  FFFF               	dw	65535	; assembler added errata NOP
  2034                           
  2035                           ;SW.c: 123:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
  2036  001126  504D               	movf	SW_Update@index^0,w,c
  2037  001128  0D03               	mullw	3
  2038  00112A  0E08               	movlw	low _SWs_Info
  2039  00112C  24F3               	addwf	243,w,c
  2040  00112E  6ED9               	movwf	fsr2l,c
  2041  001130  0E00               	movlw	high _SWs_Info
  2042  001132  20F4               	addwfc	prodh,w,c
  2043  001134  6EDA               	movwf	fsr2h,c
  2044  001136  50DF               	movf	indf2,w,c
  2045  001138  A4D8               	btfss	status,2,c
  2046  00113A  EFA1  F008         	goto	i2u110_41
  2047  00113E  EFA4  F008         	goto	i2u110_40
  2048  001142                     i2u110_41:
  2049  001142  FFFF               	dw	65535	; assembler added errata NOP
  2050  001144  EF59  F009         	goto	i2l2074
  2051  001148                     i2u110_40:
  2052  001148  FFFF               	dw	65535	; assembler added errata NOP
  2053  00114A  504D               	movf	SW_Update@index^0,w,c
  2054  00114C  0D03               	mullw	3
  2055  00114E  0E09               	movlw	low (_SWs_Info+1)
  2056  001150  24F3               	addwf	243,w,c
  2057  001152  6ED9               	movwf	fsr2l,c
  2058  001154  0E00               	movlw	high (_SWs_Info+1)
  2059  001156  20F4               	addwfc	prodh,w,c
  2060  001158  6EDA               	movwf	fsr2h,c
  2061  00115A  50DF               	movf	indf2,w,c
  2062  00115C  A4D8               	btfss	status,2,c
  2063  00115E  EFB3  F008         	goto	i2u111_41
  2064  001162  EFB6  F008         	goto	i2u111_40
  2065  001166                     i2u111_41:
  2066  001166  FFFF               	dw	65535	; assembler added errata NOP
  2067  001168  EF59  F009         	goto	i2l2074
  2068  00116C                     i2u111_40:
  2069  00116C  FFFF               	dw	65535	; assembler added errata NOP
  2070  00116E                     
  2071                           ;SW.c: 125:                 {;SW.c: 126:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
  2072  00116E  504D               	movf	SW_Update@index^0,w,c
  2073  001170  0D03               	mullw	3
  2074  001172  0E0A               	movlw	low (_SWs_Info+2)
  2075  001174  24F3               	addwf	243,w,c
  2076  001176  6ED9               	movwf	fsr2l,c
  2077  001178  0E00               	movlw	high (_SWs_Info+2)
  2078  00117A  20F4               	addwfc	prodh,w,c
  2079  00117C  6EDA               	movwf	fsr2h,c
  2080  00117E  0E01               	movlw	1
  2081  001180  6EDF               	movwf	indf2,c
  2082                           
  2083                           ;SW.c: 127:                 } else
  2084  001182  EF59  F009         	goto	i2l2074
  2085  001186                     i2l2056:
  2086  001186  FFFF               	dw	65535	; assembler added errata NOP
  2087                           
  2088                           ;SW.c: 134:                 if (SWs_Info[index].sw_samples[1] == (0))
  2089  001188  504D               	movf	SW_Update@index^0,w,c
  2090  00118A  0D03               	mullw	3
  2091  00118C  0E09               	movlw	low (_SWs_Info+1)
  2092  00118E  24F3               	addwf	243,w,c
  2093  001190  6ED9               	movwf	fsr2l,c
  2094  001192  0E00               	movlw	high (_SWs_Info+1)
  2095  001194  20F4               	addwfc	prodh,w,c
  2096  001196  6EDA               	movwf	fsr2h,c
  2097  001198  50DF               	movf	indf2,w,c
  2098  00119A  A4D8               	btfss	status,2,c
  2099  00119C  EFD2  F008         	goto	i2u112_41
  2100  0011A0  EFD5  F008         	goto	i2u112_40
  2101  0011A4                     i2u112_41:
  2102  0011A4  FFFF               	dw	65535	; assembler added errata NOP
  2103  0011A6  EF59  F009         	goto	i2l2074
  2104  0011AA                     i2u112_40:
  2105  0011AA  FFFF               	dw	65535	; assembler added errata NOP
  2106  0011AC                     
  2107                           ;SW.c: 135:                 {;SW.c: 136:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
  2108  0011AC  504D               	movf	SW_Update@index^0,w,c
  2109  0011AE  0D03               	mullw	3
  2110  0011B0  0E0A               	movlw	low (_SWs_Info+2)
  2111  0011B2  24F3               	addwf	243,w,c
  2112  0011B4  6ED9               	movwf	fsr2l,c
  2113  0011B6  0E00               	movlw	high (_SWs_Info+2)
  2114  0011B8  20F4               	addwfc	prodh,w,c
  2115  0011BA  6EDA               	movwf	fsr2h,c
  2116  0011BC  0E02               	movlw	2
  2117  0011BE  6EDF               	movwf	indf2,c
  2118                           
  2119                           ;SW.c: 137:                 } else
  2120  0011C0  EF59  F009         	goto	i2l2074
  2121  0011C4                     i2l2060:
  2122  0011C4  FFFF               	dw	65535	; assembler added errata NOP
  2123                           
  2124                           ;SW.c: 144:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
  2125  0011C6  504D               	movf	SW_Update@index^0,w,c
  2126  0011C8  0D03               	mullw	3
  2127  0011CA  0E08               	movlw	low _SWs_Info
  2128  0011CC  24F3               	addwf	243,w,c
  2129  0011CE  6ED9               	movwf	fsr2l,c
  2130  0011D0  0E00               	movlw	high _SWs_Info
  2131  0011D2  20F4               	addwfc	prodh,w,c
  2132  0011D4  6EDA               	movwf	fsr2h,c
  2133  0011D6  04DE               	decf	postinc2,w,c
  2134  0011D8  A4D8               	btfss	status,2,c
  2135  0011DA  EFF1  F008         	goto	i2u113_41
  2136  0011DE  EFF4  F008         	goto	i2u113_40
  2137  0011E2                     i2u113_41:
  2138  0011E2  FFFF               	dw	65535	; assembler added errata NOP
  2139  0011E4  EF59  F009         	goto	i2l2074
  2140  0011E8                     i2u113_40:
  2141  0011E8  FFFF               	dw	65535	; assembler added errata NOP
  2142  0011EA  504D               	movf	SW_Update@index^0,w,c
  2143  0011EC  0D03               	mullw	3
  2144  0011EE  0E09               	movlw	low (_SWs_Info+1)
  2145  0011F0  24F3               	addwf	243,w,c
  2146  0011F2  6ED9               	movwf	fsr2l,c
  2147  0011F4  0E00               	movlw	high (_SWs_Info+1)
  2148  0011F6  20F4               	addwfc	prodh,w,c
  2149  0011F8  6EDA               	movwf	fsr2h,c
  2150  0011FA  04DE               	decf	postinc2,w,c
  2151  0011FC  A4D8               	btfss	status,2,c
  2152  0011FE  EF03  F009         	goto	i2u114_41
  2153  001202  EF06  F009         	goto	i2u114_40
  2154  001206                     i2u114_41:
  2155  001206  FFFF               	dw	65535	; assembler added errata NOP
  2156  001208  EF59  F009         	goto	i2l2074
  2157  00120C                     i2u114_40:
  2158  00120C  FFFF               	dw	65535	; assembler added errata NOP
  2159  00120E                     
  2160                           ;SW.c: 146:                 {;SW.c: 147:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
  2161  00120E  504D               	movf	SW_Update@index^0,w,c
  2162  001210  0D03               	mullw	3
  2163  001212  0E0A               	movlw	low (_SWs_Info+2)
  2164  001214  24F3               	addwf	243,w,c
  2165  001216  6ED9               	movwf	fsr2l,c
  2166  001218  0E00               	movlw	high (_SWs_Info+2)
  2167  00121A  20F4               	addwfc	prodh,w,c
  2168  00121C  6EDA               	movwf	fsr2h,c
  2169  00121E  0E03               	movlw	3
  2170  001220  6EDF               	movwf	indf2,c
  2171                           
  2172                           ;SW.c: 148:                 }
  2173  001222  EF59  F009         	goto	i2l2074
  2174  001226                     i2l2066:
  2175  001226  FFFF               	dw	65535	; assembler added errata NOP
  2176                           
  2177                           ;SW.c: 156:                 if (SWs_Info[index].sw_samples[1] == (1))
  2178  001228  504D               	movf	SW_Update@index^0,w,c
  2179  00122A  0D03               	mullw	3
  2180  00122C  0E09               	movlw	low (_SWs_Info+1)
  2181  00122E  24F3               	addwf	243,w,c
  2182  001230  6ED9               	movwf	fsr2l,c
  2183  001232  0E00               	movlw	high (_SWs_Info+1)
  2184  001234  20F4               	addwfc	prodh,w,c
  2185  001236  6EDA               	movwf	fsr2h,c
  2186  001238  04DE               	decf	postinc2,w,c
  2187  00123A  A4D8               	btfss	status,2,c
  2188  00123C  EF22  F009         	goto	i2u115_41
  2189  001240  EF25  F009         	goto	i2u115_40
  2190  001244                     i2u115_41:
  2191  001244  FFFF               	dw	65535	; assembler added errata NOP
  2192  001246  EF59  F009         	goto	i2l2074
  2193  00124A                     i2u115_40:
  2194  00124A  FFFF               	dw	65535	; assembler added errata NOP
  2195  00124C                     
  2196                           ;SW.c: 157:                 {;SW.c: 158:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
  2197  00124C  504D               	movf	SW_Update@index^0,w,c
  2198  00124E  0D03               	mullw	3
  2199  001250  0E0A               	movlw	low (_SWs_Info+2)
  2200  001252  24F3               	addwf	243,w,c
  2201  001254  6ED9               	movwf	fsr2l,c
  2202  001256  0E00               	movlw	high (_SWs_Info+2)
  2203  001258  20F4               	addwfc	prodh,w,c
  2204  00125A  6EDA               	movwf	fsr2h,c
  2205  00125C  0E00               	movlw	0
  2206  00125E  6EDF               	movwf	indf2,c
  2207                           
  2208                           ;SW.c: 159:                 } else
  2209  001260  EF59  F009         	goto	i2l2074
  2210  001264                     i2l2072:
  2211  001264  FFFF               	dw	65535	; assembler added errata NOP
  2212  001266  504D               	movf	SW_Update@index^0,w,c
  2213  001268  0D03               	mullw	3
  2214  00126A  0E0A               	movlw	low (_SWs_Info+2)
  2215  00126C  24F3               	addwf	243,w,c
  2216  00126E  6ED9               	movwf	fsr2l,c
  2217  001270  0E00               	movlw	high (_SWs_Info+2)
  2218  001272  20F4               	addwfc	prodh,w,c
  2219  001274  6EDA               	movwf	fsr2h,c
  2220  001276  50DF               	movf	indf2,w,c
  2221  001278  6E4B               	movwf	??_SW_Update^0,c
  2222  00127A  6A4C               	clrf	(??_SW_Update+1)^0,c
  2223                           
  2224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2225                           ; Switch size 1, requested type "simple"
  2226                           ; Number of cases is 1, Range of values is 0 to 0
  2227                           ; switch strategies available:
  2228                           ; Name         Instructions Cycles
  2229                           ; simple_byte            4     3 (average)
  2230                           ;	Chosen strategy is simple_byte
  2231  00127C  504C               	movf	(??_SW_Update+1)^0,w,c
  2232  00127E  0A00               	xorlw	0	; case 0
  2233  001280  B4D8               	btfsc	status,2,c
  2234  001282  EF45  F009         	goto	i2l3302
  2235  001286  EF59  F009         	goto	i2l2074
  2236  00128A                     i2l3302:
  2237  00128A  FFFF               	dw	65535	; assembler added errata NOP
  2238                           
  2239                           ; Switch size 1, requested type "simple"
  2240                           ; Number of cases is 4, Range of values is 0 to 3
  2241                           ; switch strategies available:
  2242                           ; Name         Instructions Cycles
  2243                           ; simple_byte           13     7 (average)
  2244                           ;	Chosen strategy is simple_byte
  2245  00128C  504B               	movf	??_SW_Update^0,w,c
  2246  00128E  0A00               	xorlw	0	; case 0
  2247  001290  B4D8               	btfsc	status,2,c
  2248  001292  EF92  F008         	goto	i2l2050
  2249  001296  0A01               	xorlw	1	; case 1
  2250  001298  B4D8               	btfsc	status,2,c
  2251  00129A  EFC3  F008         	goto	i2l2056
  2252  00129E  0A03               	xorlw	3	; case 2
  2253  0012A0  B4D8               	btfsc	status,2,c
  2254  0012A2  EFE2  F008         	goto	i2l2060
  2255  0012A6  0A01               	xorlw	1	; case 3
  2256  0012A8  B4D8               	btfsc	status,2,c
  2257  0012AA  EF13  F009         	goto	i2l2066
  2258  0012AE  EF59  F009         	goto	i2l2074
  2259  0012B2                     i2l2074:
  2260  0012B2  FFFF               	dw	65535	; assembler added errata NOP
  2261                           
  2262                           ;SW.c: 169:     }
  2263  0012B4  2A4D               	incf	SW_Update@index^0,f,c
  2264  0012B6  0E01               	movlw	1
  2265  0012B8  644D               	cpfsgt	SW_Update@index^0,c
  2266  0012BA  EF61  F009         	goto	i2u116_41
  2267  0012BE  EF64  F009         	goto	i2u116_40
  2268  0012C2                     i2u116_41:
  2269  0012C2  FFFF               	dw	65535	; assembler added errata NOP
  2270  0012C4  EF4A  F008         	goto	i2l2040
  2271  0012C8                     i2u116_40:
  2272  0012C8                     i2l197:
  2273  0012C8  FFFF               	dw	65535	; assembler added errata NOP
  2274  0012CA  0012               	return		;funcret
  2275  0012CC  FFFF               	dw	65535	; errata NOP
  2276  0012CE                     __end_of_SW_Update:
  2277                           	opt callstack 0
  2278                           
  2279 ;; *************** function _MW_Update *****************
  2280 ;; Defined at:
  2281 ;;		line 24 in file "MW.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;		None
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  Time_Val        2   14[COMRAM] unsigned int 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2295 ;;      Params:         0       0       0       0       0       0       0
  2296 ;;      Locals:         2       0       0       0       0       0       0
  2297 ;;      Temps:          2       0       0       0       0       0       0
  2298 ;;      Totals:         4       0       0       0       0       0       0
  2299 ;;Total ram usage:        4 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    3
  2302 ;; This function calls:
  2303 ;;		_DO_SetState
  2304 ;;		_Is_Finished
  2305 ;;		_Keypad_Get_Data_From_buffer
  2306 ;;		_LCD_Clear
  2307 ;;		_SW_GetState
  2308 ;;		_Set_Disp_Current_Count_State
  2309 ;;		_Set_Disp_State
  2310 ;;		_Set_LCD_BUFFER1
  2311 ;;		_Set_LCD_BUFFER2
  2312 ;;		_Set_TIM_Current_Count_State
  2313 ;;		_Set_Time
  2314 ;;		_Toggle_Lamps
  2315 ;; This function is called by:
  2316 ;;		_TMR_Update
  2317 ;; This function uses a non-reentrant model
  2318 ;;
  2319                           
  2320                           	psect	text13
  2321  00069C                     __ptext13:
  2322                           	opt callstack 0
  2323  00069C                     _MW_Update:
  2324                           	opt callstack 0
  2325  00069C  FFFF               	dw	65535	; assembler added errata NOP
  2326  00069E                     
  2327                           ;MW.c: 26:     static tByte Min_Unit_val = 0;;MW.c: 27:     static tByte Min_Ten_val = 0
      +                          ;;MW.c: 28:     static tByte Sec_Unit_val = 0;;MW.c: 29:     static tByte Sec_Ten_val = 
      +                          0;;MW.c: 30:     static tByte Pressed_Key = Key_INIT ;;MW.c: 31:     tWord Time_Val = Mi
      +                          n_Unit_val + Min_Ten_val + Sec_Unit_val + Sec_Ten_val;
  2328  00069E  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  2329  0006A0  C027  F057         	movff	MW_Update@Min_Unit_val,??_MW_Update
  2330  0006A4  6A58               	clrf	(??_MW_Update+1)^0,c
  2331  0006A6  2657               	addwf	??_MW_Update^0,f,c
  2332  0006A8  0E00               	movlw	0
  2333  0006AA  2258               	addwfc	(??_MW_Update+1)^0,f,c
  2334  0006AC  5025               	movf	MW_Update@Sec_Unit_val^0,w,c
  2335  0006AE  2657               	addwf	??_MW_Update^0,f,c
  2336  0006B0  0E00               	movlw	0
  2337  0006B2  2258               	addwfc	(??_MW_Update+1)^0,f,c
  2338  0006B4  5024               	movf	MW_Update@Sec_Ten_val^0,w,c
  2339  0006B6  2457               	addwf	??_MW_Update^0,w,c
  2340  0006B8  6E59               	movwf	MW_Update@Time_Val^0,c
  2341  0006BA  0E00               	movlw	0
  2342  0006BC  2058               	addwfc	(??_MW_Update+1)^0,w,c
  2343  0006BE  6E5A               	movwf	(MW_Update@Time_Val+1)^0,c
  2344                           
  2345                           ;MW.c: 33:     static tByte MW_Update_Counter = 10;;MW.c: 34:     MW_Update_Counter += (
      +                          10);
  2346  0006C0  0E0A               	movlw	10
  2347  0006C2  2675               	addwf	MW_Update@MW_Update_Counter^0,f,c
  2348                           
  2349                           ;MW.c: 35:     if(MW_Update_Counter != (50))
  2350  0006C4  0E32               	movlw	50
  2351  0006C6  1875               	xorwf	MW_Update@MW_Update_Counter^0,w,c
  2352  0006C8  B4D8               	btfsc	status,2,c
  2353  0006CA  EF69  F003         	goto	i2u187_41
  2354  0006CE  EF6C  F003         	goto	i2u187_40
  2355  0006D2                     i2u187_41:
  2356  0006D2  FFFF               	dw	65535	; assembler added errata NOP
  2357  0006D4  EF6F  F003         	goto	i2l2724
  2358  0006D8                     i2u187_40:
  2359  0006D8  FFFF               	dw	65535	; assembler added errata NOP
  2360  0006DA  EF6C  F006         	goto	i2l48
  2361  0006DE                     i2l2724:
  2362  0006DE  FFFF               	dw	65535	; assembler added errata NOP
  2363                           
  2364                           ;MW.c: 39:     MW_Update_Counter = 0;
  2365  0006E0  0E00               	movlw	0
  2366  0006E2  6E75               	movwf	MW_Update@MW_Update_Counter^0,c
  2367  0006E4                     
  2368                           ;MW.c: 41:     Set_TIM_Current_Count_State (Current_Count_State);
  2369  0006E4  5076               	movf	_Current_Count_State^0,w,c
  2370  0006E6  EC6F  F011         	call	_Set_TIM_Current_Count_State
  2371  0006EA                     
  2372                           ;MW.c: 42:     Set_Disp_Current_Count_State (Current_Count_State);
  2373  0006EA  5076               	movf	_Current_Count_State^0,w,c
  2374  0006EC  EC7B  F011         	call	_Set_Disp_Current_Count_State
  2375  0006F0                     
  2376                           ;MW.c: 44:     if(Keypad_Get_Data_From_buffer(&Pressed_Key) == 1)
  2377  0006F0  0E77               	movlw	low MW_Update@Pressed_Key
  2378  0006F2  6E4B               	movwf	Keypad_Get_Data_From_buffer@pKey^0,c
  2379  0006F4  0E00               	movlw	high MW_Update@Pressed_Key
  2380  0006F6  6E4C               	movwf	(Keypad_Get_Data_From_buffer@pKey+1)^0,c
  2381  0006F8  EC39  F010         	call	_Keypad_Get_Data_From_buffer	;wreg free
  2382  0006FC  06E8               	decf	wreg,f,c
  2383  0006FE  A4D8               	btfss	status,2,c
  2384  000700  EF84  F003         	goto	i2u188_41
  2385  000704  EF87  F003         	goto	i2u188_40
  2386  000708                     i2u188_41:
  2387  000708  FFFF               	dw	65535	; assembler added errata NOP
  2388  00070A  EF8E  F003         	goto	i2l2734
  2389  00070E                     i2u188_40:
  2390  00070E  FFFF               	dw	65535	; assembler added errata NOP
  2391  000710                     
  2392                           ;MW.c: 45:     {;MW.c: 46:         Keypad_Get_Data_From_buffer(&Pressed_Key);
  2393  000710  0E77               	movlw	low MW_Update@Pressed_Key
  2394  000712  6E4B               	movwf	Keypad_Get_Data_From_buffer@pKey^0,c
  2395  000714  0E00               	movlw	high MW_Update@Pressed_Key
  2396  000716  6E4C               	movwf	(Keypad_Get_Data_From_buffer@pKey+1)^0,c
  2397  000718  EC39  F010         	call	_Keypad_Get_Data_From_buffer	;wreg free
  2398  00071C                     i2l2734:
  2399  00071C  FFFF               	dw	65535	; assembler added errata NOP
  2400                           
  2401                           ;MW.c: 49:      if(Current_Count_State == Count_Time)
  2402  00071E  0E02               	movlw	2
  2403  000720  1876               	xorwf	_Current_Count_State^0,w,c
  2404  000722  A4D8               	btfss	status,2,c
  2405  000724  EF96  F003         	goto	i2u189_41
  2406  000728  EF99  F003         	goto	i2u189_40
  2407  00072C                     i2u189_41:
  2408  00072C  FFFF               	dw	65535	; assembler added errata NOP
  2409  00072E  EFA8  F003         	goto	i2l2738
  2410  000732                     i2u189_40:
  2411  000732  FFFF               	dw	65535	; assembler added errata NOP
  2412  000734                     
  2413                           ;MW.c: 50:     {;MW.c: 51:         DO_SetState(Heater , ON);
  2414  000734  0E01               	movlw	1
  2415  000736  6E4B               	movwf	DO_SetState@state^0,c
  2416  000738  0E00               	movlw	0
  2417  00073A  EC76  F00C         	call	_DO_SetState
  2418                           
  2419                           ;MW.c: 52:         DO_SetState(Motor , ON);
  2420  00073E  0E01               	movlw	1
  2421  000740  6E4B               	movwf	DO_SetState@state^0,c
  2422  000742  0E01               	movlw	1
  2423  000744  EC76  F00C         	call	_DO_SetState
  2424                           
  2425                           ;MW.c: 53:         Toggle_Lamps();
  2426  000748  EC2F  F00F         	call	_Toggle_Lamps	;wreg free
  2427                           
  2428                           ;MW.c: 54:     }else
  2429  00074C  EFCC  F003         	goto	i2l2744
  2430  000750                     i2l2738:
  2431  000750  FFFF               	dw	65535	; assembler added errata NOP
  2432                           
  2433                           ;MW.c: 55:     {;MW.c: 56:         DO_SetState(Heater , OFF);
  2434  000752  0E00               	movlw	0
  2435  000754  6E4B               	movwf	DO_SetState@state^0,c
  2436  000756  0E00               	movlw	0
  2437  000758  EC76  F00C         	call	_DO_SetState
  2438                           
  2439                           ;MW.c: 57:         DO_SetState(Motor , OFF);
  2440  00075C  0E00               	movlw	0
  2441  00075E  6E4B               	movwf	DO_SetState@state^0,c
  2442  000760  0E01               	movlw	1
  2443  000762  EC76  F00C         	call	_DO_SetState
  2444                           
  2445                           ;MW.c: 58:         DO_SetState(Lamp_1 , OFF);
  2446  000766  0E00               	movlw	0
  2447  000768  6E4B               	movwf	DO_SetState@state^0,c
  2448  00076A  0E02               	movlw	2
  2449  00076C  EC76  F00C         	call	_DO_SetState
  2450                           
  2451                           ;MW.c: 59:         DO_SetState(Lamp_2 , OFF);
  2452  000770  0E00               	movlw	0
  2453  000772  6E4B               	movwf	DO_SetState@state^0,c
  2454  000774  0E03               	movlw	3
  2455  000776  EC76  F00C         	call	_DO_SetState
  2456  00077A                     
  2457                           ;MW.c: 61:         if(Current_Count_State == Wait_Door)
  2458  00077A  0476               	decf	_Current_Count_State^0,w,c
  2459  00077C  A4D8               	btfss	status,2,c
  2460  00077E  EFC3  F003         	goto	i2u190_41
  2461  000782  EFC6  F003         	goto	i2u190_40
  2462  000786                     i2u190_41:
  2463  000786  FFFF               	dw	65535	; assembler added errata NOP
  2464  000788  EFCC  F003         	goto	i2l2744
  2465  00078C                     i2u190_40:
  2466  00078C  FFFF               	dw	65535	; assembler added errata NOP
  2467  00078E                     
  2468                           ;MW.c: 62:         {;MW.c: 63:             DO_SetState(Lamp_1 , ON);
  2469  00078E  0E01               	movlw	1
  2470  000790  6E4B               	movwf	DO_SetState@state^0,c
  2471  000792  0E02               	movlw	2
  2472  000794  EC76  F00C         	call	_DO_SetState
  2473  000798                     i2l2744:
  2474  000798  FFFF               	dw	65535	; assembler added errata NOP
  2475                           
  2476                           ;MW.c: 68:     if(SW_GetState(WEIGHT_SW) == SW_PRESSED)
  2477  00079A  0E01               	movlw	1
  2478  00079C  EC19  F011         	call	_SW_GetState
  2479  0007A0  0A02               	xorlw	2
  2480  0007A2  A4D8               	btfss	status,2,c
  2481  0007A4  EFD6  F003         	goto	i2u191_41
  2482  0007A8  EFD9  F003         	goto	i2u191_40
  2483  0007AC                     i2u191_41:
  2484  0007AC  FFFF               	dw	65535	; assembler added errata NOP
  2485  0007AE  EFDC  F003         	goto	i2l2748
  2486  0007B2                     i2u191_40:
  2487  0007B2  FFFF               	dw	65535	; assembler added errata NOP
  2488  0007B4                     
  2489                           ;MW.c: 69:     {;MW.c: 70:         Weight_State = Pressed;
  2490  0007B4  0E01               	movlw	1
  2491  0007B6  6E2A               	movwf	_Weight_State^0,c
  2492  0007B8                     i2l2748:
  2493  0007B8  FFFF               	dw	65535	; assembler added errata NOP
  2494                           
  2495                           ;MW.c: 72:     if(Weight_State == Pressed)
  2496  0007BA  042A               	decf	_Weight_State^0,w,c
  2497  0007BC  A4D8               	btfss	status,2,c
  2498  0007BE  EFE3  F003         	goto	i2u192_41
  2499  0007C2  EFE6  F003         	goto	i2u192_40
  2500  0007C6                     i2u192_41:
  2501  0007C6  FFFF               	dw	65535	; assembler added errata NOP
  2502  0007C8  EF3D  F006         	goto	i2l2948
  2503  0007CC                     i2u192_40:
  2504  0007CC  FFFF               	dw	65535	; assembler added errata NOP
  2505  0007CE                     
  2506                           ;MW.c: 73:     {;MW.c: 74:         if(SW_GetState(DOOR_SW) == SW_PRESSED)
  2507  0007CE  0E00               	movlw	0
  2508  0007D0  EC19  F011         	call	_SW_GetState
  2509  0007D4  0A02               	xorlw	2
  2510  0007D6  A4D8               	btfss	status,2,c
  2511  0007D8  EFF0  F003         	goto	i2u193_41
  2512  0007DC  EFF3  F003         	goto	i2u193_40
  2513  0007E0                     i2u193_41:
  2514  0007E0  FFFF               	dw	65535	; assembler added errata NOP
  2515  0007E2  EF3D  F006         	goto	i2l2948
  2516  0007E6                     i2u193_40:
  2517  0007E6  FFFF               	dw	65535	; assembler added errata NOP
  2518  0007E8                     
  2519                           ;MW.c: 75:         {;MW.c: 76:             Door_State = Pressed;
  2520  0007E8  0E01               	movlw	1
  2521  0007EA  6E29               	movwf	_Door_State^0,c
  2522  0007EC  EF3D  F006         	goto	i2l2948
  2523  0007F0                     i2l2754:
  2524  0007F0  FFFF               	dw	65535	; assembler added errata NOP
  2525                           
  2526                           ;MW.c: 85:             Set_Disp_State(WELCOME);
  2527  0007F2  0E00               	movlw	0
  2528  0007F4  EC75  F011         	call	_Set_Disp_State
  2529  0007F8                     
  2530                           ;MW.c: 88:             if(Pressed_Key != Key_INIT)
  2531  0007F8  0E0C               	movlw	12
  2532  0007FA  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2533  0007FC  B4D8               	btfsc	status,2,c
  2534  0007FE  EF03  F004         	goto	i2u194_41
  2535  000802  EF06  F004         	goto	i2u194_40
  2536  000806                     i2u194_41:
  2537  000806  FFFF               	dw	65535	; assembler added errata NOP
  2538  000808  EF6C  F006         	goto	i2l48
  2539  00080C                     i2u194_40:
  2540  00080C  FFFF               	dw	65535	; assembler added errata NOP
  2541  00080E                     
  2542                           ;MW.c: 89:             {;MW.c: 90:                 Current_MW_State = SCAN_MIN_TENS;
  2543  00080E  0E01               	movlw	1
  2544  000810  6E28               	movwf	_Current_MW_State^0,c
  2545                           
  2546                           ;MW.c: 91:                 Pressed_Key = Key_INIT;
  2547  000812  0E0C               	movlw	12
  2548  000814  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2549  000816                     
  2550                           ;MW.c: 92:                 LCD_Clear();
  2551  000816  EC57  F011         	call	_LCD_Clear	;wreg free
  2552  00081A  EF6C  F006         	goto	i2l48
  2553  00081E                     i2l2762:
  2554  00081E  FFFF               	dw	65535	; assembler added errata NOP
  2555                           
  2556                           ;MW.c: 98:             Set_Disp_State(SCAN_MIN_TENS);
  2557  000820  0E01               	movlw	1
  2558  000822  EC75  F011         	call	_Set_Disp_State
  2559  000826                     
  2560                           ;MW.c: 100:             if((Pressed_Key == KEY_START)&&(Time_Val != 0))
  2561  000826  0E0B               	movlw	11
  2562  000828  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2563  00082A  A4D8               	btfss	status,2,c
  2564  00082C  EF1A  F004         	goto	i2u195_41
  2565  000830  EF1D  F004         	goto	i2u195_40
  2566  000834                     i2u195_41:
  2567  000834  FFFF               	dw	65535	; assembler added errata NOP
  2568  000836  EF30  F004         	goto	i2l2774
  2569  00083A                     i2u195_40:
  2570  00083A  FFFF               	dw	65535	; assembler added errata NOP
  2571  00083C  5059               	movf	MW_Update@Time_Val^0,w,c
  2572  00083E  105A               	iorwf	(MW_Update@Time_Val+1)^0,w,c
  2573  000840  B4D8               	btfsc	status,2,c
  2574  000842  EF25  F004         	goto	i2u196_41
  2575  000846  EF28  F004         	goto	i2u196_40
  2576  00084A                     i2u196_41:
  2577  00084A  FFFF               	dw	65535	; assembler added errata NOP
  2578  00084C  EF30  F004         	goto	i2l2774
  2579  000850                     i2u196_40:
  2580  000850  FFFF               	dw	65535	; assembler added errata NOP
  2581  000852                     i2l2768:
  2582  000852  FFFF               	dw	65535	; assembler added errata NOP
  2583                           
  2584                           ;MW.c: 101:             {;MW.c: 102:                 Current_MW_State = START_COUNT;
  2585  000854  0E05               	movlw	5
  2586  000856  6E28               	movwf	_Current_MW_State^0,c
  2587                           
  2588                           ;MW.c: 103:                 Pressed_Key = Key_INIT;
  2589  000858  0E0C               	movlw	12
  2590  00085A  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2591  00085C  EF6C  F006         	goto	i2l48
  2592  000860                     i2l2774:
  2593  000860  FFFF               	dw	65535	; assembler added errata NOP
  2594  000862  0E0A               	movlw	10
  2595  000864  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2596  000866  A4D8               	btfss	status,2,c
  2597  000868  EF38  F004         	goto	i2u197_41
  2598  00086C  EF3B  F004         	goto	i2u197_40
  2599  000870                     i2u197_41:
  2600  000870  FFFF               	dw	65535	; assembler added errata NOP
  2601  000872  EF43  F004         	goto	i2l2782
  2602  000876                     i2u197_40:
  2603  000876  FFFF               	dw	65535	; assembler added errata NOP
  2604  000878                     i2l2776:
  2605  000878  FFFF               	dw	65535	; assembler added errata NOP
  2606                           
  2607                           ;MW.c: 107:             {;MW.c: 108:                 Current_MW_State = CANCEL;
  2608  00087A  0E06               	movlw	6
  2609  00087C  6E28               	movwf	_Current_MW_State^0,c
  2610                           
  2611                           ;MW.c: 109:                 Pressed_Key = Key_INIT;
  2612  00087E  0E0C               	movlw	12
  2613  000880  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2614  000882  EF6C  F006         	goto	i2l48
  2615  000886                     i2l2782:
  2616  000886  FFFF               	dw	65535	; assembler added errata NOP
  2617  000888  0E0C               	movlw	12
  2618  00088A  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2619  00088C  B4D8               	btfsc	status,2,c
  2620  00088E  EF4B  F004         	goto	i2u198_41
  2621  000892  EF4E  F004         	goto	i2u198_40
  2622  000896                     i2u198_41:
  2623  000896  FFFF               	dw	65535	; assembler added errata NOP
  2624  000898  EF6C  F006         	goto	i2l48
  2625  00089C                     i2u198_40:
  2626  00089C  FFFF               	dw	65535	; assembler added errata NOP
  2627  00089E  0E0B               	movlw	11
  2628  0008A0  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2629  0008A2  B4D8               	btfsc	status,2,c
  2630  0008A4  EF56  F004         	goto	i2u199_41
  2631  0008A8  EF59  F004         	goto	i2u199_40
  2632  0008AC                     i2u199_41:
  2633  0008AC  FFFF               	dw	65535	; assembler added errata NOP
  2634  0008AE  EF6C  F006         	goto	i2l48
  2635  0008B2                     i2u199_40:
  2636  0008B2  FFFF               	dw	65535	; assembler added errata NOP
  2637  0008B4                     
  2638                           ;MW.c: 113:             {;MW.c: 114:                 if(Pressed_Key >= key_6)
  2639  0008B4  0E05               	movlw	5
  2640  0008B6  6477               	cpfsgt	MW_Update@Pressed_Key^0,c
  2641  0008B8  EF60  F004         	goto	i2u200_41
  2642  0008BC  EF63  F004         	goto	i2u200_40
  2643  0008C0                     i2u200_41:
  2644  0008C0  FFFF               	dw	65535	; assembler added errata NOP
  2645  0008C2  EF68  F004         	goto	i2l66
  2646  0008C6                     i2u200_40:
  2647  0008C6  FFFF               	dw	65535	; assembler added errata NOP
  2648  0008C8                     
  2649                           ;MW.c: 115:                 {;MW.c: 116:                     Min_Ten_val = key_5;
  2650  0008C8  0E05               	movlw	5
  2651  0008CA  6E26               	movwf	MW_Update@Min_Ten_val^0,c
  2652                           
  2653                           ;MW.c: 117:                 }
  2654  0008CC  EF6B  F004         	goto	i2l2790
  2655  0008D0                     i2l66:
  2656  0008D0  FFFF               	dw	65535	; assembler added errata NOP
  2657                           
  2658                           ;MW.c: 119:                 {;MW.c: 120:                     Min_Ten_val = Pressed_Key;
  2659  0008D2  C077  F026         	movff	MW_Update@Pressed_Key,MW_Update@Min_Ten_val
  2660  0008D6                     i2l2790:
  2661  0008D6  FFFF               	dw	65535	; assembler added errata NOP
  2662                           
  2663                           ;MW.c: 122:                 Current_MW_State = SCAN_MIN_UNITS;
  2664  0008D8  0E02               	movlw	2
  2665  0008DA  6E28               	movwf	_Current_MW_State^0,c
  2666                           
  2667                           ;MW.c: 123:                 Pressed_Key = Key_INIT;
  2668  0008DC  0E0C               	movlw	12
  2669  0008DE  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2670  0008E0                     
  2671                           ;MW.c: 124:                 Set_Time( Min_Ten_val , Min_Unit_val , Sec_Ten_val , Sec_Uni
      +                          t_val );
  2672  0008E0  C027  F04B         	movff	MW_Update@Min_Unit_val,Set_Time@minutes_units
  2673  0008E4  C024  F04C         	movff	MW_Update@Sec_Ten_val,Set_Time@seconds_tens
  2674  0008E8  C025  F04D         	movff	MW_Update@Sec_Unit_val,Set_Time@seconds_units
  2675  0008EC  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  2676  0008EE  ECF6  F010         	call	_Set_Time
  2677  0008F2  EF6C  F006         	goto	i2l48
  2678  0008F6                     i2l2794:
  2679  0008F6  FFFF               	dw	65535	; assembler added errata NOP
  2680                           
  2681                           ;MW.c: 130:             Set_Disp_State(SCAN_MIN_UNITS);
  2682  0008F8  0E02               	movlw	2
  2683  0008FA  EC75  F011         	call	_Set_Disp_State
  2684  0008FE                     
  2685                           ;MW.c: 131:             if((Pressed_Key == KEY_START)&&(Time_Val != 0))
  2686  0008FE  0E0B               	movlw	11
  2687  000900  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2688  000902  A4D8               	btfss	status,2,c
  2689  000904  EF86  F004         	goto	i2u201_41
  2690  000908  EF89  F004         	goto	i2u201_40
  2691  00090C                     i2u201_41:
  2692  00090C  FFFF               	dw	65535	; assembler added errata NOP
  2693  00090E  EF97  F004         	goto	i2l2806
  2694  000912                     i2u201_40:
  2695  000912  FFFF               	dw	65535	; assembler added errata NOP
  2696  000914  5059               	movf	MW_Update@Time_Val^0,w,c
  2697  000916  105A               	iorwf	(MW_Update@Time_Val+1)^0,w,c
  2698  000918  B4D8               	btfsc	status,2,c
  2699  00091A  EF91  F004         	goto	i2u202_41
  2700  00091E  EF94  F004         	goto	i2u202_40
  2701  000922                     i2u202_41:
  2702  000922  FFFF               	dw	65535	; assembler added errata NOP
  2703  000924  EF97  F004         	goto	i2l2806
  2704  000928                     i2u202_40:
  2705  000928  FFFF               	dw	65535	; assembler added errata NOP
  2706  00092A  EF29  F004         	goto	i2l2768
  2707  00092E                     i2l2806:
  2708  00092E  FFFF               	dw	65535	; assembler added errata NOP
  2709  000930  0E0A               	movlw	10
  2710  000932  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2711  000934  A4D8               	btfss	status,2,c
  2712  000936  EF9F  F004         	goto	i2u203_41
  2713  00093A  EFA2  F004         	goto	i2u203_40
  2714  00093E                     i2u203_41:
  2715  00093E  FFFF               	dw	65535	; assembler added errata NOP
  2716  000940  EFA5  F004         	goto	i2l2814
  2717  000944                     i2u203_40:
  2718  000944  FFFF               	dw	65535	; assembler added errata NOP
  2719  000946  EF3C  F004         	goto	i2l2776
  2720  00094A                     i2l2814:
  2721  00094A  FFFF               	dw	65535	; assembler added errata NOP
  2722  00094C  0E0C               	movlw	12
  2723  00094E  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2724  000950  B4D8               	btfsc	status,2,c
  2725  000952  EFAD  F004         	goto	i2u204_41
  2726  000956  EFB0  F004         	goto	i2u204_40
  2727  00095A                     i2u204_41:
  2728  00095A  FFFF               	dw	65535	; assembler added errata NOP
  2729  00095C  EF6C  F006         	goto	i2l48
  2730  000960                     i2u204_40:
  2731  000960  FFFF               	dw	65535	; assembler added errata NOP
  2732  000962  0E0B               	movlw	11
  2733  000964  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2734  000966  B4D8               	btfsc	status,2,c
  2735  000968  EFB8  F004         	goto	i2u205_41
  2736  00096C  EFBB  F004         	goto	i2u205_40
  2737  000970                     i2u205_41:
  2738  000970  FFFF               	dw	65535	; assembler added errata NOP
  2739  000972  EF6C  F006         	goto	i2l48
  2740  000976                     i2u205_40:
  2741  000976  FFFF               	dw	65535	; assembler added errata NOP
  2742  000978                     
  2743                           ;MW.c: 144:             {;MW.c: 145:                 Min_Unit_val = Pressed_Key;
  2744  000978  C077  F027         	movff	MW_Update@Pressed_Key,MW_Update@Min_Unit_val
  2745  00097C                     
  2746                           ;MW.c: 146:                 Current_MW_State = SCAN_SEC_TENS;
  2747  00097C  0E03               	movlw	3
  2748  00097E  6E28               	movwf	_Current_MW_State^0,c
  2749                           
  2750                           ;MW.c: 147:                 Pressed_Key = Key_INIT;
  2751  000980  0E0C               	movlw	12
  2752  000982  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2753  000984                     
  2754                           ;MW.c: 148:                 Set_Time( Min_Ten_val , Min_Unit_val , Sec_Ten_val , Sec_Uni
      +                          t_val );
  2755  000984  C027  F04B         	movff	MW_Update@Min_Unit_val,Set_Time@minutes_units
  2756  000988  C024  F04C         	movff	MW_Update@Sec_Ten_val,Set_Time@seconds_tens
  2757  00098C  C025  F04D         	movff	MW_Update@Sec_Unit_val,Set_Time@seconds_units
  2758  000990  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  2759  000992  ECF6  F010         	call	_Set_Time
  2760  000996  EF6C  F006         	goto	i2l48
  2761  00099A                     i2l2824:
  2762  00099A  FFFF               	dw	65535	; assembler added errata NOP
  2763                           
  2764                           ;MW.c: 153:             Set_Disp_State(SCAN_SEC_TENS);
  2765  00099C  0E03               	movlw	3
  2766  00099E  EC75  F011         	call	_Set_Disp_State
  2767  0009A2                     
  2768                           ;MW.c: 154:             if((Pressed_Key== KEY_START)&&(Time_Val != 0))
  2769  0009A2  0E0B               	movlw	11
  2770  0009A4  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2771  0009A6  A4D8               	btfss	status,2,c
  2772  0009A8  EFD8  F004         	goto	i2u206_41
  2773  0009AC  EFDB  F004         	goto	i2u206_40
  2774  0009B0                     i2u206_41:
  2775  0009B0  FFFF               	dw	65535	; assembler added errata NOP
  2776  0009B2  EFE9  F004         	goto	i2l2836
  2777  0009B6                     i2u206_40:
  2778  0009B6  FFFF               	dw	65535	; assembler added errata NOP
  2779  0009B8  5059               	movf	MW_Update@Time_Val^0,w,c
  2780  0009BA  105A               	iorwf	(MW_Update@Time_Val+1)^0,w,c
  2781  0009BC  B4D8               	btfsc	status,2,c
  2782  0009BE  EFE3  F004         	goto	i2u207_41
  2783  0009C2  EFE6  F004         	goto	i2u207_40
  2784  0009C6                     i2u207_41:
  2785  0009C6  FFFF               	dw	65535	; assembler added errata NOP
  2786  0009C8  EFE9  F004         	goto	i2l2836
  2787  0009CC                     i2u207_40:
  2788  0009CC  FFFF               	dw	65535	; assembler added errata NOP
  2789  0009CE  EF29  F004         	goto	i2l2768
  2790  0009D2                     i2l2836:
  2791  0009D2  FFFF               	dw	65535	; assembler added errata NOP
  2792  0009D4  0E0A               	movlw	10
  2793  0009D6  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2794  0009D8  A4D8               	btfss	status,2,c
  2795  0009DA  EFF1  F004         	goto	i2u208_41
  2796  0009DE  EFF4  F004         	goto	i2u208_40
  2797  0009E2                     i2u208_41:
  2798  0009E2  FFFF               	dw	65535	; assembler added errata NOP
  2799  0009E4  EFF7  F004         	goto	i2l2844
  2800  0009E8                     i2u208_40:
  2801  0009E8  FFFF               	dw	65535	; assembler added errata NOP
  2802  0009EA  EF3C  F004         	goto	i2l2776
  2803  0009EE                     i2l2844:
  2804  0009EE  FFFF               	dw	65535	; assembler added errata NOP
  2805  0009F0  0E0C               	movlw	12
  2806  0009F2  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2807  0009F4  B4D8               	btfsc	status,2,c
  2808  0009F6  EFFF  F004         	goto	i2u209_41
  2809  0009FA  EF02  F005         	goto	i2u209_40
  2810  0009FE                     i2u209_41:
  2811  0009FE  FFFF               	dw	65535	; assembler added errata NOP
  2812  000A00  EF6C  F006         	goto	i2l48
  2813  000A04                     i2u209_40:
  2814  000A04  FFFF               	dw	65535	; assembler added errata NOP
  2815  000A06  0E0B               	movlw	11
  2816  000A08  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2817  000A0A  B4D8               	btfsc	status,2,c
  2818  000A0C  EF0A  F005         	goto	i2u210_41
  2819  000A10  EF0D  F005         	goto	i2u210_40
  2820  000A14                     i2u210_41:
  2821  000A14  FFFF               	dw	65535	; assembler added errata NOP
  2822  000A16  EF6C  F006         	goto	i2l48
  2823  000A1A                     i2u210_40:
  2824  000A1A  FFFF               	dw	65535	; assembler added errata NOP
  2825  000A1C                     
  2826                           ;MW.c: 167:             {;MW.c: 168:                 if(Pressed_Key >= key_6)
  2827  000A1C  0E05               	movlw	5
  2828  000A1E  6477               	cpfsgt	MW_Update@Pressed_Key^0,c
  2829  000A20  EF14  F005         	goto	i2u211_41
  2830  000A24  EF17  F005         	goto	i2u211_40
  2831  000A28                     i2u211_41:
  2832  000A28  FFFF               	dw	65535	; assembler added errata NOP
  2833  000A2A  EF1C  F005         	goto	i2l80
  2834  000A2E                     i2u211_40:
  2835  000A2E  FFFF               	dw	65535	; assembler added errata NOP
  2836  000A30                     
  2837                           ;MW.c: 169:                 {;MW.c: 170:                     Sec_Ten_val = key_5;
  2838  000A30  0E05               	movlw	5
  2839  000A32  6E24               	movwf	MW_Update@Sec_Ten_val^0,c
  2840                           
  2841                           ;MW.c: 171:                 }
  2842  000A34  EF1F  F005         	goto	i2l2852
  2843  000A38                     i2l80:
  2844  000A38  FFFF               	dw	65535	; assembler added errata NOP
  2845                           
  2846                           ;MW.c: 173:                 {;MW.c: 174:                     Sec_Ten_val = Pressed_Key;
  2847  000A3A  C077  F024         	movff	MW_Update@Pressed_Key,MW_Update@Sec_Ten_val
  2848  000A3E                     i2l2852:
  2849  000A3E  FFFF               	dw	65535	; assembler added errata NOP
  2850                           
  2851                           ;MW.c: 176:                 Current_MW_State = SCAN_SEC_UNITS;
  2852  000A40  0E04               	movlw	4
  2853  000A42  6E28               	movwf	_Current_MW_State^0,c
  2854                           
  2855                           ;MW.c: 177:                 Pressed_Key = Key_INIT;
  2856  000A44  0E0C               	movlw	12
  2857  000A46  6E77               	movwf	MW_Update@Pressed_Key^0,c
  2858  000A48                     
  2859                           ;MW.c: 178:                 Set_Time( Min_Ten_val , Min_Unit_val , Sec_Ten_val , Sec_Uni
      +                          t_val );
  2860  000A48  C027  F04B         	movff	MW_Update@Min_Unit_val,Set_Time@minutes_units
  2861  000A4C  C024  F04C         	movff	MW_Update@Sec_Ten_val,Set_Time@seconds_tens
  2862  000A50  C025  F04D         	movff	MW_Update@Sec_Unit_val,Set_Time@seconds_units
  2863  000A54  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  2864  000A56  ECF6  F010         	call	_Set_Time
  2865  000A5A  EF6C  F006         	goto	i2l48
  2866  000A5E                     i2l2856:
  2867  000A5E  FFFF               	dw	65535	; assembler added errata NOP
  2868                           
  2869                           ;MW.c: 183:             Set_Disp_State(SCAN_SEC_UNITS);
  2870  000A60  0E04               	movlw	4
  2871  000A62  EC75  F011         	call	_Set_Disp_State
  2872  000A66                     
  2873                           ;MW.c: 184:             if((Pressed_Key == KEY_START)&&(Time_Val != 0))
  2874  000A66  0E0B               	movlw	11
  2875  000A68  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2876  000A6A  A4D8               	btfss	status,2,c
  2877  000A6C  EF3A  F005         	goto	i2u212_41
  2878  000A70  EF3D  F005         	goto	i2u212_40
  2879  000A74                     i2u212_41:
  2880  000A74  FFFF               	dw	65535	; assembler added errata NOP
  2881  000A76  EF4B  F005         	goto	i2l2868
  2882  000A7A                     i2u212_40:
  2883  000A7A  FFFF               	dw	65535	; assembler added errata NOP
  2884  000A7C  5059               	movf	MW_Update@Time_Val^0,w,c
  2885  000A7E  105A               	iorwf	(MW_Update@Time_Val+1)^0,w,c
  2886  000A80  B4D8               	btfsc	status,2,c
  2887  000A82  EF45  F005         	goto	i2u213_41
  2888  000A86  EF48  F005         	goto	i2u213_40
  2889  000A8A                     i2u213_41:
  2890  000A8A  FFFF               	dw	65535	; assembler added errata NOP
  2891  000A8C  EF4B  F005         	goto	i2l2868
  2892  000A90                     i2u213_40:
  2893  000A90  FFFF               	dw	65535	; assembler added errata NOP
  2894  000A92  EF29  F004         	goto	i2l2768
  2895  000A96                     i2l2868:
  2896  000A96  FFFF               	dw	65535	; assembler added errata NOP
  2897  000A98  0E0A               	movlw	10
  2898  000A9A  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2899  000A9C  A4D8               	btfss	status,2,c
  2900  000A9E  EF53  F005         	goto	i2u214_41
  2901  000AA2  EF56  F005         	goto	i2u214_40
  2902  000AA6                     i2u214_41:
  2903  000AA6  FFFF               	dw	65535	; assembler added errata NOP
  2904  000AA8  EF59  F005         	goto	i2l2876
  2905  000AAC                     i2u214_40:
  2906  000AAC  FFFF               	dw	65535	; assembler added errata NOP
  2907  000AAE  EF3C  F004         	goto	i2l2776
  2908  000AB2                     i2l2876:
  2909  000AB2  FFFF               	dw	65535	; assembler added errata NOP
  2910  000AB4  0E0C               	movlw	12
  2911  000AB6  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2912  000AB8  B4D8               	btfsc	status,2,c
  2913  000ABA  EF61  F005         	goto	i2u215_41
  2914  000ABE  EF64  F005         	goto	i2u215_40
  2915  000AC2                     i2u215_41:
  2916  000AC2  FFFF               	dw	65535	; assembler added errata NOP
  2917  000AC4  EF6C  F006         	goto	i2l48
  2918  000AC8                     i2u215_40:
  2919  000AC8  FFFF               	dw	65535	; assembler added errata NOP
  2920  000ACA  0E0B               	movlw	11
  2921  000ACC  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2922  000ACE  B4D8               	btfsc	status,2,c
  2923  000AD0  EF6C  F005         	goto	i2u216_41
  2924  000AD4  EF6F  F005         	goto	i2u216_40
  2925  000AD8                     i2u216_41:
  2926  000AD8  FFFF               	dw	65535	; assembler added errata NOP
  2927  000ADA  EF6C  F006         	goto	i2l48
  2928  000ADE                     i2u216_40:
  2929  000ADE  FFFF               	dw	65535	; assembler added errata NOP
  2930  000AE0                     
  2931                           ;MW.c: 197:             {;MW.c: 198:                 Sec_Unit_val = Pressed_Key;
  2932  000AE0  C077  F025         	movff	MW_Update@Pressed_Key,MW_Update@Sec_Unit_val
  2933  000AE4                     
  2934                           ;MW.c: 199:                 Set_Time( Min_Ten_val , Min_Unit_val , Sec_Ten_val , Sec_Uni
      +                          t_val );
  2935  000AE4  C027  F04B         	movff	MW_Update@Min_Unit_val,Set_Time@minutes_units
  2936  000AE8  C024  F04C         	movff	MW_Update@Sec_Ten_val,Set_Time@seconds_tens
  2937  000AEC  C025  F04D         	movff	MW_Update@Sec_Unit_val,Set_Time@seconds_units
  2938  000AF0  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  2939  000AF2  ECF6  F010         	call	_Set_Time
  2940  000AF6  EF6C  F006         	goto	i2l48
  2941  000AFA                     i2l2884:
  2942  000AFA  FFFF               	dw	65535	; assembler added errata NOP
  2943                           
  2944                           ;MW.c: 206:             if (Pressed_Key == KEY_CANCEL)
  2945  000AFC  0E0A               	movlw	10
  2946  000AFE  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  2947  000B00  A4D8               	btfss	status,2,c
  2948  000B02  EF85  F005         	goto	i2u217_41
  2949  000B06  EF88  F005         	goto	i2u217_40
  2950  000B0A                     i2u217_41:
  2951  000B0A  FFFF               	dw	65535	; assembler added errata NOP
  2952  000B0C  EF9D  F005         	goto	i2l2894
  2953  000B10                     i2u217_40:
  2954  000B10  FFFF               	dw	65535	; assembler added errata NOP
  2955  000B12                     
  2956                           ;MW.c: 207:             {;MW.c: 208:                 if(Current_Count_State == Count_Tim
      +                          e)
  2957  000B12  0E02               	movlw	2
  2958  000B14  1876               	xorwf	_Current_Count_State^0,w,c
  2959  000B16  A4D8               	btfss	status,2,c
  2960  000B18  EF90  F005         	goto	i2u218_41
  2961  000B1C  EF93  F005         	goto	i2u218_40
  2962  000B20                     i2u218_41:
  2963  000B20  FFFF               	dw	65535	; assembler added errata NOP
  2964  000B22  EF98  F005         	goto	i2l2890
  2965  000B26                     i2u218_40:
  2966  000B26  FFFF               	dw	65535	; assembler added errata NOP
  2967  000B28                     
  2968                           ;MW.c: 209:                 {;MW.c: 210:                     Current_Count_State = Pause
      +                          _Time;
  2969  000B28  0E03               	movlw	3
  2970  000B2A  6E76               	movwf	_Current_Count_State^0,c
  2971                           
  2972                           ;MW.c: 211:                 }
  2973  000B2C  EF3C  F004         	goto	i2l2776
  2974  000B30                     i2l2890:
  2975  000B30  FFFF               	dw	65535	; assembler added errata NOP
  2976                           
  2977                           ;MW.c: 213:                 {;MW.c: 214:                     Current_Count_State = Reset
      +                          _Time;
  2978  000B32  0E04               	movlw	4
  2979  000B34  6E76               	movwf	_Current_Count_State^0,c
  2980  000B36  EF3C  F004         	goto	i2l2776
  2981  000B3A                     i2l2894:
  2982  000B3A  FFFF               	dw	65535	; assembler added errata NOP
  2983                           
  2984                           ;MW.c: 221:             Set_Disp_State(START_COUNT);
  2985  000B3C  0E05               	movlw	5
  2986  000B3E  EC75  F011         	call	_Set_Disp_State
  2987  000B42                     
  2988                           ;MW.c: 222:             if(Weight_State != Pressed)
  2989  000B42  042A               	decf	_Weight_State^0,w,c
  2990  000B44  B4D8               	btfsc	status,2,c
  2991  000B46  EFA7  F005         	goto	i2u219_41
  2992  000B4A  EFAA  F005         	goto	i2u219_40
  2993  000B4E                     i2u219_41:
  2994  000B4E  FFFF               	dw	65535	; assembler added errata NOP
  2995  000B50  EFAF  F005         	goto	i2l2902
  2996  000B54                     i2u219_40:
  2997  000B54  FFFF               	dw	65535	; assembler added errata NOP
  2998  000B56                     
  2999                           ;MW.c: 223:             {;MW.c: 224:                 Current_Count_State = Wait_Food;
  3000  000B56  0E00               	movlw	0
  3001  000B58  6E76               	movwf	_Current_Count_State^0,c
  3002  000B5A  EF6C  F006         	goto	i2l48
  3003  000B5E                     i2l2902:
  3004  000B5E  FFFF               	dw	65535	; assembler added errata NOP
  3005                           
  3006                           ;MW.c: 227:             if (Door_State != Pressed)
  3007  000B60  0429               	decf	_Door_State^0,w,c
  3008  000B62  B4D8               	btfsc	status,2,c
  3009  000B64  EFB6  F005         	goto	i2u220_41
  3010  000B68  EFB9  F005         	goto	i2u220_40
  3011  000B6C                     i2u220_41:
  3012  000B6C  FFFF               	dw	65535	; assembler added errata NOP
  3013  000B6E  EFBE  F005         	goto	i2l2908
  3014  000B72                     i2u220_40:
  3015  000B72  FFFF               	dw	65535	; assembler added errata NOP
  3016  000B74                     
  3017                           ;MW.c: 228:             {;MW.c: 229:                 Current_Count_State = Wait_Door;
  3018  000B74  0E01               	movlw	1
  3019  000B76  6E76               	movwf	_Current_Count_State^0,c
  3020  000B78  EF6C  F006         	goto	i2l48
  3021  000B7C                     i2l2908:
  3022  000B7C  FFFF               	dw	65535	; assembler added errata NOP
  3023                           
  3024                           ;MW.c: 233:             Current_Count_State = Count_Time;
  3025  000B7E  0E02               	movlw	2
  3026  000B80  6E76               	movwf	_Current_Count_State^0,c
  3027  000B82                     
  3028                           ;MW.c: 234:             if(Is_Finished () == 1)
  3029  000B82  EC7A  F010         	call	_Is_Finished	;wreg free
  3030  000B86  06E8               	decf	wreg,f,c
  3031  000B88  A4D8               	btfss	status,2,c
  3032  000B8A  EFC9  F005         	goto	i2u221_41
  3033  000B8E  EFCC  F005         	goto	i2u221_40
  3034  000B92                     i2u221_41:
  3035  000B92  FFFF               	dw	65535	; assembler added errata NOP
  3036  000B94  EF6C  F006         	goto	i2l48
  3037  000B98                     i2u221_40:
  3038  000B98  FFFF               	dw	65535	; assembler added errata NOP
  3039  000B9A                     
  3040                           ;MW.c: 235:             {;MW.c: 236:                 Current_Count_State = Finish_Time;
  3041  000B9A  0E05               	movlw	5
  3042  000B9C  6E76               	movwf	_Current_Count_State^0,c
  3043                           
  3044                           ;MW.c: 237:                 Current_MW_State = FINISHED;
  3045  000B9E  0E07               	movlw	7
  3046  000BA0  6E28               	movwf	_Current_MW_State^0,c
  3047  000BA2  EF6C  F006         	goto	i2l48
  3048  000BA6                     i2l2914:
  3049  000BA6  FFFF               	dw	65535	; assembler added errata NOP
  3050                           
  3051                           ;MW.c: 243:             Set_Disp_State(CANCEL);
  3052  000BA8  0E06               	movlw	6
  3053  000BAA  EC75  F011         	call	_Set_Disp_State
  3054  000BAE                     
  3055                           ;MW.c: 245:              if(Current_Count_State == Reset_Time)
  3056  000BAE  0E04               	movlw	4
  3057  000BB0  1876               	xorwf	_Current_Count_State^0,w,c
  3058  000BB2  A4D8               	btfss	status,2,c
  3059  000BB4  EFDE  F005         	goto	i2u222_41
  3060  000BB8  EFE1  F005         	goto	i2u222_40
  3061  000BBC                     i2u222_41:
  3062  000BBC  FFFF               	dw	65535	; assembler added errata NOP
  3063  000BBE  EFFD  F005         	goto	i2l2930
  3064  000BC2                     i2u222_40:
  3065  000BC2  FFFF               	dw	65535	; assembler added errata NOP
  3066  000BC4                     
  3067                           ;MW.c: 246:             {;MW.c: 247:                 Min_Unit_val = 0;
  3068  000BC4  0E00               	movlw	0
  3069  000BC6  6E27               	movwf	MW_Update@Min_Unit_val^0,c
  3070                           
  3071                           ;MW.c: 248:                 Min_Ten_val = 0;
  3072  000BC8  0E00               	movlw	0
  3073  000BCA  6E26               	movwf	MW_Update@Min_Ten_val^0,c
  3074                           
  3075                           ;MW.c: 249:                 Sec_Unit_val = 0;
  3076  000BCC  0E00               	movlw	0
  3077  000BCE  6E25               	movwf	MW_Update@Sec_Unit_val^0,c
  3078                           
  3079                           ;MW.c: 250:                 Sec_Ten_val = 0;
  3080  000BD0  0E00               	movlw	0
  3081  000BD2  6E24               	movwf	MW_Update@Sec_Ten_val^0,c
  3082  000BD4                     
  3083                           ;MW.c: 251:                 Set_Time( Min_Ten_val , Min_Unit_val , Sec_Ten_val , Sec_Uni
      +                          t_val );
  3084  000BD4  C027  F04B         	movff	MW_Update@Min_Unit_val,Set_Time@minutes_units
  3085  000BD8  C024  F04C         	movff	MW_Update@Sec_Ten_val,Set_Time@seconds_tens
  3086  000BDC  C025  F04D         	movff	MW_Update@Sec_Unit_val,Set_Time@seconds_units
  3087  000BE0  5026               	movf	MW_Update@Min_Ten_val^0,w,c
  3088  000BE2  ECF6  F010         	call	_Set_Time
  3089  000BE6                     
  3090                           ;MW.c: 252:                 Current_MW_State = WELCOME;
  3091  000BE6  0E00               	movlw	0
  3092  000BE8  6E28               	movwf	_Current_MW_State^0,c
  3093  000BEA                     
  3094                           ;MW.c: 254:                 Weight_State = Released;
  3095  000BEA  0E00               	movlw	0
  3096  000BEC  6E2A               	movwf	_Weight_State^0,c
  3097  000BEE                     
  3098                           ;MW.c: 255:                 Door_State = Released;
  3099  000BEE  0E00               	movlw	0
  3100  000BF0  6E29               	movwf	_Door_State^0,c
  3101  000BF2                     
  3102                           ;MW.c: 256:                 Pressed_Key = Key_INIT;
  3103  000BF2  0E0C               	movlw	12
  3104  000BF4  6E77               	movwf	MW_Update@Pressed_Key^0,c
  3105                           
  3106                           ;MW.c: 257:             }
  3107  000BF6  EF6C  F006         	goto	i2l48
  3108  000BFA                     i2l2930:
  3109  000BFA  FFFF               	dw	65535	; assembler added errata NOP
  3110  000BFC  0E03               	movlw	3
  3111  000BFE  1876               	xorwf	_Current_Count_State^0,w,c
  3112  000C00  A4D8               	btfss	status,2,c
  3113  000C02  EF05  F006         	goto	i2u223_41
  3114  000C06  EF08  F006         	goto	i2u223_40
  3115  000C0A                     i2u223_41:
  3116  000C0A  FFFF               	dw	65535	; assembler added errata NOP
  3117  000C0C  EF6C  F006         	goto	i2l48
  3118  000C10                     i2u223_40:
  3119  000C10  FFFF               	dw	65535	; assembler added errata NOP
  3120  000C12                     
  3121                           ;MW.c: 259:             {;MW.c: 260:                 if (Pressed_Key == KEY_START)
  3122  000C12  0E0B               	movlw	11
  3123  000C14  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  3124  000C16  A4D8               	btfss	status,2,c
  3125  000C18  EF10  F006         	goto	i2u224_41
  3126  000C1C  EF13  F006         	goto	i2u224_40
  3127  000C20                     i2u224_41:
  3128  000C20  FFFF               	dw	65535	; assembler added errata NOP
  3129  000C22  EF18  F006         	goto	i2l2936
  3130  000C26                     i2u224_40:
  3131  000C26  FFFF               	dw	65535	; assembler added errata NOP
  3132  000C28                     
  3133                           ;MW.c: 261:                 {;MW.c: 262:                    Current_MW_State = START_COU
      +                          NT;
  3134  000C28  0E05               	movlw	5
  3135  000C2A  6E28               	movwf	_Current_MW_State^0,c
  3136                           
  3137                           ;MW.c: 263:                     Pressed_Key = Key_INIT;
  3138  000C2C  0E0C               	movlw	12
  3139  000C2E  6E77               	movwf	MW_Update@Pressed_Key^0,c
  3140  000C30                     i2l2936:
  3141  000C30  FFFF               	dw	65535	; assembler added errata NOP
  3142                           
  3143                           ;MW.c: 265:                 if (Pressed_Key == KEY_CANCEL)
  3144  000C32  0E0A               	movlw	10
  3145  000C34  1877               	xorwf	MW_Update@Pressed_Key^0,w,c
  3146  000C36  A4D8               	btfss	status,2,c
  3147  000C38  EF20  F006         	goto	i2u225_41
  3148  000C3C  EF23  F006         	goto	i2u225_40
  3149  000C40                     i2u225_41:
  3150  000C40  FFFF               	dw	65535	; assembler added errata NOP
  3151  000C42  EF6C  F006         	goto	i2l48
  3152  000C46                     i2u225_40:
  3153  000C46  FFFF               	dw	65535	; assembler added errata NOP
  3154  000C48                     
  3155                           ;MW.c: 266:                 {;MW.c: 267:                     Current_Count_State = Reset
      +                          _Time;
  3156  000C48  0E04               	movlw	4
  3157  000C4A  6E76               	movwf	_Current_Count_State^0,c
  3158                           
  3159                           ;MW.c: 268:                     Pressed_Key = Key_INIT;
  3160  000C4C  0E0C               	movlw	12
  3161  000C4E  6E77               	movwf	MW_Update@Pressed_Key^0,c
  3162  000C50  EF6C  F006         	goto	i2l48
  3163  000C54                     i2l2940:
  3164  000C54  FFFF               	dw	65535	; assembler added errata NOP
  3165                           
  3166                           ;MW.c: 275:             Set_LCD_BUFFER1(" Heating         ");
  3167  000C56  0E01               	movlw	low STR_1
  3168  000C58  6E55               	movwf	Set_LCD_BUFFER1@BUF_1^0,c
  3169  000C5A  0E06               	movlw	high STR_1
  3170  000C5C  6E56               	movwf	(Set_LCD_BUFFER1@BUF_1+1)^0,c
  3171  000C5E  EC33  F011         	call	_Set_LCD_BUFFER1	;wreg free
  3172                           
  3173                           ;MW.c: 276:             Set_LCD_BUFFER2("    Is Finished  ");
  3174  000C62  0E13               	movlw	low STR_2
  3175  000C64  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  3176  000C66  0E06               	movlw	high STR_2
  3177  000C68  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  3178  000C6A  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  3179  000C6E                     
  3180                           ;MW.c: 278:             Weight_State = Released;
  3181  000C6E  0E00               	movlw	0
  3182  000C70  6E2A               	movwf	_Weight_State^0,c
  3183  000C72                     
  3184                           ;MW.c: 279:             Door_State = Released;
  3185  000C72  0E00               	movlw	0
  3186  000C74  6E29               	movwf	_Door_State^0,c
  3187                           
  3188                           ;MW.c: 280:             break;
  3189  000C76  EF6C  F006         	goto	i2l48
  3190  000C7A                     i2l2948:
  3191  000C7A  FFFF               	dw	65535	; assembler added errata NOP
  3192  000C7C  5028               	movf	_Current_MW_State^0,w,c
  3193  000C7E  6E57               	movwf	??_MW_Update^0,c
  3194  000C80  6A58               	clrf	(??_MW_Update+1)^0,c
  3195                           
  3196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3197                           ; Switch size 1, requested type "simple"
  3198                           ; Number of cases is 1, Range of values is 0 to 0
  3199                           ; switch strategies available:
  3200                           ; Name         Instructions Cycles
  3201                           ; simple_byte            4     3 (average)
  3202                           ;	Chosen strategy is simple_byte
  3203  000C82  5058               	movf	(??_MW_Update+1)^0,w,c
  3204  000C84  0A00               	xorlw	0	; case 0
  3205  000C86  B4D8               	btfsc	status,2,c
  3206  000C88  EF48  F006         	goto	i2l3304
  3207  000C8C  EF6C  F006         	goto	i2l48
  3208  000C90                     i2l3304:
  3209  000C90  FFFF               	dw	65535	; assembler added errata NOP
  3210                           
  3211                           ; Switch size 1, requested type "simple"
  3212                           ; Number of cases is 8, Range of values is 0 to 7
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte           25    13 (average)
  3216                           ;	Chosen strategy is simple_byte
  3217  000C92  5057               	movf	??_MW_Update^0,w,c
  3218  000C94  0A00               	xorlw	0	; case 0
  3219  000C96  B4D8               	btfsc	status,2,c
  3220  000C98  EFF8  F003         	goto	i2l2754
  3221  000C9C  0A01               	xorlw	1	; case 1
  3222  000C9E  B4D8               	btfsc	status,2,c
  3223  000CA0  EF0F  F004         	goto	i2l2762
  3224  000CA4  0A03               	xorlw	3	; case 2
  3225  000CA6  B4D8               	btfsc	status,2,c
  3226  000CA8  EF7B  F004         	goto	i2l2794
  3227  000CAC  0A01               	xorlw	1	; case 3
  3228  000CAE  B4D8               	btfsc	status,2,c
  3229  000CB0  EFCD  F004         	goto	i2l2824
  3230  000CB4  0A07               	xorlw	7	; case 4
  3231  000CB6  B4D8               	btfsc	status,2,c
  3232  000CB8  EF2F  F005         	goto	i2l2856
  3233  000CBC  0A01               	xorlw	1	; case 5
  3234  000CBE  B4D8               	btfsc	status,2,c
  3235  000CC0  EF7D  F005         	goto	i2l2884
  3236  000CC4  0A03               	xorlw	3	; case 6
  3237  000CC6  B4D8               	btfsc	status,2,c
  3238  000CC8  EFD3  F005         	goto	i2l2914
  3239  000CCC  0A01               	xorlw	1	; case 7
  3240  000CCE  B4D8               	btfsc	status,2,c
  3241  000CD0  EF2A  F006         	goto	i2l2940
  3242  000CD4  EF6C  F006         	goto	i2l48
  3243  000CD8                     i2l48:
  3244  000CD8  FFFF               	dw	65535	; assembler added errata NOP
  3245  000CDA  0012               	return		;funcret
  3246  000CDC  FFFF               	dw	65535	; errata NOP
  3247  000CDE                     __end_of_MW_Update:
  3248                           	opt callstack 0
  3249                           
  3250 ;; *************** function _Toggle_Lamps *****************
  3251 ;; Defined at:
  3252 ;;		line 50 in file "DO.c"
  3253 ;; Parameters:    Size  Location     Type
  3254 ;;		None
  3255 ;; Auto vars:     Size  Location     Type
  3256 ;;		None
  3257 ;; Return value:  Size  Location     Type
  3258 ;;                  1    wreg      void 
  3259 ;; Registers used:
  3260 ;;		wreg, status,2, status,0, cstack
  3261 ;; Tracked objects:
  3262 ;;		On entry : 0/0
  3263 ;;		On exit  : 0/0
  3264 ;;		Unchanged: 0/0
  3265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3266 ;;      Params:         0       0       0       0       0       0       0
  3267 ;;      Locals:         0       0       0       0       0       0       0
  3268 ;;      Temps:          0       0       0       0       0       0       0
  3269 ;;      Totals:         0       0       0       0       0       0       0
  3270 ;;Total ram usage:        0 bytes
  3271 ;; Hardware stack levels used:    1
  3272 ;; Hardware stack levels required when called:    1
  3273 ;; This function calls:
  3274 ;;		_DO_SetState
  3275 ;; This function is called by:
  3276 ;;		_MW_Update
  3277 ;; This function uses a non-reentrant model
  3278 ;;
  3279                           
  3280                           	psect	text14
  3281  001E5E                     __ptext14:
  3282                           	opt callstack 0
  3283  001E5E                     _Toggle_Lamps:
  3284                           	opt callstack 0
  3285  001E5E  FFFF               	dw	65535	; assembler added errata NOP
  3286  001E60                     
  3287                           ;DO.c: 52:     static tByte Lamp_counter = 0;;DO.c: 53:     Lamp_counter += (10);
  3288  001E60  0E0A               	movlw	10
  3289  001E62  261D               	addwf	Toggle_Lamps@Lamp_counter^0,f,c
  3290                           
  3291                           ;DO.c: 54:     if(Lamp_counter == ((200) / 2))
  3292  001E64  0E64               	movlw	100
  3293  001E66  181D               	xorwf	Toggle_Lamps@Lamp_counter^0,w,c
  3294  001E68  A4D8               	btfss	status,2,c
  3295  001E6A  EF39  F00F         	goto	i2u153_41
  3296  001E6E  EF3C  F00F         	goto	i2u153_40
  3297  001E72                     i2u153_41:
  3298  001E72  FFFF               	dw	65535	; assembler added errata NOP
  3299  001E74  EF47  F00F         	goto	i2l2476
  3300  001E78                     i2u153_40:
  3301  001E78  FFFF               	dw	65535	; assembler added errata NOP
  3302  001E7A                     
  3303                           ;DO.c: 55:     {;DO.c: 56:         DO_SetState(Lamp_1 , OFF);
  3304  001E7A  0E00               	movlw	0
  3305  001E7C  6E4B               	movwf	DO_SetState@state^0,c
  3306  001E7E  0E02               	movlw	2
  3307  001E80  EC76  F00C         	call	_DO_SetState
  3308                           
  3309                           ;DO.c: 57:         DO_SetState(Lamp_2 , ON);
  3310  001E84  0E01               	movlw	1
  3311  001E86  6E4B               	movwf	DO_SetState@state^0,c
  3312  001E88  0E03               	movlw	3
  3313  001E8A  EC76  F00C         	call	_DO_SetState
  3314  001E8E                     i2l2476:
  3315  001E8E  FFFF               	dw	65535	; assembler added errata NOP
  3316                           
  3317                           ;DO.c: 59:     if(Lamp_counter == (200) )
  3318  001E90  0EC8               	movlw	200
  3319  001E92  181D               	xorwf	Toggle_Lamps@Lamp_counter^0,w,c
  3320  001E94  A4D8               	btfss	status,2,c
  3321  001E96  EF4F  F00F         	goto	i2u154_41
  3322  001E9A  EF52  F00F         	goto	i2u154_40
  3323  001E9E                     i2u154_41:
  3324  001E9E  FFFF               	dw	65535	; assembler added errata NOP
  3325  001EA0  EF5F  F00F         	goto	i2l333
  3326  001EA4                     i2u154_40:
  3327  001EA4  FFFF               	dw	65535	; assembler added errata NOP
  3328  001EA6                     
  3329                           ;DO.c: 60:     {;DO.c: 61:         DO_SetState(Lamp_1 , ON);
  3330  001EA6  0E01               	movlw	1
  3331  001EA8  6E4B               	movwf	DO_SetState@state^0,c
  3332  001EAA  0E02               	movlw	2
  3333  001EAC  EC76  F00C         	call	_DO_SetState
  3334                           
  3335                           ;DO.c: 62:         DO_SetState(Lamp_2 , OFF);
  3336  001EB0  0E00               	movlw	0
  3337  001EB2  6E4B               	movwf	DO_SetState@state^0,c
  3338  001EB4  0E03               	movlw	3
  3339  001EB6  EC76  F00C         	call	_DO_SetState
  3340  001EBA                     
  3341                           ;DO.c: 64:         Lamp_counter = 0;
  3342  001EBA  0E00               	movlw	0
  3343  001EBC  6E1D               	movwf	Toggle_Lamps@Lamp_counter^0,c
  3344  001EBE                     i2l333:
  3345  001EBE  FFFF               	dw	65535	; assembler added errata NOP
  3346  001EC0  0012               	return		;funcret
  3347  001EC2  FFFF               	dw	65535	; errata NOP
  3348  001EC4                     __end_of_Toggle_Lamps:
  3349                           	opt callstack 0
  3350                           
  3351 ;; *************** function _DO_SetState *****************
  3352 ;; Defined at:
  3353 ;;		line 23 in file "DO.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;  device          1    wreg     enum E2117
  3356 ;;  state           1    0[COMRAM] enum E2123
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;  device          1    3[COMRAM] enum E2117
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, status,0
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3368 ;;      Params:         1       0       0       0       0       0       0
  3369 ;;      Locals:         1       0       0       0       0       0       0
  3370 ;;      Temps:          2       0       0       0       0       0       0
  3371 ;;      Totals:         4       0       0       0       0       0       0
  3372 ;;Total ram usage:        4 bytes
  3373 ;; Hardware stack levels used:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_MW_Update
  3378 ;;		_Toggle_Lamps
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text15
  3383  0018EC                     __ptext15:
  3384                           	opt callstack 0
  3385  0018EC                     _DO_SetState:
  3386                           	opt callstack 0
  3387  0018EC  FFFF               	dw	65535	; assembler added errata NOP
  3388                           
  3389                           ;incstack = 0
  3390                           ;DO_SetState@device stored from wreg
  3391  0018EE  6E4E               	movwf	DO_SetState@device^0,c
  3392  0018F0                     
  3393                           ;DO.c: 23: void DO_SetState(tDO device ,tDO_State state);DO.c: 24: {;DO.c: 25:     switc
      +                          h (device)
  3394  0018F0  EFB4  F00C         	goto	i2l2312
  3395  0018F4                     i2l2302:
  3396  0018F4  FFFF               	dw	65535	; assembler added errata NOP
  3397                           
  3398                           ;DO.c: 28:             ((((PORTC))) = (((PORTC)) & (~(1 << ((5)))))|(state << ((5))));
  3399  0018F6  C04B  F04C         	movff	DO_SetState@state,??_DO_SetState
  3400  0018FA  0E05               	movlw	5
  3401  0018FC  6E4D               	movwf	(??_DO_SetState+1)^0,c
  3402  0018FE                     i2u135_45:
  3403  0018FE  FFFF               	dw	65535	; assembler added errata NOP
  3404  001900  90D8               	bcf	status,0,c
  3405  001902  364C               	rlcf	??_DO_SetState^0,f,c
  3406  001904  2E4D               	decfsz	(??_DO_SetState+1)^0,f,c
  3407  001906  EF7F  F00C         	goto	i2u135_45
  3408  00190A  5082               	movf	130,w,c	;volatile
  3409  00190C  0BDF               	andlw	223
  3410  00190E  104C               	iorwf	??_DO_SetState^0,w,c
  3411  001910  6E82               	movwf	130,c	;volatile
  3412                           
  3413                           ;DO.c: 29:             break;
  3414  001912  EFD3  F00C         	goto	i2l326
  3415  001916                     i2l2304:
  3416  001916  FFFF               	dw	65535	; assembler added errata NOP
  3417                           
  3418                           ;DO.c: 32:             ((((PORTC))) = (((PORTC)) & (~(1 << ((2)))))|(state << ((2))));
  3419  001918  C04B  F04C         	movff	DO_SetState@state,??_DO_SetState
  3420  00191C  90D8               	bcf	status,0,c
  3421  00191E  364C               	rlcf	??_DO_SetState^0,f,c
  3422  001920  90D8               	bcf	status,0,c
  3423  001922  364C               	rlcf	??_DO_SetState^0,f,c
  3424  001924  5082               	movf	130,w,c	;volatile
  3425  001926  0BFB               	andlw	251
  3426  001928  104C               	iorwf	??_DO_SetState^0,w,c
  3427  00192A  6E82               	movwf	130,c	;volatile
  3428                           
  3429                           ;DO.c: 33:             break;
  3430  00192C  EFD3  F00C         	goto	i2l326
  3431  001930                     i2l2306:
  3432  001930  FFFF               	dw	65535	; assembler added errata NOP
  3433                           
  3434                           ;DO.c: 36:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
  3435  001932  6A4C               	clrf	??_DO_SetState^0,c
  3436  001934  A04B               	btfss	DO_SetState@state^0,0,c
  3437  001936  D001               	bra	i2u136_45
  3438  001938  8E4C               	bsf	??_DO_SetState^0,7,c
  3439  00193A                     i2u136_45:
  3440  00193A  5081               	movf	129,w,c	;volatile
  3441  00193C  0B7F               	andlw	127
  3442  00193E  104C               	iorwf	??_DO_SetState^0,w,c
  3443  001940  6E81               	movwf	129,c	;volatile
  3444                           
  3445                           ;DO.c: 37:             break;
  3446  001942  EFD3  F00C         	goto	i2l326
  3447  001946                     i2l2308:
  3448  001946  FFFF               	dw	65535	; assembler added errata NOP
  3449                           
  3450                           ;DO.c: 40:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
  3451  001948  C04B  F04C         	movff	DO_SetState@state,??_DO_SetState
  3452  00194C  0E06               	movlw	6
  3453  00194E  6E4D               	movwf	(??_DO_SetState+1)^0,c
  3454  001950                     i2u137_45:
  3455  001950  FFFF               	dw	65535	; assembler added errata NOP
  3456  001952  90D8               	bcf	status,0,c
  3457  001954  364C               	rlcf	??_DO_SetState^0,f,c
  3458  001956  2E4D               	decfsz	(??_DO_SetState+1)^0,f,c
  3459  001958  EFA8  F00C         	goto	i2u137_45
  3460  00195C  5081               	movf	129,w,c	;volatile
  3461  00195E  0BBF               	andlw	191
  3462  001960  104C               	iorwf	??_DO_SetState^0,w,c
  3463  001962  6E81               	movwf	129,c	;volatile
  3464                           
  3465                           ;DO.c: 41:             break;
  3466  001964  EFD3  F00C         	goto	i2l326
  3467  001968                     i2l2312:
  3468  001968  FFFF               	dw	65535	; assembler added errata NOP
  3469  00196A  504E               	movf	DO_SetState@device^0,w,c
  3470  00196C  6E4C               	movwf	??_DO_SetState^0,c
  3471  00196E  6A4D               	clrf	(??_DO_SetState+1)^0,c
  3472                           
  3473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3474                           ; Switch size 1, requested type "simple"
  3475                           ; Number of cases is 1, Range of values is 0 to 0
  3476                           ; switch strategies available:
  3477                           ; Name         Instructions Cycles
  3478                           ; simple_byte            4     3 (average)
  3479                           ;	Chosen strategy is simple_byte
  3480  001970  504D               	movf	(??_DO_SetState+1)^0,w,c
  3481  001972  0A00               	xorlw	0	; case 0
  3482  001974  B4D8               	btfsc	status,2,c
  3483  001976  EFBF  F00C         	goto	i2l3306
  3484  00197A  EFD3  F00C         	goto	i2l326
  3485  00197E                     i2l3306:
  3486  00197E  FFFF               	dw	65535	; assembler added errata NOP
  3487                           
  3488                           ; Switch size 1, requested type "simple"
  3489                           ; Number of cases is 4, Range of values is 0 to 3
  3490                           ; switch strategies available:
  3491                           ; Name         Instructions Cycles
  3492                           ; simple_byte           13     7 (average)
  3493                           ;	Chosen strategy is simple_byte
  3494  001980  504C               	movf	??_DO_SetState^0,w,c
  3495  001982  0A00               	xorlw	0	; case 0
  3496  001984  B4D8               	btfsc	status,2,c
  3497  001986  EF7A  F00C         	goto	i2l2302
  3498  00198A  0A01               	xorlw	1	; case 1
  3499  00198C  B4D8               	btfsc	status,2,c
  3500  00198E  EF8B  F00C         	goto	i2l2304
  3501  001992  0A03               	xorlw	3	; case 2
  3502  001994  B4D8               	btfsc	status,2,c
  3503  001996  EF98  F00C         	goto	i2l2306
  3504  00199A  0A01               	xorlw	1	; case 3
  3505  00199C  B4D8               	btfsc	status,2,c
  3506  00199E  EFA3  F00C         	goto	i2l2308
  3507  0019A2  EFD3  F00C         	goto	i2l326
  3508  0019A6                     i2l326:
  3509  0019A6  FFFF               	dw	65535	; assembler added errata NOP
  3510  0019A8  0012               	return		;funcret
  3511  0019AA  FFFF               	dw	65535	; errata NOP
  3512  0019AC                     __end_of_DO_SetState:
  3513                           	opt callstack 0
  3514                           
  3515 ;; *************** function _Set_Time *****************
  3516 ;; Defined at:
  3517 ;;		line 63 in file "Time.c"
  3518 ;; Parameters:    Size  Location     Type
  3519 ;;  minutes_tens    1    wreg     unsigned char 
  3520 ;;  minutes_unit    1    0[COMRAM] unsigned char 
  3521 ;;  seconds_tens    1    1[COMRAM] unsigned char 
  3522 ;;  seconds_unit    1    2[COMRAM] unsigned char 
  3523 ;; Auto vars:     Size  Location     Type
  3524 ;;  minutes_tens    1    3[COMRAM] unsigned char 
  3525 ;; Return value:  Size  Location     Type
  3526 ;;                  1    wreg      void 
  3527 ;; Registers used:
  3528 ;;		wreg, status,2, status,0, prodl, prodh
  3529 ;; Tracked objects:
  3530 ;;		On entry : 0/0
  3531 ;;		On exit  : 0/0
  3532 ;;		Unchanged: 0/0
  3533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3534 ;;      Params:         3       0       0       0       0       0       0
  3535 ;;      Locals:         1       0       0       0       0       0       0
  3536 ;;      Temps:          0       0       0       0       0       0       0
  3537 ;;      Totals:         4       0       0       0       0       0       0
  3538 ;;Total ram usage:        4 bytes
  3539 ;; Hardware stack levels used:    1
  3540 ;; This function calls:
  3541 ;;		Nothing
  3542 ;; This function is called by:
  3543 ;;		_MW_Update
  3544 ;; This function uses a non-reentrant model
  3545 ;;
  3546                           
  3547                           	psect	text16
  3548  0021EC                     __ptext16:
  3549                           	opt callstack 0
  3550  0021EC                     _Set_Time:
  3551                           	opt callstack 0
  3552  0021EC  FFFF               	dw	65535	; assembler added errata NOP
  3553                           
  3554                           ;incstack = 0
  3555                           ;Set_Time@minutes_tens stored from wreg
  3556  0021EE  6E4E               	movwf	Set_Time@minutes_tens^0,c
  3557  0021F0                     
  3558                           ;Time.c: 63: void Set_Time(tByte minutes_tens , tByte minutes_units , tByte seconds_tens
      +                           , tByte seconds_units);Time.c: 64: {;Time.c: 65:     minutes_tens = (minutes_tens*10) +
      +                           minutes_units;
  3559  0021F0  504E               	movf	Set_Time@minutes_tens^0,w,c
  3560  0021F2  0D0A               	mullw	10
  3561  0021F4  50F3               	movf	243,w,c
  3562  0021F6  244B               	addwf	Set_Time@minutes_units^0,w,c
  3563  0021F8  6E4E               	movwf	Set_Time@minutes_tens^0,c
  3564                           
  3565                           ;Time.c: 66:     seconds_tens = (seconds_tens*10) + seconds_units;
  3566  0021FA  504C               	movf	Set_Time@seconds_tens^0,w,c
  3567  0021FC  0D0A               	mullw	10
  3568  0021FE  50F3               	movf	243,w,c
  3569  002200  244D               	addwf	Set_Time@seconds_units^0,w,c
  3570  002202  6E4C               	movwf	Set_Time@seconds_tens^0,c
  3571  002204                     
  3572                           ;Time.c: 68:     TIM_CurrentTime.seconds = seconds_tens;
  3573  002204  C04C  F010         	movff	Set_Time@seconds_tens,_TIM_CurrentTime
  3574  002208                     
  3575                           ;Time.c: 69:     TIM_CurrentTime.minutes = minutes_tens;
  3576  002208  C04E  F011         	movff	Set_Time@minutes_tens,_TIM_CurrentTime+1
  3577  00220C  0012               	return		;funcret
  3578  00220E  FFFF               	dw	65535	; errata NOP
  3579  002210                     __end_of_Set_Time:
  3580                           	opt callstack 0
  3581                           
  3582 ;; *************** function _Set_TIM_Current_Count_State *****************
  3583 ;; Defined at:
  3584 ;;		line 85 in file "Time.c"
  3585 ;; Parameters:    Size  Location     Type
  3586 ;;  Current_Coun    1    wreg     enum E2151
  3587 ;; Auto vars:     Size  Location     Type
  3588 ;;  Current_Coun    1    0[COMRAM] enum E2151
  3589 ;; Return value:  Size  Location     Type
  3590 ;;                  1    wreg      void 
  3591 ;; Registers used:
  3592 ;;		wreg
  3593 ;; Tracked objects:
  3594 ;;		On entry : 0/0
  3595 ;;		On exit  : 0/0
  3596 ;;		Unchanged: 0/0
  3597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3598 ;;      Params:         0       0       0       0       0       0       0
  3599 ;;      Locals:         1       0       0       0       0       0       0
  3600 ;;      Temps:          0       0       0       0       0       0       0
  3601 ;;      Totals:         1       0       0       0       0       0       0
  3602 ;;Total ram usage:        1 bytes
  3603 ;; Hardware stack levels used:    1
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_MW_Update
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text17
  3612  0022DE                     __ptext17:
  3613                           	opt callstack 0
  3614  0022DE                     _Set_TIM_Current_Count_State:
  3615                           	opt callstack 0
  3616  0022DE  FFFF               	dw	65535	; assembler added errata NOP
  3617                           
  3618                           ;incstack = 0
  3619                           ;Set_TIM_Current_Count_State@Current_Count_State stored from wreg
  3620  0022E0  6E4B               	movwf	Set_TIM_Current_Count_State@Current_Count_State^0,c
  3621  0022E2                     
  3622                           ;Time.c: 85: void Set_TIM_Current_Count_State (tCount_State Current_Count_State);Time.c:
      +                           86: {;Time.c: 87:     TIM_Current_Count_State = Current_Count_State ;
  3623  0022E2  C04B  F01C         	movff	Set_TIM_Current_Count_State@Current_Count_State,_TIM_Current_Count_State
  3624  0022E6  0012               	return		;funcret
  3625  0022E8  FFFF               	dw	65535	; errata NOP
  3626  0022EA                     __end_of_Set_TIM_Current_Count_State:
  3627                           	opt callstack 0
  3628                           
  3629 ;; *************** function _Set_Disp_State *****************
  3630 ;; Defined at:
  3631 ;;		line 309 in file "Disp.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;  Current_MW_S    1    wreg     enum E2600
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;  Current_MW_S    1    0[COMRAM] enum E2600
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3645 ;;      Params:         0       0       0       0       0       0       0
  3646 ;;      Locals:         1       0       0       0       0       0       0
  3647 ;;      Temps:          0       0       0       0       0       0       0
  3648 ;;      Totals:         1       0       0       0       0       0       0
  3649 ;;Total ram usage:        1 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; This function calls:
  3652 ;;		Nothing
  3653 ;; This function is called by:
  3654 ;;		_MW_Update
  3655 ;; This function uses a non-reentrant model
  3656 ;;
  3657                           
  3658                           	psect	text18
  3659  0022EA                     __ptext18:
  3660                           	opt callstack 0
  3661  0022EA                     _Set_Disp_State:
  3662                           	opt callstack 0
  3663  0022EA  FFFF               	dw	65535	; assembler added errata NOP
  3664                           
  3665                           ;incstack = 0
  3666                           ;Set_Disp_State@Current_MW_State stored from wreg
  3667  0022EC  6E4B               	movwf	Set_Disp_State@Current_MW_State^0,c
  3668  0022EE                     
  3669                           ;Disp.c: 309: void Set_Disp_State (tMW_State Current_MW_State);Disp.c: 310: {;Disp.c: 31
      +                          1:     Disp_Current_State = Current_MW_State;
  3670  0022EE  C04B  F01E         	movff	Set_Disp_State@Current_MW_State,_Disp_Current_State
  3671  0022F2  0012               	return		;funcret
  3672  0022F4  FFFF               	dw	65535	; errata NOP
  3673  0022F6                     __end_of_Set_Disp_State:
  3674                           	opt callstack 0
  3675                           
  3676 ;; *************** function _Set_Disp_Current_Count_State *****************
  3677 ;; Defined at:
  3678 ;;		line 314 in file "Disp.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;  Current_Coun    1    wreg     enum E2614
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;  Current_Coun    1    0[COMRAM] enum E2614
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3692 ;;      Params:         0       0       0       0       0       0       0
  3693 ;;      Locals:         1       0       0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0
  3695 ;;      Totals:         1       0       0       0       0       0       0
  3696 ;;Total ram usage:        1 bytes
  3697 ;; Hardware stack levels used:    1
  3698 ;; This function calls:
  3699 ;;		Nothing
  3700 ;; This function is called by:
  3701 ;;		_MW_Update
  3702 ;; This function uses a non-reentrant model
  3703 ;;
  3704                           
  3705                           	psect	text19
  3706  0022F6                     __ptext19:
  3707                           	opt callstack 0
  3708  0022F6                     _Set_Disp_Current_Count_State:
  3709                           	opt callstack 0
  3710  0022F6  FFFF               	dw	65535	; assembler added errata NOP
  3711                           
  3712                           ;incstack = 0
  3713                           ;Set_Disp_Current_Count_State@Current_Count_State stored from wreg
  3714  0022F8  6E4B               	movwf	Set_Disp_Current_Count_State@Current_Count_State^0,c
  3715  0022FA                     
  3716                           ;Disp.c: 314: void Set_Disp_Current_Count_State (tCount_State Current_Count_State);Disp.
      +                          c: 315: {;Disp.c: 316:     Disp_Current_Count_State = Current_Count_State ;
  3717  0022FA  C04B  F01F         	movff	Set_Disp_Current_Count_State@Current_Count_State,_Disp_Current_Count_State
  3718  0022FE  0012               	return		;funcret
  3719  002300  FFFF               	dw	65535	; errata NOP
  3720  002302                     __end_of_Set_Disp_Current_Count_State:
  3721                           	opt callstack 0
  3722                           
  3723 ;; *************** function _SW_GetState *****************
  3724 ;; Defined at:
  3725 ;;		line 70 in file "SW.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  sw              1    wreg     enum E9
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  sw              1    0[COMRAM] enum E9
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      enum E2193
  3732 ;; Registers used:
  3733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3739 ;;      Params:         0       0       0       0       0       0       0
  3740 ;;      Locals:         1       0       0       0       0       0       0
  3741 ;;      Temps:          0       0       0       0       0       0       0
  3742 ;;      Totals:         1       0       0       0       0       0       0
  3743 ;;Total ram usage:        1 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; This function calls:
  3746 ;;		Nothing
  3747 ;; This function is called by:
  3748 ;;		_MW_Update
  3749 ;; This function uses a non-reentrant model
  3750 ;;
  3751                           
  3752                           	psect	text20
  3753  002232                     __ptext20:
  3754                           	opt callstack 0
  3755  002232                     _SW_GetState:
  3756                           	opt callstack 0
  3757  002232  FFFF               	dw	65535	; assembler added errata NOP
  3758                           
  3759                           ;incstack = 0
  3760                           ;SW_GetState@sw stored from wreg
  3761  002234  6E4B               	movwf	SW_GetState@sw^0,c
  3762  002236                     
  3763                           ;SW.c: 70: tSW_State SW_GetState(tSW sw);SW.c: 71: {;SW.c: 74:     return SWs_Info[sw].s
      +                          w_state;
  3764  002236  504B               	movf	SW_GetState@sw^0,w,c
  3765  002238  0D03               	mullw	3
  3766  00223A  0E0A               	movlw	low (_SWs_Info+2)
  3767  00223C  24F3               	addwf	243,w,c
  3768  00223E  6ED9               	movwf	fsr2l,c
  3769  002240  0E00               	movlw	high (_SWs_Info+2)
  3770  002242  20F4               	addwfc	prodh,w,c
  3771  002244  6EDA               	movwf	fsr2h,c
  3772  002246  50DF               	movf	indf2,w,c
  3773  002248  0012               	return		;funcret
  3774  00224A  FFFF               	dw	65535	; errata NOP
  3775  00224C                     __end_of_SW_GetState:
  3776                           	opt callstack 0
  3777                           
  3778 ;; *************** function _LCD_Clear *****************
  3779 ;; Defined at:
  3780 ;;		line 132 in file "LCD.c"
  3781 ;; Parameters:    Size  Location     Type
  3782 ;;		None
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3794 ;;      Params:         0       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0
  3796 ;;      Temps:          0       0       0       0       0       0       0
  3797 ;;      Totals:         0       0       0       0       0       0       0
  3798 ;;Total ram usage:        0 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    2
  3801 ;; This function calls:
  3802 ;;		i2_LCD_SendCommand
  3803 ;; This function is called by:
  3804 ;;		_MW_Update
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text21
  3809  0022AE                     __ptext21:
  3810                           	opt callstack 0
  3811  0022AE                     _LCD_Clear:
  3812                           	opt callstack 0
  3813  0022AE  FFFF               	dw	65535	; assembler added errata NOP
  3814  0022B0                     
  3815                           ;LCD.c: 134:     LCD_SendCommand(0);
  3816  0022B0  0E00               	movlw	0
  3817  0022B2  ECE1  F010         	call	i2_LCD_SendCommand
  3818                           
  3819                           ;LCD.c: 135:     LCD_SendCommand(1);
  3820  0022B6  0E01               	movlw	1
  3821  0022B8  ECE1  F010         	call	i2_LCD_SendCommand
  3822  0022BC  0012               	return		;funcret
  3823  0022BE  FFFF               	dw	65535	; errata NOP
  3824  0022C0                     __end_of_LCD_Clear:
  3825                           	opt callstack 0
  3826                           
  3827 ;; *************** function _Keypad_Get_Data_From_buffer *****************
  3828 ;; Defined at:
  3829 ;;		line 75 in file "keypad.c"
  3830 ;; Parameters:    Size  Location     Type
  3831 ;;  pKey            2    0[COMRAM] PTR unsigned char 
  3832 ;;		 -> MW_Update@Pressed_Key(1), 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;		None
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  1    wreg      unsigned char 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3839 ;; Tracked objects:
  3840 ;;		On entry : 0/0
  3841 ;;		On exit  : 0/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3844 ;;      Params:         2       0       0       0       0       0       0
  3845 ;;      Locals:         0       0       0       0       0       0       0
  3846 ;;      Temps:          0       0       0       0       0       0       0
  3847 ;;      Totals:         2       0       0       0       0       0       0
  3848 ;;Total ram usage:        2 bytes
  3849 ;; Hardware stack levels used:    1
  3850 ;; This function calls:
  3851 ;;		Nothing
  3852 ;; This function is called by:
  3853 ;;		_MW_Update
  3854 ;; This function uses a non-reentrant model
  3855 ;;
  3856                           
  3857                           	psect	text22
  3858  002072                     __ptext22:
  3859                           	opt callstack 0
  3860  002072                     _Keypad_Get_Data_From_buffer:
  3861                           	opt callstack 0
  3862  002072  FFFF               	dw	65535	; assembler added errata NOP
  3863  002074                     
  3864                           ;keypad.c: 75: tByte Keypad_Get_Data_From_buffer(tByte *pKey);keypad.c: 76: {;keypad.c: 
      +                          77:     if(KEYPAD_reading_index < KEYPAD_writing_index)
  3865  002074  501A               	movf	_KEYPAD_writing_index^0,w,c
  3866  002076  5C1B               	subwf	_KEYPAD_reading_index^0,w,c
  3867  002078  B0D8               	btfsc	status,0,c
  3868  00207A  EF41  F010         	goto	i2u152_41
  3869  00207E  EF44  F010         	goto	i2u152_40
  3870  002082                     i2u152_41:
  3871  002082  FFFF               	dw	65535	; assembler added errata NOP
  3872  002084  EF55  F010         	goto	i2l2468
  3873  002088                     i2u152_40:
  3874  002088  FFFF               	dw	65535	; assembler added errata NOP
  3875  00208A                     
  3876                           ;keypad.c: 78:     {;keypad.c: 81:         *pKey = Keypad_Recv_Buffer[KEYPAD_reading_ind
      +                          ex];
  3877  00208A  0E01               	movlw	low _Keypad_Recv_Buffer
  3878  00208C  241B               	addwf	_KEYPAD_reading_index^0,w,c
  3879  00208E  6ED9               	movwf	fsr2l,c
  3880  002090  6ADA               	clrf	fsr2h,c
  3881  002092  0E00               	movlw	high _Keypad_Recv_Buffer
  3882  002094  22DA               	addwfc	fsr2h,f,c
  3883  002096  C04B  FFE1         	movff	Keypad_Get_Data_From_buffer@pKey,fsr1l
  3884  00209A  C04C  FFE2         	movff	Keypad_Get_Data_From_buffer@pKey+1,fsr1h
  3885  00209E  CFDF FFE7          	movff	indf2,indf1
  3886  0020A2                     
  3887                           ;keypad.c: 82:         KEYPAD_reading_index ++;
  3888  0020A2  2A1B               	incf	_KEYPAD_reading_index^0,f,c
  3889  0020A4                     
  3890                           ;keypad.c: 84:         return 1;
  3891  0020A4  0E01               	movlw	1
  3892  0020A6  EF57  F010         	goto	i2l450
  3893  0020AA                     i2l2468:
  3894  0020AA  FFFF               	dw	65535	; assembler added errata NOP
  3895                           
  3896                           ;keypad.c: 88:     return 0;
  3897  0020AC  0E00               	movlw	0
  3898  0020AE                     i2l450:
  3899  0020AE  FFFF               	dw	65535	; assembler added errata NOP
  3900  0020B0  0012               	return		;funcret
  3901  0020B2  FFFF               	dw	65535	; errata NOP
  3902  0020B4                     __end_of_Keypad_Get_Data_From_buffer:
  3903                           	opt callstack 0
  3904                           
  3905 ;; *************** function _Is_Finished *****************
  3906 ;; Defined at:
  3907 ;;		line 73 in file "Time.c"
  3908 ;; Parameters:    Size  Location     Type
  3909 ;;		None
  3910 ;; Auto vars:     Size  Location     Type
  3911 ;;		None
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  1    wreg      unsigned char 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3921 ;;      Params:         0       0       0       0       0       0       0
  3922 ;;      Locals:         0       0       0       0       0       0       0
  3923 ;;      Temps:          0       0       0       0       0       0       0
  3924 ;;      Totals:         0       0       0       0       0       0       0
  3925 ;;Total ram usage:        0 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; This function calls:
  3928 ;;		Nothing
  3929 ;; This function is called by:
  3930 ;;		_MW_Update
  3931 ;; This function uses a non-reentrant model
  3932 ;;
  3933                           
  3934                           	psect	text23
  3935  0020F4                     __ptext23:
  3936                           	opt callstack 0
  3937  0020F4                     _Is_Finished:
  3938                           	opt callstack 0
  3939  0020F4  FFFF               	dw	65535	; assembler added errata NOP
  3940  0020F6                     
  3941                           ;Time.c: 75:     if((TIM_CurrentTime.minutes == 0)&&(TIM_CurrentTime.seconds == 0))
  3942  0020F6  5011               	movf	(_TIM_CurrentTime+1)^0,w,c
  3943  0020F8  A4D8               	btfss	status,2,c
  3944  0020FA  EF81  F010         	goto	i2u32_41
  3945  0020FE  EF84  F010         	goto	i2u32_40
  3946  002102                     i2u32_41:
  3947  002102  FFFF               	dw	65535	; assembler added errata NOP
  3948  002104  EF92  F010         	goto	i2l1488
  3949  002108                     i2u32_40:
  3950  002108  FFFF               	dw	65535	; assembler added errata NOP
  3951  00210A  5010               	movf	_TIM_CurrentTime^0,w,c
  3952  00210C  A4D8               	btfss	status,2,c
  3953  00210E  EF8B  F010         	goto	i2u33_41
  3954  002112  EF8E  F010         	goto	i2u33_40
  3955  002116                     i2u33_41:
  3956  002116  FFFF               	dw	65535	; assembler added errata NOP
  3957  002118  EF92  F010         	goto	i2l1488
  3958  00211C                     i2u33_40:
  3959  00211C  FFFF               	dw	65535	; assembler added errata NOP
  3960  00211E                     
  3961                           ;Time.c: 76:     {;Time.c: 77:         return 1;
  3962  00211E  0E01               	movlw	1
  3963  002120  EF94  F010         	goto	i2l361
  3964  002124                     i2l1488:
  3965  002124  FFFF               	dw	65535	; assembler added errata NOP
  3966                           
  3967                           ;Time.c: 80:     {;Time.c: 81:         return 0;
  3968  002126  0E00               	movlw	0
  3969  002128                     i2l361:
  3970  002128  FFFF               	dw	65535	; assembler added errata NOP
  3971  00212A  0012               	return		;funcret
  3972  00212C  FFFF               	dw	65535	; errata NOP
  3973  00212E                     __end_of_Is_Finished:
  3974                           	opt callstack 0
  3975                           
  3976 ;; *************** function _LCD_Update *****************
  3977 ;; Defined at:
  3978 ;;		line 154 in file "LCD.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;		None
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3992 ;;      Params:         0       0       0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0
  3995 ;;      Totals:         0       0       0       0       0       0       0
  3996 ;;Total ram usage:        0 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    5
  3999 ;; This function calls:
  4000 ;;		_LCD_SendString
  4001 ;; This function is called by:
  4002 ;;		_TMR_Update
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text24
  4007  001F2A                     __ptext24:
  4008                           	opt callstack 0
  4009  001F2A                     _LCD_Update:
  4010                           	opt callstack 0
  4011  001F2A  FFFF               	dw	65535	; assembler added errata NOP
  4012  001F2C                     
  4013                           ;LCD.c: 156:     static tByte LCD_Update_Counter = 20;;LCD.c: 157:     LCD_Update_Counte
      +                          r += (10);
  4014  001F2C  0E0A               	movlw	10
  4015  001F2E  2674               	addwf	LCD_Update@LCD_Update_Counter^0,f,c
  4016                           
  4017                           ;LCD.c: 158:     if(LCD_Update_Counter == 30)
  4018  001F30  0E1E               	movlw	30
  4019  001F32  1874               	xorwf	LCD_Update@LCD_Update_Counter^0,w,c
  4020  001F34  A4D8               	btfss	status,2,c
  4021  001F36  EF9F  F00F         	goto	i2u226_41
  4022  001F3A  EFA2  F00F         	goto	i2u226_40
  4023  001F3E                     i2u226_41:
  4024  001F3E  FFFF               	dw	65535	; assembler added errata NOP
  4025  001F40  EFAC  F00F         	goto	i2l2958
  4026  001F44                     i2u226_40:
  4027  001F44  FFFF               	dw	65535	; assembler added errata NOP
  4028  001F46                     
  4029                           ;LCD.c: 159:     {;LCD.c: 160:         LCD_SendString((0) , LCD_LINE_2_Buffer , 0);
  4030  001F46  0E80               	movlw	low _LCD_LINE_2_Buffer
  4031  001F48  6E58               	movwf	LCD_SendString@str^0,c
  4032  001F4A  0E00               	movlw	high _LCD_LINE_2_Buffer
  4033  001F4C  6E59               	movwf	(LCD_SendString@str+1)^0,c
  4034  001F4E  0E00               	movlw	0
  4035  001F50  6E5A               	movwf	LCD_SendString@col^0,c
  4036  001F52  0E00               	movlw	0
  4037  001F54  ECC6  F00F         	call	_LCD_SendString
  4038  001F58                     i2l2958:
  4039  001F58  FFFF               	dw	65535	; assembler added errata NOP
  4040                           
  4041                           ;LCD.c: 162:     if(LCD_Update_Counter == 60)
  4042  001F5A  0E3C               	movlw	60
  4043  001F5C  1874               	xorwf	LCD_Update@LCD_Update_Counter^0,w,c
  4044  001F5E  A4D8               	btfss	status,2,c
  4045  001F60  EFB4  F00F         	goto	i2u227_41
  4046  001F64  EFB7  F00F         	goto	i2u227_40
  4047  001F68                     i2u227_41:
  4048  001F68  FFFF               	dw	65535	; assembler added errata NOP
  4049  001F6A  EFC3  F00F         	goto	i2l168
  4050  001F6E                     i2u227_40:
  4051  001F6E  FFFF               	dw	65535	; assembler added errata NOP
  4052  001F70                     
  4053                           ;LCD.c: 163:     {;LCD.c: 164:         LCD_SendString((1) , LCD_LINE_1_Buffer , 0);
  4054  001F70  0E3B               	movlw	low _LCD_LINE_1_Buffer
  4055  001F72  6E58               	movwf	LCD_SendString@str^0,c
  4056  001F74  0E00               	movlw	high _LCD_LINE_1_Buffer
  4057  001F76  6E59               	movwf	(LCD_SendString@str+1)^0,c
  4058  001F78  0E00               	movlw	0
  4059  001F7A  6E5A               	movwf	LCD_SendString@col^0,c
  4060  001F7C  0E01               	movlw	1
  4061  001F7E  ECC6  F00F         	call	_LCD_SendString
  4062  001F82                     
  4063                           ;LCD.c: 165:         LCD_Update_Counter = 0;
  4064  001F82  0E00               	movlw	0
  4065  001F84  6E74               	movwf	LCD_Update@LCD_Update_Counter^0,c
  4066  001F86                     i2l168:
  4067  001F86  FFFF               	dw	65535	; assembler added errata NOP
  4068  001F88  0012               	return		;funcret
  4069  001F8A  FFFF               	dw	65535	; errata NOP
  4070  001F8C                     __end_of_LCD_Update:
  4071                           	opt callstack 0
  4072                           
  4073 ;; *************** function _LCD_SendString *****************
  4074 ;; Defined at:
  4075 ;;		line 78 in file "LCD.c"
  4076 ;; Parameters:    Size  Location     Type
  4077 ;;  line            1    wreg     unsigned char 
  4078 ;;  str             2   13[COMRAM] PTR unsigned char 
  4079 ;;		 -> LCD_LINE_1_Buffer(16), LCD_LINE_2_Buffer(16), 
  4080 ;;  col             1   15[COMRAM] unsigned char 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  line            1   16[COMRAM] unsigned char 
  4083 ;;  i               1   17[COMRAM] unsigned char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4093 ;;      Params:         3       0       0       0       0       0       0
  4094 ;;      Locals:         2       0       0       0       0       0       0
  4095 ;;      Temps:          0       0       0       0       0       0       0
  4096 ;;      Totals:         5       0       0       0       0       0       0
  4097 ;;Total ram usage:        5 bytes
  4098 ;; Hardware stack levels used:    1
  4099 ;; Hardware stack levels required when called:    4
  4100 ;; This function calls:
  4101 ;;		_LCD_SendChar
  4102 ;; This function is called by:
  4103 ;;		_LCD_Update
  4104 ;; This function uses a non-reentrant model
  4105 ;;
  4106                           
  4107                           	psect	text25
  4108  001F8C                     __ptext25:
  4109                           	opt callstack 0
  4110  001F8C                     _LCD_SendString:
  4111                           	opt callstack 0
  4112  001F8C  FFFF               	dw	65535	; assembler added errata NOP
  4113                           
  4114                           ;incstack = 0
  4115                           ;LCD_SendString@line stored from wreg
  4116  001F8E  6E5B               	movwf	LCD_SendString@line^0,c
  4117  001F90                     
  4118                           ;LCD.c: 78: void LCD_SendString(tByte line , tByte * str , tByte col);LCD.c: 79: {;LCD.c
      +                          : 80:     tByte i = 0;
  4119  001F90  0E00               	movlw	0
  4120  001F92  6E5C               	movwf	LCD_SendString@i^0,c
  4121                           
  4122                           ;LCD.c: 81:     while (str[i] != '\0')
  4123  001F94  EFDC  F00F         	goto	i2l2498
  4124  001F98                     i2l2494:
  4125  001F98  FFFF               	dw	65535	; assembler added errata NOP
  4126                           
  4127                           ;LCD.c: 82:     {;LCD.c: 83:         LCD_SendChar(str[i], line, i+col );
  4128  001F9A  C05B  F055         	movff	LCD_SendString@line,LCD_SendChar@line
  4129  001F9E  505C               	movf	LCD_SendString@i^0,w,c
  4130  001FA0  245A               	addwf	LCD_SendString@col^0,w,c
  4131  001FA2  6E56               	movwf	LCD_SendChar@column^0,c
  4132  001FA4  505C               	movf	LCD_SendString@i^0,w,c
  4133  001FA6  2458               	addwf	LCD_SendString@str^0,w,c
  4134  001FA8  6ED9               	movwf	fsr2l,c
  4135  001FAA  0E00               	movlw	0
  4136  001FAC  2059               	addwfc	(LCD_SendString@str+1)^0,w,c
  4137  001FAE  6EDA               	movwf	fsr2h,c
  4138  001FB0  50DF               	movf	indf2,w,c
  4139  001FB2  EC40  F011         	call	_LCD_SendChar
  4140  001FB6                     
  4141                           ;LCD.c: 84:         i++;
  4142  001FB6  2A5C               	incf	LCD_SendString@i^0,f,c
  4143  001FB8                     i2l2498:
  4144  001FB8  FFFF               	dw	65535	; assembler added errata NOP
  4145                           
  4146                           ;LCD.c: 81:     while (str[i] != '\0')
  4147  001FBA  505C               	movf	LCD_SendString@i^0,w,c
  4148  001FBC  2458               	addwf	LCD_SendString@str^0,w,c
  4149  001FBE  6ED9               	movwf	fsr2l,c
  4150  001FC0  0E00               	movlw	0
  4151  001FC2  2059               	addwfc	(LCD_SendString@str+1)^0,w,c
  4152  001FC4  6EDA               	movwf	fsr2h,c
  4153  001FC6  50DF               	movf	indf2,w,c
  4154  001FC8  A4D8               	btfss	status,2,c
  4155  001FCA  EFE9  F00F         	goto	i2u155_41
  4156  001FCE  EFEC  F00F         	goto	i2u155_40
  4157  001FD2                     i2u155_41:
  4158  001FD2  FFFF               	dw	65535	; assembler added errata NOP
  4159  001FD4  EFCC  F00F         	goto	i2l2494
  4160  001FD8                     i2u155_40:
  4161  001FD8  FFFF               	dw	65535	; assembler added errata NOP
  4162  001FDA  0012               	return		;funcret
  4163  001FDC  FFFF               	dw	65535	; errata NOP
  4164  001FDE                     __end_of_LCD_SendString:
  4165                           	opt callstack 0
  4166                           
  4167 ;; *************** function _LCD_SendChar *****************
  4168 ;; Defined at:
  4169 ;;		line 71 in file "LCD.c"
  4170 ;; Parameters:    Size  Location     Type
  4171 ;;  character       1    wreg     unsigned char 
  4172 ;;  line            1   10[COMRAM] unsigned char 
  4173 ;;  column          1   11[COMRAM] unsigned char 
  4174 ;; Auto vars:     Size  Location     Type
  4175 ;;  character       1   12[COMRAM] unsigned char 
  4176 ;; Return value:  Size  Location     Type
  4177 ;;                  1    wreg      void 
  4178 ;; Registers used:
  4179 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4180 ;; Tracked objects:
  4181 ;;		On entry : 0/0
  4182 ;;		On exit  : 0/0
  4183 ;;		Unchanged: 0/0
  4184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4185 ;;      Params:         2       0       0       0       0       0       0
  4186 ;;      Locals:         1       0       0       0       0       0       0
  4187 ;;      Temps:          0       0       0       0       0       0       0
  4188 ;;      Totals:         3       0       0       0       0       0       0
  4189 ;;Total ram usage:        3 bytes
  4190 ;; Hardware stack levels used:    1
  4191 ;; Hardware stack levels required when called:    3
  4192 ;; This function calls:
  4193 ;;		_LCD_GoTo
  4194 ;;		_LCD_SendData
  4195 ;; This function is called by:
  4196 ;;		_LCD_SendString
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           	psect	text26
  4201  002280                     __ptext26:
  4202                           	opt callstack 0
  4203  002280                     _LCD_SendChar:
  4204                           	opt callstack 0
  4205  002280  FFFF               	dw	65535	; assembler added errata NOP
  4206                           
  4207                           ;incstack = 0
  4208                           ;LCD_SendChar@character stored from wreg
  4209  002282  6E57               	movwf	LCD_SendChar@character^0,c
  4210  002284                     
  4211                           ;LCD.c: 71: void LCD_SendChar(tByte character, tByte line, tByte column);LCD.c: 72: {;LC
      +                          D.c: 74:     LCD_GoTo(line, column+1 );
  4212  002284  2856               	incf	LCD_SendChar@column^0,w,c
  4213  002286  6E4D               	movwf	LCD_GoTo@column^0,c
  4214  002288  5055               	movf	LCD_SendChar@line^0,w,c
  4215  00228A  ECEF  F00F         	call	_LCD_GoTo
  4216  00228E                     
  4217                           ;LCD.c: 75:     LCD_SendData(character);
  4218  00228E  5057               	movf	LCD_SendChar@character^0,w,c
  4219  002290  EC62  F00F         	call	_LCD_SendData
  4220  002294  0012               	return		;funcret
  4221  002296  FFFF               	dw	65535	; errata NOP
  4222  002298                     __end_of_LCD_SendChar:
  4223                           	opt callstack 0
  4224                           
  4225 ;; *************** function _LCD_SendData *****************
  4226 ;; Defined at:
  4227 ;;		line 88 in file "LCD.c"
  4228 ;; Parameters:    Size  Location     Type
  4229 ;;  character       1    wreg     unsigned char 
  4230 ;; Auto vars:     Size  Location     Type
  4231 ;;  character       1    3[COMRAM] unsigned char 
  4232 ;;  High_4          1    2[COMRAM] unsigned char 
  4233 ;;  Low_4           1    1[COMRAM] unsigned char 
  4234 ;; Return value:  Size  Location     Type
  4235 ;;                  1    wreg      void 
  4236 ;; Registers used:
  4237 ;;		wreg, status,2, status,0, cstack
  4238 ;; Tracked objects:
  4239 ;;		On entry : 0/0
  4240 ;;		On exit  : 0/0
  4241 ;;		Unchanged: 0/0
  4242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4243 ;;      Params:         0       0       0       0       0       0       0
  4244 ;;      Locals:         3       0       0       0       0       0       0
  4245 ;;      Temps:          0       0       0       0       0       0       0
  4246 ;;      Totals:         3       0       0       0       0       0       0
  4247 ;;Total ram usage:        3 bytes
  4248 ;; Hardware stack levels used:    1
  4249 ;; Hardware stack levels required when called:    1
  4250 ;; This function calls:
  4251 ;;		i2_LCD_Port
  4252 ;; This function is called by:
  4253 ;;		_LCD_SendChar
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           	psect	text27
  4258  001EC4                     __ptext27:
  4259                           	opt callstack 0
  4260  001EC4                     _LCD_SendData:
  4261                           	opt callstack 0
  4262  001EC4  FFFF               	dw	65535	; assembler added errata NOP
  4263                           
  4264                           ;incstack = 0
  4265                           ;LCD_SendData@character stored from wreg
  4266  001EC6  6E4E               	movwf	LCD_SendData@character^0,c
  4267  001EC8                     
  4268                           ;LCD.c: 88: static void LCD_SendData(tByte character);LCD.c: 89: {;LCD.c: 91:     tByte 
      +                          Low_4,High_4;;LCD.c: 93:     Low_4 = character & 0x0F;
  4269  001EC8  504E               	movf	LCD_SendData@character^0,w,c
  4270  001ECA  0B0F               	andlw	15
  4271  001ECC  6E4C               	movwf	LCD_SendData@Low_4^0,c
  4272                           
  4273                           ;LCD.c: 94:     High_4 = character & 0xF0;
  4274  001ECE  504E               	movf	LCD_SendData@character^0,w,c
  4275  001ED0  0BF0               	andlw	240
  4276  001ED2  6E4D               	movwf	LCD_SendData@High_4^0,c
  4277                           
  4278                           ;LCD.c: 96:     ((((PORTE))) = (((PORTE)) & (~(1 << ((2)))))|(1 << ((2))));
  4279  001ED4  5084               	movf	132,w,c	;volatile
  4280  001ED6  0BFB               	andlw	251
  4281  001ED8  0904               	iorlw	4
  4282  001EDA  6E84               	movwf	132,c	;volatile
  4283  001EDC                     
  4284                           ;LCD.c: 97:     LCD_Port(High_4>>4) ;
  4285  001EDC  384D               	swapf	LCD_SendData@High_4^0,w,c
  4286  001EDE  0B0F               	andlw	15
  4287  001EE0  EC8A  F00D         	call	i2_LCD_Port
  4288  001EE4                     
  4289                           ;LCD.c: 98:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(1 << ((1))));
  4290  001EE4  5084               	movf	132,w,c	;volatile
  4291  001EE6  0BFD               	andlw	253
  4292  001EE8  0902               	iorlw	2
  4293  001EEA  6E84               	movwf	132,c	;volatile
  4294  001EEC                     
  4295                           ;LCD.c: 99:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  4296  001EEC  0E05               	movlw	5
  4297  001EEE                     i2u240_47:
  4298  001EEE  FFFF               	dw	65535	; errata NOP
  4299  001EF0  2EE8               	decfsz	wreg,f,c
  4300  001EF2  D7FD               	bra	i2u240_47
  4301  001EF4                     
  4302                           ;LCD.c: 100:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(0 << ((1))));
  4303  001EF4  5084               	movf	132,w,c	;volatile
  4304  001EF6  0BFD               	andlw	253
  4305  001EF8  6E84               	movwf	132,c	;volatile
  4306  001EFA                     
  4307                           ;LCD.c: 101:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  4308  001EFA  0E05               	movlw	5
  4309  001EFC                     i2u241_47:
  4310  001EFC  FFFF               	dw	65535	; errata NOP
  4311  001EFE  2EE8               	decfsz	wreg,f,c
  4312  001F00  D7FD               	bra	i2u241_47
  4313  001F02                     
  4314                           ;LCD.c: 103:     LCD_Port(Low_4) ;
  4315  001F02  504C               	movf	LCD_SendData@Low_4^0,w,c
  4316  001F04  EC8A  F00D         	call	i2_LCD_Port
  4317                           
  4318                           ;LCD.c: 104:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(1 << ((1))));
  4319  001F08  5084               	movf	132,w,c	;volatile
  4320  001F0A  0BFD               	andlw	253
  4321  001F0C  0902               	iorlw	2
  4322  001F0E  6E84               	movwf	132,c	;volatile
  4323  001F10                     
  4324                           ;LCD.c: 105:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  4325  001F10  0E05               	movlw	5
  4326  001F12                     i2u242_47:
  4327  001F12  FFFF               	dw	65535	; errata NOP
  4328  001F14  2EE8               	decfsz	wreg,f,c
  4329  001F16  D7FD               	bra	i2u242_47
  4330  001F18                     
  4331                           ;LCD.c: 106:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(0 << ((1))));
  4332  001F18  5084               	movf	132,w,c	;volatile
  4333  001F1A  0BFD               	andlw	253
  4334  001F1C  6E84               	movwf	132,c	;volatile
  4335                           
  4336                           ;LCD.c: 107:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  4337  001F1E  0E05               	movlw	5
  4338  001F20                     i2u243_47:
  4339  001F20  FFFF               	dw	65535	; errata NOP
  4340  001F22  2EE8               	decfsz	wreg,f,c
  4341  001F24  D7FD               	bra	i2u243_47
  4342  001F26  0012               	return		;funcret
  4343  001F28  FFFF               	dw	65535	; errata NOP
  4344  001F2A                     __end_of_LCD_SendData:
  4345                           	opt callstack 0
  4346                           
  4347 ;; *************** function _LCD_GoTo *****************
  4348 ;; Defined at:
  4349 ;;		line 138 in file "LCD.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  line            1    wreg     unsigned char 
  4352 ;;  column          1    2[COMRAM] unsigned char 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  line            1    6[COMRAM] unsigned char 
  4355 ;;  address         1    9[COMRAM] unsigned char 
  4356 ;;  High_4          1    8[COMRAM] unsigned char 
  4357 ;;  Low_4           1    7[COMRAM] unsigned char 
  4358 ;; Return value:  Size  Location     Type
  4359 ;;                  1    wreg      void 
  4360 ;; Registers used:
  4361 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4362 ;; Tracked objects:
  4363 ;;		On entry : 0/0
  4364 ;;		On exit  : 0/0
  4365 ;;		Unchanged: 0/0
  4366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4367 ;;      Params:         1       0       0       0       0       0       0
  4368 ;;      Locals:         4       0       0       0       0       0       0
  4369 ;;      Temps:          3       0       0       0       0       0       0
  4370 ;;      Totals:         8       0       0       0       0       0       0
  4371 ;;Total ram usage:        8 bytes
  4372 ;; Hardware stack levels used:    1
  4373 ;; Hardware stack levels required when called:    2
  4374 ;; This function calls:
  4375 ;;		i2_LCD_SendCommand
  4376 ;; This function is called by:
  4377 ;;		_LCD_SendChar
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text28
  4382  001FDE                     __ptext28:
  4383                           	opt callstack 0
  4384  001FDE                     _LCD_GoTo:
  4385                           	opt callstack 0
  4386  001FDE  FFFF               	dw	65535	; assembler added errata NOP
  4387                           
  4388                           ;incstack = 0
  4389                           ;LCD_GoTo@line stored from wreg
  4390  001FE0  6E51               	movwf	LCD_GoTo@line^0,c
  4391  001FE2                     
  4392                           ;LCD.c: 141:  tByte Low_4,High_4;;LCD.c: 144:     address = (line * (0x40)) + column - 1
      +                          ;
  4393  001FE2  5051               	movf	LCD_GoTo@line^0,w,c
  4394  001FE4  0D40               	mullw	64
  4395  001FE6  50F3               	movf	243,w,c
  4396  001FE8  244D               	addwf	LCD_GoTo@column^0,w,c
  4397  001FEA  6E4E               	movwf	??_LCD_GoTo^0,c
  4398  001FEC  044E               	decf	??_LCD_GoTo^0,w,c
  4399  001FEE  6E54               	movwf	LCD_GoTo@address^0,c
  4400  001FF0                     
  4401                           ;LCD.c: 145:     High_4 = ((0x80)|address) >> 4;
  4402  001FF0  5054               	movf	LCD_GoTo@address^0,w,c
  4403  001FF2  6E4E               	movwf	??_LCD_GoTo^0,c
  4404  001FF4  6A4F               	clrf	(??_LCD_GoTo+1)^0,c
  4405  001FF6  0E80               	movlw	128
  4406  001FF8  124E               	iorwf	??_LCD_GoTo^0,f,c
  4407  001FFA  0E00               	movlw	0
  4408  001FFC  124F               	iorwf	(??_LCD_GoTo+1)^0,f,c
  4409  001FFE  0E04               	movlw	4
  4410  002000  6E50               	movwf	(??_LCD_GoTo+2)^0,c
  4411  002002                     i2u134_45:
  4412  002002  FFFF               	dw	65535	; assembler added errata NOP
  4413  002004  344F               	rlcf	(??_LCD_GoTo+1)^0,w,c
  4414  002006  324F               	rrcf	(??_LCD_GoTo+1)^0,f,c
  4415  002008  324E               	rrcf	??_LCD_GoTo^0,f,c
  4416  00200A  2E50               	decfsz	(??_LCD_GoTo+2)^0,f,c
  4417  00200C  EF01  F010         	goto	i2u134_45
  4418  002010  504E               	movf	??_LCD_GoTo^0,w,c
  4419  002012  6E53               	movwf	LCD_GoTo@High_4^0,c
  4420  002014                     
  4421                           ;LCD.c: 146:     Low_4 = ((0x80)|address) & 0x0F;
  4422  002014  5054               	movf	LCD_GoTo@address^0,w,c
  4423  002016  0980               	iorlw	128
  4424  002018  0B0F               	andlw	15
  4425  00201A  6E52               	movwf	LCD_GoTo@Low_4^0,c
  4426  00201C                     
  4427                           ;LCD.c: 149:     LCD_SendCommand(High_4);
  4428  00201C  5053               	movf	LCD_GoTo@High_4^0,w,c
  4429  00201E  ECE1  F010         	call	i2_LCD_SendCommand
  4430  002022                     
  4431                           ;LCD.c: 150:     LCD_SendCommand(Low_4);
  4432  002022  5052               	movf	LCD_GoTo@Low_4^0,w,c
  4433  002024  ECE1  F010         	call	i2_LCD_SendCommand
  4434  002028  0012               	return		;funcret
  4435  00202A  FFFF               	dw	65535	; errata NOP
  4436  00202C                     __end_of_LCD_GoTo:
  4437                           	opt callstack 0
  4438                           
  4439 ;; *************** function i2_LCD_SendCommand *****************
  4440 ;; Defined at:
  4441 ;;		line 58 in file "LCD.c"
  4442 ;; Parameters:    Size  Location     Type
  4443 ;;  command         1    wreg     unsigned char 
  4444 ;; Auto vars:     Size  Location     Type
  4445 ;;  command         1    1[COMRAM] unsigned char 
  4446 ;; Return value:  Size  Location     Type
  4447 ;;                  1    wreg      void 
  4448 ;; Registers used:
  4449 ;;		wreg, status,2, status,0, cstack
  4450 ;; Tracked objects:
  4451 ;;		On entry : 0/0
  4452 ;;		On exit  : 0/0
  4453 ;;		Unchanged: 0/0
  4454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4455 ;;      Params:         0       0       0       0       0       0       0
  4456 ;;      Locals:         1       0       0       0       0       0       0
  4457 ;;      Temps:          0       0       0       0       0       0       0
  4458 ;;      Totals:         1       0       0       0       0       0       0
  4459 ;;Total ram usage:        1 bytes
  4460 ;; Hardware stack levels used:    1
  4461 ;; Hardware stack levels required when called:    1
  4462 ;; This function calls:
  4463 ;;		i2_LCD_Port
  4464 ;; This function is called by:
  4465 ;;		_LCD_Clear
  4466 ;;		_LCD_GoTo
  4467 ;; This function uses a non-reentrant model
  4468 ;;
  4469                           
  4470                           	psect	text29
  4471  0021C2                     __ptext29:
  4472                           	opt callstack 0
  4473  0021C2                     i2_LCD_SendCommand:
  4474                           	opt callstack 0
  4475  0021C2  FFFF               	dw	65535	; assembler added errata NOP
  4476                           
  4477                           ;incstack = 0
  4478                           ;i2LCD_SendCommand@command stored from wreg
  4479  0021C4  6E4C               	movwf	i2LCD_SendCommand@command^0,c
  4480  0021C6                     
  4481                           ;LCD.c: 58: static void LCD_SendCommand(tByte command);LCD.c: 59: {;LCD.c: 62:     ((((P
      +                          ORTE))) = (((PORTE)) & (~(1 << ((2)))))|(0 << ((2))));
  4482  0021C6  5084               	movf	132,w,c	;volatile
  4483  0021C8  0BFB               	andlw	251
  4484  0021CA  6E84               	movwf	132,c	;volatile
  4485  0021CC                     
  4486                           ;LCD.c: 63:     LCD_Port(command);
  4487  0021CC  504C               	movf	i2LCD_SendCommand@command^0,w,c
  4488  0021CE  EC8A  F00D         	call	i2_LCD_Port
  4489  0021D2                     
  4490                           ;LCD.c: 64:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(1 << ((1))));
  4491  0021D2  5084               	movf	132,w,c	;volatile
  4492  0021D4  0BFD               	andlw	253
  4493  0021D6  0902               	iorlw	2
  4494  0021D8  6E84               	movwf	132,c	;volatile
  4495  0021DA                     
  4496                           ;LCD.c: 65:     _delay((unsigned long)((10)*(8000000/4000000.0)));
  4497  0021DA  0E05               	movlw	5
  4498  0021DC                     i2u244_47:
  4499  0021DC  FFFF               	dw	65535	; errata NOP
  4500  0021DE  2EE8               	decfsz	wreg,f,c
  4501  0021E0  D7FD               	bra	i2u244_47
  4502  0021E2                     
  4503                           ;LCD.c: 66:     ((((PORTE))) = (((PORTE)) & (~(1 << ((1)))))|(0 << ((1))));
  4504  0021E2  5084               	movf	132,w,c	;volatile
  4505  0021E4  0BFD               	andlw	253
  4506  0021E6  6E84               	movwf	132,c	;volatile
  4507  0021E8  0012               	return		;funcret
  4508  0021EA  FFFF               	dw	65535	; errata NOP
  4509  0021EC                     __end_ofi2_LCD_SendCommand:
  4510                           	opt callstack 0
  4511                           
  4512 ;; *************** function i2_LCD_Port *****************
  4513 ;; Defined at:
  4514 ;;		line 112 in file "LCD.c"
  4515 ;; Parameters:    Size  Location     Type
  4516 ;;  Data            1    wreg     unsigned char 
  4517 ;; Auto vars:     Size  Location     Type
  4518 ;;  Data            1    0[COMRAM] unsigned char 
  4519 ;; Return value:  Size  Location     Type
  4520 ;;                  1    wreg      void 
  4521 ;; Registers used:
  4522 ;;		wreg, status,2, status,0
  4523 ;; Tracked objects:
  4524 ;;		On entry : 0/0
  4525 ;;		On exit  : 0/0
  4526 ;;		Unchanged: 0/0
  4527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4528 ;;      Params:         0       0       0       0       0       0       0
  4529 ;;      Locals:         1       0       0       0       0       0       0
  4530 ;;      Temps:          0       0       0       0       0       0       0
  4531 ;;      Totals:         1       0       0       0       0       0       0
  4532 ;;Total ram usage:        1 bytes
  4533 ;; Hardware stack levels used:    1
  4534 ;; This function calls:
  4535 ;;		Nothing
  4536 ;; This function is called by:
  4537 ;;		_LCD_SendData
  4538 ;;		i2_LCD_SendCommand
  4539 ;; This function uses a non-reentrant model
  4540 ;;
  4541                           
  4542                           	psect	text30
  4543  001B14                     __ptext30:
  4544                           	opt callstack 0
  4545  001B14                     i2_LCD_Port:
  4546                           	opt callstack 0
  4547  001B14  FFFF               	dw	65535	; assembler added errata NOP
  4548                           
  4549                           ;incstack = 0
  4550                           ;i2LCD_Port@Data stored from wreg
  4551  001B16  6E4B               	movwf	i2LCD_Port@Data^0,c
  4552  001B18                     
  4553                           ;LCD.c: 112: static void LCD_Port(tByte Data);LCD.c: 113: {;LCD.c: 114:     if(Data & 1)
  4554  001B18  A04B               	btfss	i2LCD_Port@Data^0,0,c
  4555  001B1A  EF91  F00D         	goto	i2u128_41
  4556  001B1E  EF94  F00D         	goto	i2u128_40
  4557  001B22                     i2u128_41:
  4558  001B22  FFFF               	dw	65535	; assembler added errata NOP
  4559  001B24  EF9B  F00D         	goto	i2l2232
  4560  001B28                     i2u128_40:
  4561  001B28  FFFF               	dw	65535	; assembler added errata NOP
  4562  001B2A                     
  4563                           ;LCD.c: 115:         (((PORTD)) = ((PORTD) & (~(1 << (4))))|(1 << (4)));
  4564  001B2A  5083               	movf	131,w,c	;volatile
  4565  001B2C  0BEF               	andlw	239
  4566  001B2E  0910               	iorlw	16
  4567  001B30  6E83               	movwf	131,c	;volatile
  4568  001B32  EF9F  F00D         	goto	i2l2234
  4569  001B36                     i2l2232:
  4570  001B36  FFFF               	dw	65535	; assembler added errata NOP
  4571                           
  4572                           ;LCD.c: 117:         (((PORTD)) = ((PORTD) & (~(1 << (4))))|(0 << (4)));
  4573  001B38  5083               	movf	131,w,c	;volatile
  4574  001B3A  0BEF               	andlw	239
  4575  001B3C  6E83               	movwf	131,c	;volatile
  4576  001B3E                     i2l2234:
  4577  001B3E  FFFF               	dw	65535	; assembler added errata NOP
  4578                           
  4579                           ;LCD.c: 118:     if(Data & 2)
  4580  001B40  A24B               	btfss	i2LCD_Port@Data^0,1,c
  4581  001B42  EFA5  F00D         	goto	i2u129_41
  4582  001B46  EFA8  F00D         	goto	i2u129_40
  4583  001B4A                     i2u129_41:
  4584  001B4A  FFFF               	dw	65535	; assembler added errata NOP
  4585  001B4C  EFAF  F00D         	goto	i2l2238
  4586  001B50                     i2u129_40:
  4587  001B50  FFFF               	dw	65535	; assembler added errata NOP
  4588  001B52                     
  4589                           ;LCD.c: 119:         (((PORTD)) = ((PORTD) & (~(1 << (5))))|(1 << (5)));
  4590  001B52  5083               	movf	131,w,c	;volatile
  4591  001B54  0BDF               	andlw	223
  4592  001B56  0920               	iorlw	32
  4593  001B58  6E83               	movwf	131,c	;volatile
  4594  001B5A  EFB3  F00D         	goto	i2l2240
  4595  001B5E                     i2l2238:
  4596  001B5E  FFFF               	dw	65535	; assembler added errata NOP
  4597                           
  4598                           ;LCD.c: 121:         (((PORTD)) = ((PORTD) & (~(1 << (5))))|(0 << (5)));
  4599  001B60  5083               	movf	131,w,c	;volatile
  4600  001B62  0BDF               	andlw	223
  4601  001B64  6E83               	movwf	131,c	;volatile
  4602  001B66                     i2l2240:
  4603  001B66  FFFF               	dw	65535	; assembler added errata NOP
  4604                           
  4605                           ;LCD.c: 122:     if(Data & 4)
  4606  001B68  A44B               	btfss	i2LCD_Port@Data^0,2,c
  4607  001B6A  EFB9  F00D         	goto	i2u130_41
  4608  001B6E  EFBC  F00D         	goto	i2u130_40
  4609  001B72                     i2u130_41:
  4610  001B72  FFFF               	dw	65535	; assembler added errata NOP
  4611  001B74  EFC3  F00D         	goto	i2l2244
  4612  001B78                     i2u130_40:
  4613  001B78  FFFF               	dw	65535	; assembler added errata NOP
  4614  001B7A                     
  4615                           ;LCD.c: 123:         (((PORTD)) = ((PORTD) & (~(1 << (6))))|(1 << (6)));
  4616  001B7A  5083               	movf	131,w,c	;volatile
  4617  001B7C  0BBF               	andlw	191
  4618  001B7E  0940               	iorlw	64
  4619  001B80  6E83               	movwf	131,c	;volatile
  4620  001B82  EFC7  F00D         	goto	i2l2246
  4621  001B86                     i2l2244:
  4622  001B86  FFFF               	dw	65535	; assembler added errata NOP
  4623                           
  4624                           ;LCD.c: 125:         (((PORTD)) = ((PORTD) & (~(1 << (6))))|(0 << (6)));
  4625  001B88  5083               	movf	131,w,c	;volatile
  4626  001B8A  0BBF               	andlw	191
  4627  001B8C  6E83               	movwf	131,c	;volatile
  4628  001B8E                     i2l2246:
  4629  001B8E  FFFF               	dw	65535	; assembler added errata NOP
  4630                           
  4631                           ;LCD.c: 126:     if(Data & 8)
  4632  001B90  A64B               	btfss	i2LCD_Port@Data^0,3,c
  4633  001B92  EFCD  F00D         	goto	i2u131_41
  4634  001B96  EFD0  F00D         	goto	i2u131_40
  4635  001B9A                     i2u131_41:
  4636  001B9A  FFFF               	dw	65535	; assembler added errata NOP
  4637  001B9C  EFD7  F00D         	goto	i2l2250
  4638  001BA0                     i2u131_40:
  4639  001BA0  FFFF               	dw	65535	; assembler added errata NOP
  4640  001BA2                     
  4641                           ;LCD.c: 127:         (((PORTD)) = ((PORTD) & (~(1 << (7))))|(1 << (7)));
  4642  001BA2  5083               	movf	131,w,c	;volatile
  4643  001BA4  0B7F               	andlw	127
  4644  001BA6  0980               	iorlw	128
  4645  001BA8  6E83               	movwf	131,c	;volatile
  4646  001BAA  EFDB  F00D         	goto	i2l155
  4647  001BAE                     i2l2250:
  4648  001BAE  FFFF               	dw	65535	; assembler added errata NOP
  4649                           
  4650                           ;LCD.c: 129:         (((PORTD)) = ((PORTD) & (~(1 << (7))))|(0 << (7)));
  4651  001BB0  5083               	movf	131,w,c	;volatile
  4652  001BB2  0B7F               	andlw	127
  4653  001BB4  6E83               	movwf	131,c	;volatile
  4654  001BB6                     i2l155:
  4655  001BB6  FFFF               	dw	65535	; assembler added errata NOP
  4656  001BB8  0012               	return		;funcret
  4657  001BBA  FFFF               	dw	65535	; errata NOP
  4658  001BBC                     __end_ofi2_LCD_Port:
  4659                           	opt callstack 0
  4660                           
  4661 ;; *************** function _Keypad_Update *****************
  4662 ;; Defined at:
  4663 ;;		line 42 in file "keypad.c"
  4664 ;; Parameters:    Size  Location     Type
  4665 ;;		None
  4666 ;; Auto vars:     Size  Location     Type
  4667 ;;  Key             1    4[COMRAM] unsigned char 
  4668 ;; Return value:  Size  Location     Type
  4669 ;;                  1    wreg      void 
  4670 ;; Registers used:
  4671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4672 ;; Tracked objects:
  4673 ;;		On entry : 0/0
  4674 ;;		On exit  : 0/0
  4675 ;;		Unchanged: 0/0
  4676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4677 ;;      Params:         0       0       0       0       0       0       0
  4678 ;;      Locals:         1       0       0       0       0       0       0
  4679 ;;      Temps:          0       0       0       0       0       0       0
  4680 ;;      Totals:         1       0       0       0       0       0       0
  4681 ;;Total ram usage:        1 bytes
  4682 ;; Hardware stack levels used:    1
  4683 ;; Hardware stack levels required when called:    1
  4684 ;; This function calls:
  4685 ;;		_Keypad_Scan
  4686 ;; This function is called by:
  4687 ;;		_TMR_Update
  4688 ;; This function uses a non-reentrant model
  4689 ;;
  4690                           
  4691                           	psect	text31
  4692  001BBC                     __ptext31:
  4693                           	opt callstack 0
  4694  001BBC                     _Keypad_Update:
  4695                           	opt callstack 0
  4696  001BBC  FFFF               	dw	65535	; assembler added errata NOP
  4697  001BBE                     
  4698                           ;keypad.c: 44:  tByte Key;;keypad.c: 45:     static tWord Keypad_Update_Counter = 0;;key
      +                          pad.c: 47:     Keypad_Update_Counter += (10);
  4699  001BBE  0E0A               	movlw	10
  4700  001BC0  260E               	addwf	Keypad_Update@Keypad_Update_Counter^0,f,c
  4701  001BC2  0E00               	movlw	0
  4702  001BC4  220F               	addwfc	(Keypad_Update@Keypad_Update_Counter+1)^0,f,c
  4703                           
  4704                           ;keypad.c: 48:     if(Keypad_Update_Counter != (50))
  4705  001BC6  0E32               	movlw	50
  4706  001BC8  180E               	xorwf	Keypad_Update@Keypad_Update_Counter^0,w,c
  4707  001BCA  100F               	iorwf	(Keypad_Update@Keypad_Update_Counter+1)^0,w,c
  4708  001BCC  B4D8               	btfsc	status,2,c
  4709  001BCE  EFEB  F00D         	goto	i2u229_41
  4710  001BD2  EFEE  F00D         	goto	i2u229_40
  4711  001BD6                     i2u229_41:
  4712  001BD6  FFFF               	dw	65535	; assembler added errata NOP
  4713  001BD8  EFF1  F00D         	goto	i2l2988
  4714  001BDC                     i2u229_40:
  4715  001BDC  FFFF               	dw	65535	; assembler added errata NOP
  4716  001BDE  EF2C  F00E         	goto	i2l443
  4717  001BE2                     i2l2988:
  4718  001BE2  FFFF               	dw	65535	; assembler added errata NOP
  4719                           
  4720                           ;keypad.c: 52:     Keypad_Update_Counter = 0;
  4721  001BE4  0E00               	movlw	0
  4722  001BE6  6E0F               	movwf	(Keypad_Update@Keypad_Update_Counter+1)^0,c
  4723  001BE8  0E00               	movlw	0
  4724  001BEA  6E0E               	movwf	Keypad_Update@Keypad_Update_Counter^0,c
  4725  001BEC                     
  4726                           ;keypad.c: 54:  if(Keypad_Scan (&Key) == 0)
  4727  001BEC  0E4F               	movlw	low Keypad_Update@Key
  4728  001BEE  6E4B               	movwf	Keypad_Scan@pKey^0,c
  4729  001BF0  0E00               	movlw	high Keypad_Update@Key
  4730  001BF2  6E4C               	movwf	(Keypad_Scan@pKey+1)^0,c
  4731  001BF4  EC67  F009         	call	_Keypad_Scan	;wreg free
  4732  001BF8  0900               	iorlw	0
  4733  001BFA  A4D8               	btfss	status,2,c
  4734  001BFC  EF02  F00E         	goto	i2u230_41
  4735  001C00  EF05  F00E         	goto	i2u230_40
  4736  001C04                     i2u230_41:
  4737  001C04  FFFF               	dw	65535	; assembler added errata NOP
  4738  001C06  EF08  F00E         	goto	i2l2994
  4739  001C0A                     i2u230_40:
  4740  001C0A  FFFF               	dw	65535	; assembler added errata NOP
  4741  001C0C  EF2C  F00E         	goto	i2l443
  4742  001C10                     i2l2994:
  4743  001C10  FFFF               	dw	65535	; assembler added errata NOP
  4744                           
  4745                           ;keypad.c: 60:     if(KEYPAD_reading_index == KEYPAD_writing_index)
  4746  001C12  501A               	movf	_KEYPAD_writing_index^0,w,c
  4747  001C14  181B               	xorwf	_KEYPAD_reading_index^0,w,c
  4748  001C16  A4D8               	btfss	status,2,c
  4749  001C18  EF10  F00E         	goto	i2u231_41
  4750  001C1C  EF13  F00E         	goto	i2u231_40
  4751  001C20                     i2u231_41:
  4752  001C20  FFFF               	dw	65535	; assembler added errata NOP
  4753  001C22  EF18  F00E         	goto	i2l2998
  4754  001C26                     i2u231_40:
  4755  001C26  FFFF               	dw	65535	; assembler added errata NOP
  4756  001C28                     
  4757                           ;keypad.c: 61:     {;keypad.c: 62:         KEYPAD_reading_index = 0;
  4758  001C28  0E00               	movlw	0
  4759  001C2A  6E1B               	movwf	_KEYPAD_reading_index^0,c
  4760                           
  4761                           ;keypad.c: 63:         KEYPAD_writing_index = 0;
  4762  001C2C  0E00               	movlw	0
  4763  001C2E  6E1A               	movwf	_KEYPAD_writing_index^0,c
  4764  001C30                     i2l2998:
  4765  001C30  FFFF               	dw	65535	; assembler added errata NOP
  4766                           
  4767                           ;keypad.c: 67:     Keypad_Recv_Buffer[KEYPAD_writing_index] = Key;
  4768  001C32  0E01               	movlw	low _Keypad_Recv_Buffer
  4769  001C34  241A               	addwf	_KEYPAD_writing_index^0,w,c
  4770  001C36  6ED9               	movwf	fsr2l,c
  4771  001C38  6ADA               	clrf	fsr2h,c
  4772  001C3A  0E00               	movlw	high _Keypad_Recv_Buffer
  4773  001C3C  22DA               	addwfc	fsr2h,f,c
  4774  001C3E  C04F  FFDF         	movff	Keypad_Update@Key,indf2
  4775  001C42                     
  4776                           ;keypad.c: 69:     if(KEYPAD_writing_index < (6) )
  4777  001C42  0E06               	movlw	6
  4778  001C44  601A               	cpfslt	_KEYPAD_writing_index^0,c
  4779  001C46  EF27  F00E         	goto	i2u232_41
  4780  001C4A  EF2A  F00E         	goto	i2u232_40
  4781  001C4E                     i2u232_41:
  4782  001C4E  FFFF               	dw	65535	; assembler added errata NOP
  4783  001C50  EF2C  F00E         	goto	i2l443
  4784  001C54                     i2u232_40:
  4785  001C54  FFFF               	dw	65535	; assembler added errata NOP
  4786  001C56                     
  4787                           ;keypad.c: 70:     {;keypad.c: 71:         KEYPAD_writing_index ++;
  4788  001C56  2A1A               	incf	_KEYPAD_writing_index^0,f,c
  4789  001C58                     i2l443:
  4790  001C58  FFFF               	dw	65535	; assembler added errata NOP
  4791  001C5A  0012               	return		;funcret
  4792  001C5C  FFFF               	dw	65535	; errata NOP
  4793  001C5E                     __end_of_Keypad_Update:
  4794                           	opt callstack 0
  4795                           
  4796 ;; *************** function _Keypad_Scan *****************
  4797 ;; Defined at:
  4798 ;;		line 91 in file "keypad.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  pKey            2    0[COMRAM] PTR unsigned char 
  4801 ;;		 -> Keypad_Update@Key(1), 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  Key             1    3[COMRAM] unsigned char 
  4804 ;; Return value:  Size  Location     Type
  4805 ;;                  1    wreg      unsigned char 
  4806 ;; Registers used:
  4807 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4808 ;; Tracked objects:
  4809 ;;		On entry : 0/0
  4810 ;;		On exit  : 0/0
  4811 ;;		Unchanged: 0/0
  4812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4813 ;;      Params:         2       0       0       0       0       0       0
  4814 ;;      Locals:         1       0       0       0       0       0       0
  4815 ;;      Temps:          1       0       0       0       0       0       0
  4816 ;;      Totals:         4       0       0       0       0       0       0
  4817 ;;Total ram usage:        4 bytes
  4818 ;; Hardware stack levels used:    1
  4819 ;; This function calls:
  4820 ;;		Nothing
  4821 ;; This function is called by:
  4822 ;;		_Keypad_Update
  4823 ;; This function uses a non-reentrant model
  4824 ;;
  4825                           
  4826                           	psect	text32
  4827  0012CE                     __ptext32:
  4828                           	opt callstack 0
  4829  0012CE                     _Keypad_Scan:
  4830                           	opt callstack 0
  4831  0012CE  FFFF               	dw	65535	; assembler added errata NOP
  4832  0012D0                     
  4833                           ;keypad.c: 91: static tByte Keypad_Scan (tByte *pKey);keypad.c: 92: {;keypad.c: 93:  sta
      +                          tic tByte Old_Key ;;keypad.c: 95:  tByte Key = (15);
  4834  0012D0  0E0F               	movlw	15
  4835  0012D2  6E4E               	movwf	Keypad_Scan@Key^0,c
  4836  0012D4                     
  4837                           ;keypad.c: 99:  ((((PORTB))) = (((PORTB)) & (~(1 << ((0)))))|(0 << ((0))));
  4838  0012D4  5081               	movf	129,w,c	;volatile
  4839  0012D6  0BFE               	andlw	254
  4840  0012D8  6E81               	movwf	129,c	;volatile
  4841  0012DA                     
  4842                           ;keypad.c: 100:     ((((PORTB))) = (((PORTB)) & (~(1 << ((1)))))|(1 << ((1))));
  4843  0012DA  5081               	movf	129,w,c	;volatile
  4844  0012DC  0BFD               	andlw	253
  4845  0012DE  0902               	iorlw	2
  4846  0012E0  6E81               	movwf	129,c	;volatile
  4847  0012E2                     
  4848                           ;keypad.c: 101:     ((((PORTB))) = (((PORTB)) & (~(1 << ((2)))))|(1 << ((2))));
  4849  0012E2  5081               	movf	129,w,c	;volatile
  4850  0012E4  0BFB               	andlw	251
  4851  0012E6  0904               	iorlw	4
  4852  0012E8  6E81               	movwf	129,c	;volatile
  4853  0012EA                     
  4854                           ;keypad.c: 103:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  4855  0012EA  0E19               	movlw	25
  4856  0012EC                     i2u245_47:
  4857  0012EC  FFFF               	dw	65535	; errata NOP
  4858  0012EE  2EE8               	decfsz	wreg,f,c
  4859  0012F0  D7FD               	bra	i2u245_47
  4860  0012F2                     
  4861                           ;keypad.c: 104:     if((((((PORTD))) & (1 << ((3)))) >> (((3)))) == 0)
  4862  0012F2  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  4863  0012F6  90D8               	bcf	status,0,c
  4864  0012F8  324D               	rrcf	??_Keypad_Scan^0,f,c
  4865  0012FA  90D8               	bcf	status,0,c
  4866  0012FC  324D               	rrcf	??_Keypad_Scan^0,f,c
  4867  0012FE  90D8               	bcf	status,0,c
  4868  001300  324D               	rrcf	??_Keypad_Scan^0,f,c
  4869  001302  B04D               	btfsc	??_Keypad_Scan^0,0,c
  4870  001304  EF86  F009         	goto	i2u160_41
  4871  001308  EF89  F009         	goto	i2u160_40
  4872  00130C                     i2u160_41:
  4873  00130C  FFFF               	dw	65535	; assembler added errata NOP
  4874  00130E  EF8C  F009         	goto	i2l2556
  4875  001312                     i2u160_40:
  4876  001312  FFFF               	dw	65535	; assembler added errata NOP
  4877  001314                     
  4878                           ;keypad.c: 105:     {;keypad.c: 106:         Key = key_1;
  4879  001314  0E01               	movlw	1
  4880  001316  6E4E               	movwf	Keypad_Scan@Key^0,c
  4881  001318                     i2l2556:
  4882  001318  FFFF               	dw	65535	; assembler added errata NOP
  4883                           
  4884                           ;keypad.c: 108:     if((((((PORTD))) & (1 << ((2)))) >> (((2)))) == 0)
  4885  00131A  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  4886  00131E  90D8               	bcf	status,0,c
  4887  001320  324D               	rrcf	??_Keypad_Scan^0,f,c
  4888  001322  90D8               	bcf	status,0,c
  4889  001324  324D               	rrcf	??_Keypad_Scan^0,f,c
  4890  001326  B04D               	btfsc	??_Keypad_Scan^0,0,c
  4891  001328  EF98  F009         	goto	i2u161_41
  4892  00132C  EF9B  F009         	goto	i2u161_40
  4893  001330                     i2u161_41:
  4894  001330  FFFF               	dw	65535	; assembler added errata NOP
  4895  001332  EF9E  F009         	goto	i2l2560
  4896  001336                     i2u161_40:
  4897  001336  FFFF               	dw	65535	; assembler added errata NOP
  4898  001338                     
  4899                           ;keypad.c: 109:     {;keypad.c: 110:         Key = key_4;
  4900  001338  0E04               	movlw	4
  4901  00133A  6E4E               	movwf	Keypad_Scan@Key^0,c
  4902  00133C                     i2l2560:
  4903  00133C  FFFF               	dw	65535	; assembler added errata NOP
  4904                           
  4905                           ;keypad.c: 112:     if((((((PORTD))) & (1 << ((1)))) >> (((1)))) == 0)
  4906  00133E  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  4907  001342  90D8               	bcf	status,0,c
  4908  001344  324D               	rrcf	??_Keypad_Scan^0,f,c
  4909  001346  B04D               	btfsc	??_Keypad_Scan^0,0,c
  4910  001348  EFA8  F009         	goto	i2u162_41
  4911  00134C  EFAB  F009         	goto	i2u162_40
  4912  001350                     i2u162_41:
  4913  001350  FFFF               	dw	65535	; assembler added errata NOP
  4914  001352  EFAE  F009         	goto	i2l2564
  4915  001356                     i2u162_40:
  4916  001356  FFFF               	dw	65535	; assembler added errata NOP
  4917  001358                     
  4918                           ;keypad.c: 113:     {;keypad.c: 114:         Key = key_7;
  4919  001358  0E07               	movlw	7
  4920  00135A  6E4E               	movwf	Keypad_Scan@Key^0,c
  4921  00135C                     i2l2564:
  4922  00135C  FFFF               	dw	65535	; assembler added errata NOP
  4923                           
  4924                           ;keypad.c: 116:     if((((((PORTD))) & (1 << ((0)))) >> (((0)))) == 0)
  4925  00135E  B083               	btfsc	131,0,c	;volatile
  4926  001360  EFB4  F009         	goto	i2u163_41
  4927  001364  EFB7  F009         	goto	i2u163_40
  4928  001368                     i2u163_41:
  4929  001368  FFFF               	dw	65535	; assembler added errata NOP
  4930  00136A  EFBA  F009         	goto	i2l2568
  4931  00136E                     i2u163_40:
  4932  00136E  FFFF               	dw	65535	; assembler added errata NOP
  4933  001370                     
  4934                           ;keypad.c: 117:     {;keypad.c: 118:         Key = KEY_CANCEL;
  4935  001370  0E0A               	movlw	10
  4936  001372  6E4E               	movwf	Keypad_Scan@Key^0,c
  4937  001374                     i2l2568:
  4938  001374  FFFF               	dw	65535	; assembler added errata NOP
  4939                           
  4940                           ;keypad.c: 121:  ((((PORTB))) = (((PORTB)) & (~(1 << ((0)))))|(1 << ((0))));
  4941  001376  5081               	movf	129,w,c	;volatile
  4942  001378  0BFE               	andlw	254
  4943  00137A  0901               	iorlw	1
  4944  00137C  6E81               	movwf	129,c	;volatile
  4945  00137E                     
  4946                           ;keypad.c: 122:     ((((PORTB))) = (((PORTB)) & (~(1 << ((1)))))|(0 << ((1))));
  4947  00137E  5081               	movf	129,w,c	;volatile
  4948  001380  0BFD               	andlw	253
  4949  001382  6E81               	movwf	129,c	;volatile
  4950  001384                     
  4951                           ;keypad.c: 123:     ((((PORTB))) = (((PORTB)) & (~(1 << ((2)))))|(1 << ((2))));
  4952  001384  5081               	movf	129,w,c	;volatile
  4953  001386  0BFB               	andlw	251
  4954  001388  0904               	iorlw	4
  4955  00138A  6E81               	movwf	129,c	;volatile
  4956  00138C                     
  4957                           ;keypad.c: 124:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  4958  00138C  0E19               	movlw	25
  4959  00138E                     i2u246_47:
  4960  00138E  FFFF               	dw	65535	; errata NOP
  4961  001390  2EE8               	decfsz	wreg,f,c
  4962  001392  D7FD               	bra	i2u246_47
  4963  001394                     
  4964                           ;keypad.c: 128:     if((((((PORTD))) & (1 << ((3)))) >> (((3)))) == 0)
  4965  001394  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  4966  001398  90D8               	bcf	status,0,c
  4967  00139A  324D               	rrcf	??_Keypad_Scan^0,f,c
  4968  00139C  90D8               	bcf	status,0,c
  4969  00139E  324D               	rrcf	??_Keypad_Scan^0,f,c
  4970  0013A0  90D8               	bcf	status,0,c
  4971  0013A2  324D               	rrcf	??_Keypad_Scan^0,f,c
  4972  0013A4  B04D               	btfsc	??_Keypad_Scan^0,0,c
  4973  0013A6  EFD7  F009         	goto	i2u164_41
  4974  0013AA  EFDA  F009         	goto	i2u164_40
  4975  0013AE                     i2u164_41:
  4976  0013AE  FFFF               	dw	65535	; assembler added errata NOP
  4977  0013B0  EFDD  F009         	goto	i2l2580
  4978  0013B4                     i2u164_40:
  4979  0013B4  FFFF               	dw	65535	; assembler added errata NOP
  4980  0013B6                     
  4981                           ;keypad.c: 129:     {;keypad.c: 130:         Key = key_2;
  4982  0013B6  0E02               	movlw	2
  4983  0013B8  6E4E               	movwf	Keypad_Scan@Key^0,c
  4984  0013BA                     i2l2580:
  4985  0013BA  FFFF               	dw	65535	; assembler added errata NOP
  4986                           
  4987                           ;keypad.c: 132:     if((((((PORTD))) & (1 << ((2)))) >> (((2)))) == 0)
  4988  0013BC  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  4989  0013C0  90D8               	bcf	status,0,c
  4990  0013C2  324D               	rrcf	??_Keypad_Scan^0,f,c
  4991  0013C4  90D8               	bcf	status,0,c
  4992  0013C6  324D               	rrcf	??_Keypad_Scan^0,f,c
  4993  0013C8  B04D               	btfsc	??_Keypad_Scan^0,0,c
  4994  0013CA  EFE9  F009         	goto	i2u165_41
  4995  0013CE  EFEC  F009         	goto	i2u165_40
  4996  0013D2                     i2u165_41:
  4997  0013D2  FFFF               	dw	65535	; assembler added errata NOP
  4998  0013D4  EFEF  F009         	goto	i2l2584
  4999  0013D8                     i2u165_40:
  5000  0013D8  FFFF               	dw	65535	; assembler added errata NOP
  5001  0013DA                     
  5002                           ;keypad.c: 133:     {;keypad.c: 134:         Key = key_5;
  5003  0013DA  0E05               	movlw	5
  5004  0013DC  6E4E               	movwf	Keypad_Scan@Key^0,c
  5005  0013DE                     i2l2584:
  5006  0013DE  FFFF               	dw	65535	; assembler added errata NOP
  5007                           
  5008                           ;keypad.c: 136:     if((((((PORTD))) & (1 << ((1)))) >> (((1)))) == 0)
  5009  0013E0  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  5010  0013E4  90D8               	bcf	status,0,c
  5011  0013E6  324D               	rrcf	??_Keypad_Scan^0,f,c
  5012  0013E8  B04D               	btfsc	??_Keypad_Scan^0,0,c
  5013  0013EA  EFF9  F009         	goto	i2u166_41
  5014  0013EE  EFFC  F009         	goto	i2u166_40
  5015  0013F2                     i2u166_41:
  5016  0013F2  FFFF               	dw	65535	; assembler added errata NOP
  5017  0013F4  EFFF  F009         	goto	i2l2588
  5018  0013F8                     i2u166_40:
  5019  0013F8  FFFF               	dw	65535	; assembler added errata NOP
  5020  0013FA                     
  5021                           ;keypad.c: 137:     {;keypad.c: 138:         Key = key_8;
  5022  0013FA  0E08               	movlw	8
  5023  0013FC  6E4E               	movwf	Keypad_Scan@Key^0,c
  5024  0013FE                     i2l2588:
  5025  0013FE  FFFF               	dw	65535	; assembler added errata NOP
  5026                           
  5027                           ;keypad.c: 140:     if((((((PORTD))) & (1 << ((0)))) >> (((0)))) == 0)
  5028  001400  B083               	btfsc	131,0,c	;volatile
  5029  001402  EF05  F00A         	goto	i2u167_41
  5030  001406  EF08  F00A         	goto	i2u167_40
  5031  00140A                     i2u167_41:
  5032  00140A  FFFF               	dw	65535	; assembler added errata NOP
  5033  00140C  EF0B  F00A         	goto	i2l2592
  5034  001410                     i2u167_40:
  5035  001410  FFFF               	dw	65535	; assembler added errata NOP
  5036  001412                     
  5037                           ;keypad.c: 141:     {;keypad.c: 142:         Key = key_0;
  5038  001412  0E00               	movlw	0
  5039  001414  6E4E               	movwf	Keypad_Scan@Key^0,c
  5040  001416                     i2l2592:
  5041  001416  FFFF               	dw	65535	; assembler added errata NOP
  5042                           
  5043                           ;keypad.c: 145:  ((((PORTB))) = (((PORTB)) & (~(1 << ((1)))))|(1 << ((1))));
  5044  001418  5081               	movf	129,w,c	;volatile
  5045  00141A  0BFD               	andlw	253
  5046  00141C  0902               	iorlw	2
  5047  00141E  6E81               	movwf	129,c	;volatile
  5048  001420                     
  5049                           ;keypad.c: 146:     ((((PORTB))) = (((PORTB)) & (~(1 << ((1)))))|(1 << ((1))));
  5050  001420  5081               	movf	129,w,c	;volatile
  5051  001422  0BFD               	andlw	253
  5052  001424  0902               	iorlw	2
  5053  001426  6E81               	movwf	129,c	;volatile
  5054  001428                     
  5055                           ;keypad.c: 147:     ((((PORTB))) = (((PORTB)) & (~(1 << ((2)))))|(0 << ((2))));
  5056  001428  5081               	movf	129,w,c	;volatile
  5057  00142A  0BFB               	andlw	251
  5058  00142C  6E81               	movwf	129,c	;volatile
  5059  00142E                     
  5060                           ;keypad.c: 149:     _delay((unsigned long)((50)*(8000000/4000000.0)));
  5061  00142E  0E19               	movlw	25
  5062  001430                     i2u247_47:
  5063  001430  FFFF               	dw	65535	; errata NOP
  5064  001432  2EE8               	decfsz	wreg,f,c
  5065  001434  D7FD               	bra	i2u247_47
  5066  001436                     
  5067                           ;keypad.c: 151:     if((((((PORTD))) & (1 << ((3)))) >> (((3)))) == 0)
  5068  001436  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  5069  00143A  90D8               	bcf	status,0,c
  5070  00143C  324D               	rrcf	??_Keypad_Scan^0,f,c
  5071  00143E  90D8               	bcf	status,0,c
  5072  001440  324D               	rrcf	??_Keypad_Scan^0,f,c
  5073  001442  90D8               	bcf	status,0,c
  5074  001444  324D               	rrcf	??_Keypad_Scan^0,f,c
  5075  001446  B04D               	btfsc	??_Keypad_Scan^0,0,c
  5076  001448  EF28  F00A         	goto	i2u168_41
  5077  00144C  EF2B  F00A         	goto	i2u168_40
  5078  001450                     i2u168_41:
  5079  001450  FFFF               	dw	65535	; assembler added errata NOP
  5080  001452  EF2E  F00A         	goto	i2l2604
  5081  001456                     i2u168_40:
  5082  001456  FFFF               	dw	65535	; assembler added errata NOP
  5083  001458                     
  5084                           ;keypad.c: 152:     {;keypad.c: 153:         Key = key_3;
  5085  001458  0E03               	movlw	3
  5086  00145A  6E4E               	movwf	Keypad_Scan@Key^0,c
  5087  00145C                     i2l2604:
  5088  00145C  FFFF               	dw	65535	; assembler added errata NOP
  5089                           
  5090                           ;keypad.c: 155:     if((((((PORTD))) & (1 << ((2)))) >> (((2)))) == 0)
  5091  00145E  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  5092  001462  90D8               	bcf	status,0,c
  5093  001464  324D               	rrcf	??_Keypad_Scan^0,f,c
  5094  001466  90D8               	bcf	status,0,c
  5095  001468  324D               	rrcf	??_Keypad_Scan^0,f,c
  5096  00146A  B04D               	btfsc	??_Keypad_Scan^0,0,c
  5097  00146C  EF3A  F00A         	goto	i2u169_41
  5098  001470  EF3D  F00A         	goto	i2u169_40
  5099  001474                     i2u169_41:
  5100  001474  FFFF               	dw	65535	; assembler added errata NOP
  5101  001476  EF40  F00A         	goto	i2l2608
  5102  00147A                     i2u169_40:
  5103  00147A  FFFF               	dw	65535	; assembler added errata NOP
  5104  00147C                     
  5105                           ;keypad.c: 156:     {;keypad.c: 157:         Key = key_6;
  5106  00147C  0E06               	movlw	6
  5107  00147E  6E4E               	movwf	Keypad_Scan@Key^0,c
  5108  001480                     i2l2608:
  5109  001480  FFFF               	dw	65535	; assembler added errata NOP
  5110                           
  5111                           ;keypad.c: 159:     if((((((PORTD))) & (1 << ((1)))) >> (((1)))) == 0)
  5112  001482  CF83 F04D          	movff	3971,??_Keypad_Scan	;volatile
  5113  001486  90D8               	bcf	status,0,c
  5114  001488  324D               	rrcf	??_Keypad_Scan^0,f,c
  5115  00148A  B04D               	btfsc	??_Keypad_Scan^0,0,c
  5116  00148C  EF4A  F00A         	goto	i2u170_41
  5117  001490  EF4D  F00A         	goto	i2u170_40
  5118  001494                     i2u170_41:
  5119  001494  FFFF               	dw	65535	; assembler added errata NOP
  5120  001496  EF50  F00A         	goto	i2l2612
  5121  00149A                     i2u170_40:
  5122  00149A  FFFF               	dw	65535	; assembler added errata NOP
  5123  00149C                     
  5124                           ;keypad.c: 160:     {;keypad.c: 161:         Key = key_9;
  5125  00149C  0E09               	movlw	9
  5126  00149E  6E4E               	movwf	Keypad_Scan@Key^0,c
  5127  0014A0                     i2l2612:
  5128  0014A0  FFFF               	dw	65535	; assembler added errata NOP
  5129                           
  5130                           ;keypad.c: 163:     if((((((PORTD))) & (1 << ((0)))) >> (((0)))) == 0)
  5131  0014A2  B083               	btfsc	131,0,c	;volatile
  5132  0014A4  EF56  F00A         	goto	i2u171_41
  5133  0014A8  EF59  F00A         	goto	i2u171_40
  5134  0014AC                     i2u171_41:
  5135  0014AC  FFFF               	dw	65535	; assembler added errata NOP
  5136  0014AE  EF5C  F00A         	goto	i2l2616
  5137  0014B2                     i2u171_40:
  5138  0014B2  FFFF               	dw	65535	; assembler added errata NOP
  5139  0014B4                     
  5140                           ;keypad.c: 164:     {;keypad.c: 165:         Key = KEY_START;
  5141  0014B4  0E0B               	movlw	11
  5142  0014B6  6E4E               	movwf	Keypad_Scan@Key^0,c
  5143  0014B8                     i2l2616:
  5144  0014B8  FFFF               	dw	65535	; assembler added errata NOP
  5145                           
  5146                           ;keypad.c: 169:     if(Key == (15))
  5147  0014BA  0E0F               	movlw	15
  5148  0014BC  184E               	xorwf	Keypad_Scan@Key^0,w,c
  5149  0014BE  A4D8               	btfss	status,2,c
  5150  0014C0  EF64  F00A         	goto	i2u172_41
  5151  0014C4  EF67  F00A         	goto	i2u172_40
  5152  0014C8                     i2u172_41:
  5153  0014C8  FFFF               	dw	65535	; assembler added errata NOP
  5154  0014CA  EF70  F00A         	goto	i2l2624
  5155  0014CE                     i2u172_40:
  5156  0014CE  FFFF               	dw	65535	; assembler added errata NOP
  5157  0014D0                     
  5158                           ;keypad.c: 170:     {;keypad.c: 171:         Old_Key = (15);
  5159  0014D0  0E0F               	movlw	15
  5160  0014D2  6E19               	movwf	Keypad_Scan@Old_Key^0,c
  5161                           
  5162                           ;keypad.c: 172:         Last_Valid_Key = (15);
  5163  0014D4  0E0F               	movlw	15
  5164  0014D6  6E72               	movwf	_Last_Valid_Key^0,c
  5165  0014D8                     i2l2620:
  5166  0014D8  FFFF               	dw	65535	; assembler added errata NOP
  5167                           
  5168                           ;keypad.c: 173:         return 0;
  5169  0014DA  0E00               	movlw	0
  5170  0014DC  EF97  F00A         	goto	i2l468
  5171  0014E0                     i2l2624:
  5172  0014E0  FFFF               	dw	65535	; assembler added errata NOP
  5173                           
  5174                           ;keypad.c: 175:     if(Key == Old_Key)
  5175  0014E2  5019               	movf	Keypad_Scan@Old_Key^0,w,c
  5176  0014E4  184E               	xorwf	Keypad_Scan@Key^0,w,c
  5177  0014E6  A4D8               	btfss	status,2,c
  5178  0014E8  EF78  F00A         	goto	i2u173_41
  5179  0014EC  EF7B  F00A         	goto	i2u173_40
  5180  0014F0                     i2u173_41:
  5181  0014F0  FFFF               	dw	65535	; assembler added errata NOP
  5182  0014F2  EF92  F00A         	goto	i2l469
  5183  0014F6                     i2u173_40:
  5184  0014F6  FFFF               	dw	65535	; assembler added errata NOP
  5185  0014F8                     
  5186                           ;keypad.c: 176:     {;keypad.c: 179:         if(Key != Last_Valid_Key)
  5187  0014F8  5072               	movf	_Last_Valid_Key^0,w,c
  5188  0014FA  184E               	xorwf	Keypad_Scan@Key^0,w,c
  5189  0014FC  B4D8               	btfsc	status,2,c
  5190  0014FE  EF83  F00A         	goto	i2u174_41
  5191  001502  EF86  F00A         	goto	i2u174_40
  5192  001506                     i2u174_41:
  5193  001506  FFFF               	dw	65535	; assembler added errata NOP
  5194  001508  EF92  F00A         	goto	i2l469
  5195  00150C                     i2u174_40:
  5196  00150C  FFFF               	dw	65535	; assembler added errata NOP
  5197  00150E                     
  5198                           ;keypad.c: 180:         {;keypad.c: 182:             *pKey = Key;
  5199  00150E  C04B  FFD9         	movff	Keypad_Scan@pKey,fsr2l
  5200  001512  C04C  FFDA         	movff	Keypad_Scan@pKey+1,fsr2h
  5201  001516  C04E  FFDF         	movff	Keypad_Scan@Key,indf2
  5202  00151A                     
  5203                           ;keypad.c: 183:             Last_Valid_Key = Key;
  5204  00151A  C04E  F072         	movff	Keypad_Scan@Key,_Last_Valid_Key
  5205  00151E                     
  5206                           ;keypad.c: 184:             return 1;
  5207  00151E  0E01               	movlw	1
  5208  001520  EF97  F00A         	goto	i2l468
  5209  001524                     i2l469:
  5210  001524  FFFF               	dw	65535	; assembler added errata NOP
  5211                           
  5212                           ;keypad.c: 189:     Old_Key = Key;
  5213  001526  C04E  F019         	movff	Keypad_Scan@Key,Keypad_Scan@Old_Key
  5214  00152A  EF6C  F00A         	goto	i2l2620
  5215  00152E                     i2l468:
  5216  00152E  FFFF               	dw	65535	; assembler added errata NOP
  5217  001530  0012               	return		;funcret
  5218  001532  FFFF               	dw	65535	; errata NOP
  5219  001534                     __end_of_Keypad_Scan:
  5220                           	opt callstack 0
  5221                           
  5222 ;; *************** function _Disp_Update *****************
  5223 ;; Defined at:
  5224 ;;		line 41 in file "Disp.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;  time            2   23[COMRAM] struct .
  5229 ;; Return value:  Size  Location     Type
  5230 ;;                  1    wreg      void 
  5231 ;; Registers used:
  5232 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5238 ;;      Params:         0       0       0       0       0       0       0
  5239 ;;      Locals:         2       0       0       0       0       0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0
  5241 ;;      Totals:         2       0       0       0       0       0       0
  5242 ;;Total ram usage:        2 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    4
  5245 ;; This function calls:
  5246 ;;		_Disp_Time
  5247 ;;		_TIM_GetTime
  5248 ;;		___awdiv
  5249 ;;		___awmod
  5250 ;; This function is called by:
  5251 ;;		_TMR_Update
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           	psect	text33
  5256  001C5E                     __ptext33:
  5257                           	opt callstack 0
  5258  001C5E                     _Disp_Update:
  5259                           	opt callstack 0
  5260  001C5E  FFFF               	dw	65535	; assembler added errata NOP
  5261  001C60                     
  5262                           ;Disp.c: 43:     tTIM_Time time;;Disp.c: 44:     TIM_GetTime(&time);
  5263  001C60  0E62               	movlw	low Disp_Update@time
  5264  001C62  6E4B               	movwf	TIM_GetTime@time^0,c
  5265  001C64  0E00               	movlw	high Disp_Update@time
  5266  001C66  6E4C               	movwf	(TIM_GetTime@time+1)^0,c
  5267  001C68  EC08  F011         	call	_TIM_GetTime	;wreg free
  5268  001C6C                     
  5269                           ;Disp.c: 46:     Min_Unit = (time.minutes % 10);
  5270  001C6C  C063  F04B         	movff	Disp_Update@time+1,___awmod@dividend
  5271  001C70  6A4C               	clrf	(___awmod@dividend+1)^0,c
  5272  001C72  0E00               	movlw	0
  5273  001C74  6E4E               	movwf	(___awmod@divisor+1)^0,c
  5274  001C76  0E0A               	movlw	10
  5275  001C78  6E4D               	movwf	___awmod@divisor^0,c
  5276  001C7A  EC08  F00C         	call	___awmod	;wreg free
  5277  001C7E  504B               	movf	?___awmod^0,w,c
  5278  001C80  6E23               	movwf	_Min_Unit^0,c
  5279  001C82                     
  5280                           ;Disp.c: 47:     Min_Ten = (time.minutes / 10);
  5281  001C82  C063  F04B         	movff	Disp_Update@time+1,___awdiv@dividend
  5282  001C86  6A4C               	clrf	(___awdiv@dividend+1)^0,c
  5283  001C88  0E00               	movlw	0
  5284  001C8A  6E4E               	movwf	(___awdiv@divisor+1)^0,c
  5285  001C8C  0E0A               	movlw	10
  5286  001C8E  6E4D               	movwf	___awdiv@divisor^0,c
  5287  001C90  EC90  F00B         	call	___awdiv	;wreg free
  5288  001C94  504B               	movf	?___awdiv^0,w,c
  5289  001C96  6E22               	movwf	_Min_Ten^0,c
  5290  001C98                     
  5291                           ;Disp.c: 48:     Sec_Unit = (time.seconds % 10);
  5292  001C98  C062  F04B         	movff	Disp_Update@time,___awmod@dividend
  5293  001C9C  6A4C               	clrf	(___awmod@dividend+1)^0,c
  5294  001C9E  0E00               	movlw	0
  5295  001CA0  6E4E               	movwf	(___awmod@divisor+1)^0,c
  5296  001CA2  0E0A               	movlw	10
  5297  001CA4  6E4D               	movwf	___awmod@divisor^0,c
  5298  001CA6  EC08  F00C         	call	___awmod	;wreg free
  5299  001CAA  504B               	movf	?___awmod^0,w,c
  5300  001CAC  6E21               	movwf	_Sec_Unit^0,c
  5301  001CAE                     
  5302                           ;Disp.c: 49:     Sec_Ten = (time.seconds / 10);
  5303  001CAE  C062  F04B         	movff	Disp_Update@time,___awdiv@dividend
  5304  001CB2  6A4C               	clrf	(___awdiv@dividend+1)^0,c
  5305  001CB4  0E00               	movlw	0
  5306  001CB6  6E4E               	movwf	(___awdiv@divisor+1)^0,c
  5307  001CB8  0E0A               	movlw	10
  5308  001CBA  6E4D               	movwf	___awdiv@divisor^0,c
  5309  001CBC  EC90  F00B         	call	___awdiv	;wreg free
  5310  001CC0  504B               	movf	?___awdiv^0,w,c
  5311  001CC2  6E20               	movwf	_Sec_Ten^0,c
  5312  001CC4                     
  5313                           ;Disp.c: 51:     static tByte Disp_Counter = 10;;Disp.c: 52:     Disp_Counter += (10);
  5314  001CC4  0E0A               	movlw	10
  5315  001CC6  2673               	addwf	Disp_Update@Disp_Counter^0,f,c
  5316  001CC8                     
  5317                           ;Disp.c: 53:     if(Disp_Counter != (50))
  5318  001CC8  0E32               	movlw	50
  5319  001CCA  1873               	xorwf	Disp_Update@Disp_Counter^0,w,c
  5320  001CCC  B4D8               	btfsc	status,2,c
  5321  001CCE  EF6B  F00E         	goto	i2u228_41
  5322  001CD2  EF6E  F00E         	goto	i2u228_40
  5323  001CD6                     i2u228_41:
  5324  001CD6  FFFF               	dw	65535	; assembler added errata NOP
  5325  001CD8  EF71  F00E         	goto	i2l2980
  5326  001CDC                     i2u228_40:
  5327  001CDC  FFFF               	dw	65535	; assembler added errata NOP
  5328  001CDE  EF77  F00E         	goto	i2l246
  5329  001CE2                     i2l2980:
  5330  001CE2  FFFF               	dw	65535	; assembler added errata NOP
  5331                           
  5332                           ;Disp.c: 57:     Disp_Counter = 0;
  5333  001CE4  0E00               	movlw	0
  5334  001CE6  6E73               	movwf	Disp_Update@Disp_Counter^0,c
  5335  001CE8                     
  5336                           ;Disp.c: 59:     Disp_Time(Disp_Current_State);
  5337  001CE8  501E               	movf	_Disp_Current_State^0,w,c
  5338  001CEA  EC9A  F00A         	call	_Disp_Time
  5339  001CEE                     i2l246:
  5340  001CEE  FFFF               	dw	65535	; assembler added errata NOP
  5341  001CF0  0012               	return		;funcret
  5342  001CF2  FFFF               	dw	65535	; errata NOP
  5343  001CF4                     __end_of_Disp_Update:
  5344                           	opt callstack 0
  5345                           
  5346 ;; *************** function ___awmod *****************
  5347 ;; Defined at:
  5348 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
  5349 ;; Parameters:    Size  Location     Type
  5350 ;;  dividend        2    0[COMRAM] int 
  5351 ;;  divisor         2    2[COMRAM] int 
  5352 ;; Auto vars:     Size  Location     Type
  5353 ;;  sign            1    5[COMRAM] unsigned char 
  5354 ;;  counter         1    4[COMRAM] unsigned char 
  5355 ;; Return value:  Size  Location     Type
  5356 ;;                  2    0[COMRAM] int 
  5357 ;; Registers used:
  5358 ;;		wreg, status,2, status,0
  5359 ;; Tracked objects:
  5360 ;;		On entry : 0/0
  5361 ;;		On exit  : 0/0
  5362 ;;		Unchanged: 0/0
  5363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5364 ;;      Params:         4       0       0       0       0       0       0
  5365 ;;      Locals:         2       0       0       0       0       0       0
  5366 ;;      Temps:          0       0       0       0       0       0       0
  5367 ;;      Totals:         6       0       0       0       0       0       0
  5368 ;;Total ram usage:        6 bytes
  5369 ;; Hardware stack levels used:    1
  5370 ;; This function calls:
  5371 ;;		Nothing
  5372 ;; This function is called by:
  5373 ;;		_Disp_Update
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text34
  5378  001810                     __ptext34:
  5379                           	opt callstack 0
  5380  001810                     ___awmod:
  5381                           	opt callstack 0
  5382  001810  FFFF               	dw	65535	; assembler added errata NOP
  5383  001812  0E00               	movlw	0
  5384  001814  6E50               	movwf	___awmod@sign^0,c
  5385  001816  BE4C               	btfsc	(___awmod@dividend+1)^0,7,c
  5386  001818  EF13  F00C         	goto	i2u181_40
  5387  00181C  EF10  F00C         	goto	i2u181_41
  5388  001820                     i2u181_41:
  5389  001820  FFFF               	dw	65535	; assembler added errata NOP
  5390  001822  EF1A  F00C         	goto	i2l2692
  5391  001826                     i2u181_40:
  5392  001826  FFFF               	dw	65535	; assembler added errata NOP
  5393  001828  6C4B               	negf	___awmod@dividend^0,c
  5394  00182A  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  5395  00182C  B0D8               	btfsc	status,0,c
  5396  00182E  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  5397  001830  0E01               	movlw	1
  5398  001832  6E50               	movwf	___awmod@sign^0,c
  5399  001834                     i2l2692:
  5400  001834  FFFF               	dw	65535	; assembler added errata NOP
  5401  001836  BE4E               	btfsc	(___awmod@divisor+1)^0,7,c
  5402  001838  EF23  F00C         	goto	i2u182_40
  5403  00183C  EF20  F00C         	goto	i2u182_41
  5404  001840                     i2u182_41:
  5405  001840  FFFF               	dw	65535	; assembler added errata NOP
  5406  001842  EF28  F00C         	goto	i2l2696
  5407  001846                     i2u182_40:
  5408  001846  FFFF               	dw	65535	; assembler added errata NOP
  5409  001848  6C4D               	negf	___awmod@divisor^0,c
  5410  00184A  1E4E               	comf	(___awmod@divisor+1)^0,f,c
  5411  00184C  B0D8               	btfsc	status,0,c
  5412  00184E  2A4E               	incf	(___awmod@divisor+1)^0,f,c
  5413  001850                     i2l2696:
  5414  001850  FFFF               	dw	65535	; assembler added errata NOP
  5415  001852  504D               	movf	___awmod@divisor^0,w,c
  5416  001854  104E               	iorwf	(___awmod@divisor+1)^0,w,c
  5417  001856  B4D8               	btfsc	status,2,c
  5418  001858  EF30  F00C         	goto	i2u183_41
  5419  00185C  EF33  F00C         	goto	i2u183_40
  5420  001860                     i2u183_41:
  5421  001860  FFFF               	dw	65535	; assembler added errata NOP
  5422  001862  EF60  F00C         	goto	i2l2712
  5423  001866                     i2u183_40:
  5424  001866  FFFF               	dw	65535	; assembler added errata NOP
  5425  001868  0E01               	movlw	1
  5426  00186A  6E4F               	movwf	___awmod@counter^0,c
  5427  00186C  EF3D  F00C         	goto	i2l2702
  5428  001870                     i2l2700:
  5429  001870  FFFF               	dw	65535	; assembler added errata NOP
  5430  001872  90D8               	bcf	status,0,c
  5431  001874  364D               	rlcf	___awmod@divisor^0,f,c
  5432  001876  364E               	rlcf	(___awmod@divisor+1)^0,f,c
  5433  001878  2A4F               	incf	___awmod@counter^0,f,c
  5434  00187A                     i2l2702:
  5435  00187A  FFFF               	dw	65535	; assembler added errata NOP
  5436  00187C  AE4E               	btfss	(___awmod@divisor+1)^0,7,c
  5437  00187E  EF43  F00C         	goto	i2u184_41
  5438  001882  EF46  F00C         	goto	i2u184_40
  5439  001886                     i2u184_41:
  5440  001886  FFFF               	dw	65535	; assembler added errata NOP
  5441  001888  EF38  F00C         	goto	i2l2700
  5442  00188C                     i2u184_40:
  5443  00188C  FFFF               	dw	65535	; assembler added errata NOP
  5444  00188E                     i2l2704:
  5445  00188E  FFFF               	dw	65535	; assembler added errata NOP
  5446  001890  504D               	movf	___awmod@divisor^0,w,c
  5447  001892  5C4B               	subwf	___awmod@dividend^0,w,c
  5448  001894  504E               	movf	(___awmod@divisor+1)^0,w,c
  5449  001896  584C               	subwfb	(___awmod@dividend+1)^0,w,c
  5450  001898  A0D8               	btfss	status,0,c
  5451  00189A  EF51  F00C         	goto	i2u185_41
  5452  00189E  EF54  F00C         	goto	i2u185_40
  5453  0018A2                     i2u185_41:
  5454  0018A2  FFFF               	dw	65535	; assembler added errata NOP
  5455  0018A4  EF59  F00C         	goto	i2l2708
  5456  0018A8                     i2u185_40:
  5457  0018A8  FFFF               	dw	65535	; assembler added errata NOP
  5458  0018AA  504D               	movf	___awmod@divisor^0,w,c
  5459  0018AC  5E4B               	subwf	___awmod@dividend^0,f,c
  5460  0018AE  504E               	movf	(___awmod@divisor+1)^0,w,c
  5461  0018B0  5A4C               	subwfb	(___awmod@dividend+1)^0,f,c
  5462  0018B2                     i2l2708:
  5463  0018B2  FFFF               	dw	65535	; assembler added errata NOP
  5464  0018B4  90D8               	bcf	status,0,c
  5465  0018B6  324E               	rrcf	(___awmod@divisor+1)^0,f,c
  5466  0018B8  324D               	rrcf	___awmod@divisor^0,f,c
  5467  0018BA  2E4F               	decfsz	___awmod@counter^0,f,c
  5468  0018BC  EF47  F00C         	goto	i2l2704
  5469  0018C0                     i2l2712:
  5470  0018C0  FFFF               	dw	65535	; assembler added errata NOP
  5471  0018C2  5050               	movf	___awmod@sign^0,w,c
  5472  0018C4  B4D8               	btfsc	status,2,c
  5473  0018C6  EF67  F00C         	goto	i2u186_41
  5474  0018CA  EF6A  F00C         	goto	i2u186_40
  5475  0018CE                     i2u186_41:
  5476  0018CE  FFFF               	dw	65535	; assembler added errata NOP
  5477  0018D0  EF6F  F00C         	goto	i2l2716
  5478  0018D4                     i2u186_40:
  5479  0018D4  FFFF               	dw	65535	; assembler added errata NOP
  5480  0018D6  6C4B               	negf	___awmod@dividend^0,c
  5481  0018D8  1E4C               	comf	(___awmod@dividend+1)^0,f,c
  5482  0018DA  B0D8               	btfsc	status,0,c
  5483  0018DC  2A4C               	incf	(___awmod@dividend+1)^0,f,c
  5484  0018DE                     i2l2716:
  5485  0018DE  FFFF               	dw	65535	; assembler added errata NOP
  5486  0018E0  C04B  F04B         	movff	___awmod@dividend,?___awmod
  5487  0018E4  C04C  F04C         	movff	___awmod@dividend+1,?___awmod+1
  5488  0018E8  0012               	return		;funcret
  5489  0018EA  FFFF               	dw	65535	; errata NOP
  5490  0018EC                     __end_of___awmod:
  5491                           	opt callstack 0
  5492                           
  5493 ;; *************** function ___awdiv *****************
  5494 ;; Defined at:
  5495 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;  dividend        2    0[COMRAM] int 
  5498 ;;  divisor         2    2[COMRAM] int 
  5499 ;; Auto vars:     Size  Location     Type
  5500 ;;  quotient        2    6[COMRAM] int 
  5501 ;;  sign            1    5[COMRAM] unsigned char 
  5502 ;;  counter         1    4[COMRAM] unsigned char 
  5503 ;; Return value:  Size  Location     Type
  5504 ;;                  2    0[COMRAM] int 
  5505 ;; Registers used:
  5506 ;;		wreg, status,2, status,0
  5507 ;; Tracked objects:
  5508 ;;		On entry : 0/0
  5509 ;;		On exit  : 0/0
  5510 ;;		Unchanged: 0/0
  5511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5512 ;;      Params:         4       0       0       0       0       0       0
  5513 ;;      Locals:         4       0       0       0       0       0       0
  5514 ;;      Temps:          0       0       0       0       0       0       0
  5515 ;;      Totals:         8       0       0       0       0       0       0
  5516 ;;Total ram usage:        8 bytes
  5517 ;; Hardware stack levels used:    1
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_Disp_Update
  5522 ;; This function uses a non-reentrant model
  5523 ;;
  5524                           
  5525                           	psect	text35
  5526  001720                     __ptext35:
  5527                           	opt callstack 0
  5528  001720                     ___awdiv:
  5529                           	opt callstack 0
  5530  001720  FFFF               	dw	65535	; assembler added errata NOP
  5531  001722  0E00               	movlw	0
  5532  001724  6E50               	movwf	___awdiv@sign^0,c
  5533  001726  BE4E               	btfsc	(___awdiv@divisor+1)^0,7,c
  5534  001728  EF9B  F00B         	goto	i2u175_40
  5535  00172C  EF98  F00B         	goto	i2u175_41
  5536  001730                     i2u175_41:
  5537  001730  FFFF               	dw	65535	; assembler added errata NOP
  5538  001732  EFA2  F00B         	goto	i2l2648
  5539  001736                     i2u175_40:
  5540  001736  FFFF               	dw	65535	; assembler added errata NOP
  5541  001738  6C4D               	negf	___awdiv@divisor^0,c
  5542  00173A  1E4E               	comf	(___awdiv@divisor+1)^0,f,c
  5543  00173C  B0D8               	btfsc	status,0,c
  5544  00173E  2A4E               	incf	(___awdiv@divisor+1)^0,f,c
  5545  001740  0E01               	movlw	1
  5546  001742  6E50               	movwf	___awdiv@sign^0,c
  5547  001744                     i2l2648:
  5548  001744  FFFF               	dw	65535	; assembler added errata NOP
  5549  001746  BE4C               	btfsc	(___awdiv@dividend+1)^0,7,c
  5550  001748  EFAB  F00B         	goto	i2u176_40
  5551  00174C  EFA8  F00B         	goto	i2u176_41
  5552  001750                     i2u176_41:
  5553  001750  FFFF               	dw	65535	; assembler added errata NOP
  5554  001752  EFB2  F00B         	goto	i2l2654
  5555  001756                     i2u176_40:
  5556  001756  FFFF               	dw	65535	; assembler added errata NOP
  5557  001758  6C4B               	negf	___awdiv@dividend^0,c
  5558  00175A  1E4C               	comf	(___awdiv@dividend+1)^0,f,c
  5559  00175C  B0D8               	btfsc	status,0,c
  5560  00175E  2A4C               	incf	(___awdiv@dividend+1)^0,f,c
  5561  001760  0E01               	movlw	1
  5562  001762  1A50               	xorwf	___awdiv@sign^0,f,c
  5563  001764                     i2l2654:
  5564  001764  FFFF               	dw	65535	; assembler added errata NOP
  5565  001766  0E00               	movlw	0
  5566  001768  6E52               	movwf	(___awdiv@quotient+1)^0,c
  5567  00176A  0E00               	movlw	0
  5568  00176C  6E51               	movwf	___awdiv@quotient^0,c
  5569  00176E  504D               	movf	___awdiv@divisor^0,w,c
  5570  001770  104E               	iorwf	(___awdiv@divisor+1)^0,w,c
  5571  001772  B4D8               	btfsc	status,2,c
  5572  001774  EFBE  F00B         	goto	i2u177_41
  5573  001778  EFC1  F00B         	goto	i2u177_40
  5574  00177C                     i2u177_41:
  5575  00177C  FFFF               	dw	65535	; assembler added errata NOP
  5576  00177E  EFF2  F00B         	goto	i2l2676
  5577  001782                     i2u177_40:
  5578  001782  FFFF               	dw	65535	; assembler added errata NOP
  5579  001784  0E01               	movlw	1
  5580  001786  6E4F               	movwf	___awdiv@counter^0,c
  5581  001788  EFCB  F00B         	goto	i2l2662
  5582  00178C                     i2l2660:
  5583  00178C  FFFF               	dw	65535	; assembler added errata NOP
  5584  00178E  90D8               	bcf	status,0,c
  5585  001790  364D               	rlcf	___awdiv@divisor^0,f,c
  5586  001792  364E               	rlcf	(___awdiv@divisor+1)^0,f,c
  5587  001794  2A4F               	incf	___awdiv@counter^0,f,c
  5588  001796                     i2l2662:
  5589  001796  FFFF               	dw	65535	; assembler added errata NOP
  5590  001798  AE4E               	btfss	(___awdiv@divisor+1)^0,7,c
  5591  00179A  EFD1  F00B         	goto	i2u178_41
  5592  00179E  EFD4  F00B         	goto	i2u178_40
  5593  0017A2                     i2u178_41:
  5594  0017A2  FFFF               	dw	65535	; assembler added errata NOP
  5595  0017A4  EFC6  F00B         	goto	i2l2660
  5596  0017A8                     i2u178_40:
  5597  0017A8  FFFF               	dw	65535	; assembler added errata NOP
  5598  0017AA                     i2l2664:
  5599  0017AA  FFFF               	dw	65535	; assembler added errata NOP
  5600  0017AC  90D8               	bcf	status,0,c
  5601  0017AE  3651               	rlcf	___awdiv@quotient^0,f,c
  5602  0017B0  3652               	rlcf	(___awdiv@quotient+1)^0,f,c
  5603  0017B2  504D               	movf	___awdiv@divisor^0,w,c
  5604  0017B4  5C4B               	subwf	___awdiv@dividend^0,w,c
  5605  0017B6  504E               	movf	(___awdiv@divisor+1)^0,w,c
  5606  0017B8  584C               	subwfb	(___awdiv@dividend+1)^0,w,c
  5607  0017BA  A0D8               	btfss	status,0,c
  5608  0017BC  EFE2  F00B         	goto	i2u179_41
  5609  0017C0  EFE5  F00B         	goto	i2u179_40
  5610  0017C4                     i2u179_41:
  5611  0017C4  FFFF               	dw	65535	; assembler added errata NOP
  5612  0017C6  EFEB  F00B         	goto	i2l2672
  5613  0017CA                     i2u179_40:
  5614  0017CA  FFFF               	dw	65535	; assembler added errata NOP
  5615  0017CC  504D               	movf	___awdiv@divisor^0,w,c
  5616  0017CE  5E4B               	subwf	___awdiv@dividend^0,f,c
  5617  0017D0  504E               	movf	(___awdiv@divisor+1)^0,w,c
  5618  0017D2  5A4C               	subwfb	(___awdiv@dividend+1)^0,f,c
  5619  0017D4  8051               	bsf	___awdiv@quotient^0,0,c
  5620  0017D6                     i2l2672:
  5621  0017D6  FFFF               	dw	65535	; assembler added errata NOP
  5622  0017D8  90D8               	bcf	status,0,c
  5623  0017DA  324E               	rrcf	(___awdiv@divisor+1)^0,f,c
  5624  0017DC  324D               	rrcf	___awdiv@divisor^0,f,c
  5625  0017DE  2E4F               	decfsz	___awdiv@counter^0,f,c
  5626  0017E0  EFD5  F00B         	goto	i2l2664
  5627  0017E4                     i2l2676:
  5628  0017E4  FFFF               	dw	65535	; assembler added errata NOP
  5629  0017E6  5050               	movf	___awdiv@sign^0,w,c
  5630  0017E8  B4D8               	btfsc	status,2,c
  5631  0017EA  EFF9  F00B         	goto	i2u180_41
  5632  0017EE  EFFC  F00B         	goto	i2u180_40
  5633  0017F2                     i2u180_41:
  5634  0017F2  FFFF               	dw	65535	; assembler added errata NOP
  5635  0017F4  EF01  F00C         	goto	i2l2680
  5636  0017F8                     i2u180_40:
  5637  0017F8  FFFF               	dw	65535	; assembler added errata NOP
  5638  0017FA  6C51               	negf	___awdiv@quotient^0,c
  5639  0017FC  1E52               	comf	(___awdiv@quotient+1)^0,f,c
  5640  0017FE  B0D8               	btfsc	status,0,c
  5641  001800  2A52               	incf	(___awdiv@quotient+1)^0,f,c
  5642  001802                     i2l2680:
  5643  001802  FFFF               	dw	65535	; assembler added errata NOP
  5644  001804  C051  F04B         	movff	___awdiv@quotient,?___awdiv
  5645  001808  C052  F04C         	movff	___awdiv@quotient+1,?___awdiv+1
  5646  00180C  0012               	return		;funcret
  5647  00180E  FFFF               	dw	65535	; errata NOP
  5648  001810                     __end_of___awdiv:
  5649                           	opt callstack 0
  5650                           
  5651 ;; *************** function _TIM_GetTime *****************
  5652 ;; Defined at:
  5653 ;;		line 23 in file "Time.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  time            2    0[COMRAM] PTR struct .
  5656 ;;		 -> Disp_Update@time(2), 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;		None
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  1    wreg      void 
  5661 ;; Registers used:
  5662 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5668 ;;      Params:         2       0       0       0       0       0       0
  5669 ;;      Locals:         0       0       0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0
  5671 ;;      Totals:         2       0       0       0       0       0       0
  5672 ;;Total ram usage:        2 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; This function calls:
  5675 ;;		Nothing
  5676 ;; This function is called by:
  5677 ;;		_Disp_Update
  5678 ;; This function uses a non-reentrant model
  5679 ;;
  5680                           
  5681                           	psect	text36
  5682  002210                     __ptext36:
  5683                           	opt callstack 0
  5684  002210                     _TIM_GetTime:
  5685                           	opt callstack 0
  5686  002210  FFFF               	dw	65535	; assembler added errata NOP
  5687  002212                     
  5688                           ;Time.c: 23: void TIM_GetTime(tTIM_Time * time);Time.c: 24: {;Time.c: 25:     time->seco
      +                          nds = TIM_CurrentTime.seconds;
  5689  002212  C04B  FFD9         	movff	TIM_GetTime@time,fsr2l
  5690  002216  C04C  FFDA         	movff	TIM_GetTime@time+1,fsr2h
  5691  00221A  C010  FFDF         	movff	_TIM_CurrentTime,indf2
  5692  00221E                     
  5693                           ;Time.c: 26:     time->minutes = TIM_CurrentTime.minutes;
  5694  00221E  EE20 F001          	lfsr	2,1
  5695  002222  504B               	movf	TIM_GetTime@time^0,w,c
  5696  002224  26D9               	addwf	fsr2l,f,c
  5697  002226  504C               	movf	(TIM_GetTime@time+1)^0,w,c
  5698  002228  22DA               	addwfc	fsr2h,f,c
  5699  00222A  C011  FFDF         	movff	_TIM_CurrentTime+1,indf2
  5700  00222E  0012               	return		;funcret
  5701  002230  FFFF               	dw	65535	; errata NOP
  5702  002232                     __end_of_TIM_GetTime:
  5703                           	opt callstack 0
  5704                           
  5705 ;; *************** function _Disp_Time *****************
  5706 ;; Defined at:
  5707 ;;		line 64 in file "Disp.c"
  5708 ;; Parameters:    Size  Location     Type
  5709 ;;  Disp_Current    1    wreg     enum E2600
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  Disp_Current    1   22[COMRAM] enum E2600
  5712 ;; Return value:  Size  Location     Type
  5713 ;;                  1    wreg      void 
  5714 ;; Registers used:
  5715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5716 ;; Tracked objects:
  5717 ;;		On entry : 0/0
  5718 ;;		On exit  : 0/0
  5719 ;;		Unchanged: 0/0
  5720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5721 ;;      Params:         0       0       0       0       0       0       0
  5722 ;;      Locals:         1       0       0       0       0       0       0
  5723 ;;      Temps:          2       0       0       0       0       0       0
  5724 ;;      Totals:         3       0       0       0       0       0       0
  5725 ;;Total ram usage:        3 bytes
  5726 ;; Hardware stack levels used:    1
  5727 ;; Hardware stack levels required when called:    3
  5728 ;; This function calls:
  5729 ;;		_Disp_and_Blink_Time
  5730 ;;		_Set_LCD_BUFFER1
  5731 ;;		_Set_LCD_BUFFER2
  5732 ;; This function is called by:
  5733 ;;		_Disp_Update
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text37
  5738  001534                     __ptext37:
  5739                           	opt callstack 0
  5740  001534                     _Disp_Time:
  5741                           	opt callstack 0
  5742  001534  FFFF               	dw	65535	; assembler added errata NOP
  5743                           
  5744                           ;incstack = 0
  5745                           ;Disp_Time@Disp_Current_State stored from wreg
  5746  001536  6E61               	movwf	Disp_Time@Disp_Current_State^0,c
  5747  001538                     
  5748                           ;Disp.c: 64: static void Disp_Time (tMW_State Disp_Current_State);Disp.c: 65: {;Disp.c: 
      +                          66:     switch (Disp_Current_State)
  5749  001538  EF62  F00B         	goto	i2l2536
  5750  00153C                     i2l2506:
  5751  00153C  FFFF               	dw	65535	; assembler added errata NOP
  5752                           
  5753                           ;Disp.c: 70:             Set_LCD_BUFFER1("    WELCOME !   ");
  5754  00153E  0E25               	movlw	low STR_3
  5755  001540  6E55               	movwf	Set_LCD_BUFFER1@BUF_1^0,c
  5756  001542  0E06               	movlw	high STR_3
  5757  001544  6E56               	movwf	(Set_LCD_BUFFER1@BUF_1+1)^0,c
  5758  001546  EC33  F011         	call	_Set_LCD_BUFFER1	;wreg free
  5759                           
  5760                           ;Disp.c: 71:             Set_LCD_BUFFER2("  Press Any Key ");
  5761  00154A  0E69               	movlw	low STR_4
  5762  00154C  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  5763  00154E  0E06               	movlw	high STR_4
  5764  001550  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  5765  001552  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  5766                           
  5767                           ;Disp.c: 73:             break;
  5768  001556  EF8D  F00B         	goto	i2l267
  5769  00155A                     i2l2508:
  5770  00155A  FFFF               	dw	65535	; assembler added errata NOP
  5771                           
  5772                           ;Disp.c: 77:             Disp_and_Blink_Time (Min_Ten ,Min_Unit ,Sec_Ten ,Sec_Unit ,BLIN
      +                          K_MIN_TENS);
  5773  00155C  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5774  001560  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5775  001564  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5776  001568  0E00               	movlw	0
  5777  00156A  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5778  00156C  5022               	movf	_Min_Ten^0,w,c
  5779  00156E  EC6F  F006         	call	_Disp_and_Blink_Time
  5780                           
  5781                           ;Disp.c: 79:             break;
  5782  001572  EF8D  F00B         	goto	i2l267
  5783  001576                     i2l2510:
  5784  001576  FFFF               	dw	65535	; assembler added errata NOP
  5785                           
  5786                           ;Disp.c: 83:             Disp_and_Blink_Time (Min_Ten ,Min_Unit ,Sec_Ten ,Sec_Unit ,BLIN
      +                          K_MIN_UNITS);
  5787  001578  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5788  00157C  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5789  001580  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5790  001584  0E01               	movlw	1
  5791  001586  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5792  001588  5022               	movf	_Min_Ten^0,w,c
  5793  00158A  EC6F  F006         	call	_Disp_and_Blink_Time
  5794                           
  5795                           ;Disp.c: 85:             break;
  5796  00158E  EF8D  F00B         	goto	i2l267
  5797  001592                     i2l2512:
  5798  001592  FFFF               	dw	65535	; assembler added errata NOP
  5799                           
  5800                           ;Disp.c: 89:             Disp_and_Blink_Time (Min_Ten ,Min_Unit ,Sec_Ten ,Sec_Unit ,BLIN
      +                          K_SEC_TENS);
  5801  001594  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5802  001598  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5803  00159C  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5804  0015A0  0E02               	movlw	2
  5805  0015A2  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5806  0015A4  5022               	movf	_Min_Ten^0,w,c
  5807  0015A6  EC6F  F006         	call	_Disp_and_Blink_Time
  5808                           
  5809                           ;Disp.c: 91:             break;
  5810  0015AA  EF8D  F00B         	goto	i2l267
  5811  0015AE                     i2l2514:
  5812  0015AE  FFFF               	dw	65535	; assembler added errata NOP
  5813                           
  5814                           ;Disp.c: 95:             Disp_and_Blink_Time (Min_Ten ,Min_Unit ,Sec_Ten ,Sec_Unit ,BLIN
      +                          K_SEC_UNITS);
  5815  0015B0  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5816  0015B4  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5817  0015B8  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5818  0015BC  0E03               	movlw	3
  5819  0015BE  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5820  0015C0  5022               	movf	_Min_Ten^0,w,c
  5821  0015C2  EC6F  F006         	call	_Disp_and_Blink_Time
  5822                           
  5823                           ;Disp.c: 97:             break;
  5824  0015C6  EF8D  F00B         	goto	i2l267
  5825  0015CA                     i2l2516:
  5826  0015CA  FFFF               	dw	65535	; assembler added errata NOP
  5827                           
  5828                           ;Disp.c: 101:             if(Disp_Current_Count_State == Count_Time)
  5829  0015CC  0E02               	movlw	2
  5830  0015CE  181F               	xorwf	_Disp_Current_Count_State^0,w,c
  5831  0015D0  A4D8               	btfss	status,2,c
  5832  0015D2  EFED  F00A         	goto	i2u156_41
  5833  0015D6  EFF0  F00A         	goto	i2u156_40
  5834  0015DA                     i2u156_41:
  5835  0015DA  FFFF               	dw	65535	; assembler added errata NOP
  5836  0015DC  EF04  F00B         	goto	i2l2520
  5837  0015E0                     i2u156_40:
  5838  0015E0  FFFF               	dw	65535	; assembler added errata NOP
  5839  0015E2                     
  5840                           ;Disp.c: 102:             {;Disp.c: 103:                 Disp_and_Blink_Time (Min_Ten ,M
      +                          in_Unit ,Sec_Ten ,Sec_Unit ,BLINK_DOTS);
  5841  0015E2  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5842  0015E6  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5843  0015EA  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5844  0015EE  0E04               	movlw	4
  5845  0015F0  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5846  0015F2  5022               	movf	_Min_Ten^0,w,c
  5847  0015F4  EC6F  F006         	call	_Disp_and_Blink_Time
  5848                           
  5849                           ;Disp.c: 104:                 Set_LCD_BUFFER2("     Heating...");
  5850  0015F8  0E8A               	movlw	low STR_5
  5851  0015FA  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  5852  0015FC  0E06               	movlw	high STR_5
  5853  0015FE  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  5854  001600  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  5855                           
  5856                           ;Disp.c: 106:             }
  5857  001604  EF8D  F00B         	goto	i2l267
  5858  001608                     i2l2520:
  5859  001608  FFFF               	dw	65535	; assembler added errata NOP
  5860  00160A  501F               	movf	_Disp_Current_Count_State^0,w,c
  5861  00160C  A4D8               	btfss	status,2,c
  5862  00160E  EF0B  F00B         	goto	i2u157_41
  5863  001612  EF0E  F00B         	goto	i2u157_40
  5864  001616                     i2u157_41:
  5865  001616  FFFF               	dw	65535	; assembler added errata NOP
  5866  001618  EF22  F00B         	goto	i2l2524
  5867  00161C                     i2u157_40:
  5868  00161C  FFFF               	dw	65535	; assembler added errata NOP
  5869  00161E                     
  5870                           ;Disp.c: 108:             {;Disp.c: 109:                 Disp_and_Blink_Time (Min_Ten ,M
      +                          in_Unit ,Sec_Ten ,Sec_Unit ,BLINK_ALL);
  5871  00161E  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5872  001622  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5873  001626  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5874  00162A  0E05               	movlw	5
  5875  00162C  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5876  00162E  5022               	movf	_Min_Ten^0,w,c
  5877  001630  EC6F  F006         	call	_Disp_and_Blink_Time
  5878                           
  5879                           ;Disp.c: 110:                 Set_LCD_BUFFER2("   Put Food !   ");
  5880  001634  0E36               	movlw	low STR_6
  5881  001636  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  5882  001638  0E06               	movlw	high STR_6
  5883  00163A  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  5884  00163C  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  5885                           
  5886                           ;Disp.c: 111:             }
  5887  001640  EF8D  F00B         	goto	i2l267
  5888  001644                     i2l2524:
  5889  001644  FFFF               	dw	65535	; assembler added errata NOP
  5890  001646  041F               	decf	_Disp_Current_Count_State^0,w,c
  5891  001648  A4D8               	btfss	status,2,c
  5892  00164A  EF29  F00B         	goto	i2u158_41
  5893  00164E  EF2C  F00B         	goto	i2u158_40
  5894  001652                     i2u158_41:
  5895  001652  FFFF               	dw	65535	; assembler added errata NOP
  5896  001654  EF40  F00B         	goto	i2l258
  5897  001658                     i2u158_40:
  5898  001658  FFFF               	dw	65535	; assembler added errata NOP
  5899  00165A                     
  5900                           ;Disp.c: 113:             {;Disp.c: 114:                 Disp_and_Blink_Time (Min_Ten ,M
      +                          in_Unit ,Sec_Ten ,Sec_Unit ,BLINK_ALL);
  5901  00165A  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5902  00165E  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5903  001662  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5904  001666  0E05               	movlw	5
  5905  001668  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5906  00166A  5022               	movf	_Min_Ten^0,w,c
  5907  00166C  EC6F  F006         	call	_Disp_and_Blink_Time
  5908                           
  5909                           ;Disp.c: 115:                 Set_LCD_BUFFER2("   Close Door ! ");
  5910  001670  0E58               	movlw	low STR_7
  5911  001672  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  5912  001674  0E06               	movlw	high STR_7
  5913  001676  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  5914  001678  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  5915  00167C  EF8D  F00B         	goto	i2l267
  5916  001680                     i2l258:
  5917  001680  FFFF               	dw	65535	; assembler added errata NOP
  5918                           
  5919                           ;Disp.c: 117:             break;
  5920  001682  EF8D  F00B         	goto	i2l267
  5921  001686                     i2l2528:
  5922  001686  FFFF               	dw	65535	; assembler added errata NOP
  5923                           
  5924                           ;Disp.c: 120:             if(Disp_Current_Count_State == Pause_Time)
  5925  001688  0E03               	movlw	3
  5926  00168A  181F               	xorwf	_Disp_Current_Count_State^0,w,c
  5927  00168C  A4D8               	btfss	status,2,c
  5928  00168E  EF4B  F00B         	goto	i2u159_41
  5929  001692  EF4E  F00B         	goto	i2u159_40
  5930  001696                     i2u159_41:
  5931  001696  FFFF               	dw	65535	; assembler added errata NOP
  5932  001698  EF40  F00B         	goto	i2l258
  5933  00169C                     i2u159_40:
  5934  00169C  FFFF               	dw	65535	; assembler added errata NOP
  5935  00169E                     
  5936                           ;Disp.c: 121:             {;Disp.c: 122:                 Disp_and_Blink_Time (Min_Ten ,M
      +                          in_Unit ,Sec_Ten ,Sec_Unit ,BLINK_ALL);
  5937  00169E  C023  F057         	movff	_Min_Unit,Disp_and_Blink_Time@Min_Unit
  5938  0016A2  C020  F058         	movff	_Sec_Ten,Disp_and_Blink_Time@Sec_Ten
  5939  0016A6  C021  F059         	movff	_Sec_Unit,Disp_and_Blink_Time@Sec_Unit
  5940  0016AA  0E05               	movlw	5
  5941  0016AC  6E5A               	movwf	Disp_and_Blink_Time@Blink_State^0,c
  5942  0016AE  5022               	movf	_Min_Ten^0,w,c
  5943  0016B0  EC6F  F006         	call	_Disp_and_Blink_Time
  5944                           
  5945                           ;Disp.c: 123:                 Set_LCD_BUFFER2("    Paused !   ");
  5946  0016B4  0E7A               	movlw	low STR_8
  5947  0016B6  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  5948  0016B8  0E06               	movlw	high STR_8
  5949  0016BA  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  5950  0016BC  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  5951                           
  5952                           ;Disp.c: 124:             }
  5953  0016C0  EF8D  F00B         	goto	i2l267
  5954  0016C4                     i2l2536:
  5955  0016C4  FFFF               	dw	65535	; assembler added errata NOP
  5956  0016C6  5061               	movf	Disp_Time@Disp_Current_State^0,w,c
  5957  0016C8  6E5F               	movwf	??_Disp_Time^0,c
  5958  0016CA  6A60               	clrf	(??_Disp_Time+1)^0,c
  5959                           
  5960                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5961                           ; Switch size 1, requested type "simple"
  5962                           ; Number of cases is 1, Range of values is 0 to 0
  5963                           ; switch strategies available:
  5964                           ; Name         Instructions Cycles
  5965                           ; simple_byte            4     3 (average)
  5966                           ;	Chosen strategy is simple_byte
  5967  0016CC  5060               	movf	(??_Disp_Time+1)^0,w,c
  5968  0016CE  0A00               	xorlw	0	; case 0
  5969  0016D0  B4D8               	btfsc	status,2,c
  5970  0016D2  EF6D  F00B         	goto	i2l3308
  5971  0016D6  EF8D  F00B         	goto	i2l267
  5972  0016DA                     i2l3308:
  5973  0016DA  FFFF               	dw	65535	; assembler added errata NOP
  5974                           
  5975                           ; Switch size 1, requested type "simple"
  5976                           ; Number of cases is 7, Range of values is 0 to 6
  5977                           ; switch strategies available:
  5978                           ; Name         Instructions Cycles
  5979                           ; simple_byte           22    12 (average)
  5980                           ;	Chosen strategy is simple_byte
  5981  0016DC  505F               	movf	??_Disp_Time^0,w,c
  5982  0016DE  0A00               	xorlw	0	; case 0
  5983  0016E0  B4D8               	btfsc	status,2,c
  5984  0016E2  EF9E  F00A         	goto	i2l2506
  5985  0016E6  0A01               	xorlw	1	; case 1
  5986  0016E8  B4D8               	btfsc	status,2,c
  5987  0016EA  EFAD  F00A         	goto	i2l2508
  5988  0016EE  0A03               	xorlw	3	; case 2
  5989  0016F0  B4D8               	btfsc	status,2,c
  5990  0016F2  EFBB  F00A         	goto	i2l2510
  5991  0016F6  0A01               	xorlw	1	; case 3
  5992  0016F8  B4D8               	btfsc	status,2,c
  5993  0016FA  EFC9  F00A         	goto	i2l2512
  5994  0016FE  0A07               	xorlw	7	; case 4
  5995  001700  B4D8               	btfsc	status,2,c
  5996  001702  EFD7  F00A         	goto	i2l2514
  5997  001706  0A01               	xorlw	1	; case 5
  5998  001708  B4D8               	btfsc	status,2,c
  5999  00170A  EFE5  F00A         	goto	i2l2516
  6000  00170E  0A03               	xorlw	3	; case 6
  6001  001710  B4D8               	btfsc	status,2,c
  6002  001712  EF43  F00B         	goto	i2l2528
  6003  001716  EF8D  F00B         	goto	i2l267
  6004  00171A                     i2l267:
  6005  00171A  FFFF               	dw	65535	; assembler added errata NOP
  6006  00171C  0012               	return		;funcret
  6007  00171E  FFFF               	dw	65535	; errata NOP
  6008  001720                     __end_of_Disp_Time:
  6009                           	opt callstack 0
  6010                           
  6011 ;; *************** function _Disp_and_Blink_Time *****************
  6012 ;; Defined at:
  6013 ;;		line 139 in file "Disp.c"
  6014 ;; Parameters:    Size  Location     Type
  6015 ;;  Min_Ten         1    wreg     unsigned char 
  6016 ;;  Min_Unit        1   12[COMRAM] unsigned char 
  6017 ;;  Sec_Ten         1   13[COMRAM] unsigned char 
  6018 ;;  Sec_Unit        1   14[COMRAM] unsigned char 
  6019 ;;  Blink_State     1   15[COMRAM] enum E2622
  6020 ;; Auto vars:     Size  Location     Type
  6021 ;;  Min_Ten         1   19[COMRAM] unsigned char 
  6022 ;;  i               1   18[COMRAM] unsigned char 
  6023 ;; Return value:  Size  Location     Type
  6024 ;;                  1    wreg      void 
  6025 ;; Registers used:
  6026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6027 ;; Tracked objects:
  6028 ;;		On entry : 0/0
  6029 ;;		On exit  : 0/0
  6030 ;;		Unchanged: 0/0
  6031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6032 ;;      Params:         4       0       0       0       0       0       0
  6033 ;;      Locals:         2       0       0       0       0       0       0
  6034 ;;      Temps:          2       0       0       0       0       0       0
  6035 ;;      Totals:         8       0       0       0       0       0       0
  6036 ;;Total ram usage:        8 bytes
  6037 ;; Hardware stack levels used:    1
  6038 ;; Hardware stack levels required when called:    2
  6039 ;; This function calls:
  6040 ;;		_Set_LCD_BUFFER1
  6041 ;;		_Set_LCD_BUFFER2
  6042 ;; This function is called by:
  6043 ;;		_Disp_Time
  6044 ;; This function uses a non-reentrant model
  6045 ;;
  6046                           
  6047                           	psect	text38
  6048  000CDE                     __ptext38:
  6049                           	opt callstack 0
  6050  000CDE                     _Disp_and_Blink_Time:
  6051                           	opt callstack 0
  6052  000CDE  FFFF               	dw	65535	; assembler added errata NOP
  6053                           
  6054                           ;incstack = 0
  6055                           ;Disp_and_Blink_Time@Min_Ten stored from wreg
  6056  000CE0  6E5E               	movwf	Disp_and_Blink_Time@Min_Ten^0,c
  6057  000CE2                     
  6058                           ;Disp.c: 139: static void Disp_and_Blink_Time (tByte Min_Ten , tByte Min_Unit , tByte Se
      +                          c_Ten , tByte Sec_Unit ,tBlink_State Blink_State );Disp.c: 140: {;Disp.c: 141:     tByte
      +                           i;;Disp.c: 142:     static tByte LCD_Buffer_1[16];;Disp.c: 143:     static tWord Blink_
      +                          Counter = 0;;Disp.c: 144:     Blink_Counter += (50);
  6059  000CE2  0E32               	movlw	50
  6060  000CE4  2612               	addwf	Disp_and_Blink_Time@Blink_Counter^0,f,c
  6061  000CE6  0E00               	movlw	0
  6062  000CE8  2213               	addwfc	(Disp_and_Blink_Time@Blink_Counter+1)^0,f,c
  6063                           
  6064                           ;Disp.c: 146:     switch(Blink_State)
  6065  000CEA  EFDF  F007         	goto	i2l2438
  6066  000CEE                     i2l2324:
  6067  000CEE  FFFF               	dw	65535	; assembler added errata NOP
  6068                           
  6069                           ;Disp.c: 150:             if(Blink_Counter <= ((1000)/2))
  6070  000CF0  0EF5               	movlw	245
  6071  000CF2  5C12               	subwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6072  000CF4  0E01               	movlw	1
  6073  000CF6  5813               	subwfb	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6074  000CF8  B0D8               	btfsc	status,0,c
  6075  000CFA  EF81  F006         	goto	i2u138_41
  6076  000CFE  EF84  F006         	goto	i2u138_40
  6077  000D02                     i2u138_41:
  6078  000D02  FFFF               	dw	65535	; assembler added errata NOP
  6079  000D04  EF95  F006         	goto	i2l2336
  6080  000D08                     i2u138_40:
  6081  000D08  FFFF               	dw	65535	; assembler added errata NOP
  6082  000D0A                     
  6083                           ;Disp.c: 151:             {;Disp.c: 152:                 LCD_Buffer_1[0] = ' ';
  6084  000D0A  0E20               	movlw	32
  6085  000D0C  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6086  000D0E                     
  6087                           ;Disp.c: 153:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6088  000D0E  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6089  000D10  0F30               	addlw	48
  6090  000D12  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6091  000D14                     
  6092                           ;Disp.c: 154:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6093  000D14  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6094  000D16  0F30               	addlw	48
  6095  000D18  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6096                           
  6097                           ;Disp.c: 155:                 LCD_Buffer_1[3] = ':';
  6098  000D1A  0E3A               	movlw	58
  6099  000D1C  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6100  000D1E                     
  6101                           ;Disp.c: 156:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6102  000D1E  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6103  000D20  0F30               	addlw	48
  6104  000D22  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6105  000D24                     
  6106                           ;Disp.c: 157:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6107  000D24  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6108  000D26  0F30               	addlw	48
  6109  000D28  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6110  000D2A                     i2l2336:
  6111  000D2A  FFFF               	dw	65535	; assembler added errata NOP
  6112                           
  6113                           ;Disp.c: 160:             if(Blink_Counter > ((1000)/2))
  6114  000D2C  0EF5               	movlw	245
  6115  000D2E  5C12               	subwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6116  000D30  0E01               	movlw	1
  6117  000D32  5813               	subwfb	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6118  000D34  A0D8               	btfss	status,0,c
  6119  000D36  EF9F  F006         	goto	i2u139_41
  6120  000D3A  EFA2  F006         	goto	i2u139_40
  6121  000D3E                     i2u139_41:
  6122  000D3E  FFFF               	dw	65535	; assembler added errata NOP
  6123  000D40  EF0A  F008         	goto	i2l2440
  6124  000D44                     i2u139_40:
  6125  000D44  FFFF               	dw	65535	; assembler added errata NOP
  6126  000D46                     
  6127                           ;Disp.c: 161:             {;Disp.c: 162:                 LCD_Buffer_1[1] = ' ';
  6128  000D46  0E20               	movlw	32
  6129  000D48  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6130  000D4A                     
  6131                           ;Disp.c: 163:                 if(Blink_Counter == (1000))
  6132  000D4A  0EE8               	movlw	232
  6133  000D4C  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6134  000D4E  E107               	bnz	i2u140_41
  6135  000D50  0E03               	movlw	3
  6136  000D52  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6137  000D54  A4D8               	btfss	status,2,c
  6138  000D56  EFAF  F006         	goto	i2u140_41
  6139  000D5A  EFB2  F006         	goto	i2u140_40
  6140  000D5E                     i2u140_41:
  6141  000D5E  FFFF               	dw	65535	; assembler added errata NOP
  6142  000D60  EF0A  F008         	goto	i2l2440
  6143  000D64                     i2u140_40:
  6144  000D64  FFFF               	dw	65535	; assembler added errata NOP
  6145  000D66                     
  6146                           ;Disp.c: 164:                 {;Disp.c: 165:                     Blink_Counter = 0;
  6147  000D66  0E00               	movlw	0
  6148  000D68  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6149  000D6A  0E00               	movlw	0
  6150  000D6C  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6151  000D6E  EF0A  F008         	goto	i2l2440
  6152  000D72                     i2l2344:
  6153  000D72  FFFF               	dw	65535	; assembler added errata NOP
  6154                           
  6155                           ;Disp.c: 173:             if(Blink_Counter == ((1000)/2))
  6156  000D74  0EF4               	movlw	244
  6157  000D76  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6158  000D78  E106               	bnz	i2u141_41
  6159  000D7A  0413               	decf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6160  000D7C  A4D8               	btfss	status,2,c
  6161  000D7E  EFC3  F006         	goto	i2u141_41
  6162  000D82  EFC6  F006         	goto	i2u141_40
  6163  000D86                     i2u141_41:
  6164  000D86  FFFF               	dw	65535	; assembler added errata NOP
  6165  000D88  EFD7  F006         	goto	i2l2356
  6166  000D8C                     i2u141_40:
  6167  000D8C  FFFF               	dw	65535	; assembler added errata NOP
  6168  000D8E                     
  6169                           ;Disp.c: 174:             {;Disp.c: 175:                 LCD_Buffer_1[0] = ' ';
  6170  000D8E  0E20               	movlw	32
  6171  000D90  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6172  000D92                     
  6173                           ;Disp.c: 176:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6174  000D92  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6175  000D94  0F30               	addlw	48
  6176  000D96  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6177  000D98                     
  6178                           ;Disp.c: 177:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6179  000D98  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6180  000D9A  0F30               	addlw	48
  6181  000D9C  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6182                           
  6183                           ;Disp.c: 178:                 LCD_Buffer_1[3] = ':';
  6184  000D9E  0E3A               	movlw	58
  6185  000DA0  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6186  000DA2                     
  6187                           ;Disp.c: 179:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6188  000DA2  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6189  000DA4  0F30               	addlw	48
  6190  000DA6  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6191  000DA8                     
  6192                           ;Disp.c: 180:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6193  000DA8  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6194  000DAA  0F30               	addlw	48
  6195  000DAC  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6196  000DAE                     i2l2356:
  6197  000DAE  FFFF               	dw	65535	; assembler added errata NOP
  6198                           
  6199                           ;Disp.c: 182:             if(Blink_Counter == (1000))
  6200  000DB0  0EE8               	movlw	232
  6201  000DB2  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6202  000DB4  E107               	bnz	i2u142_41
  6203  000DB6  0E03               	movlw	3
  6204  000DB8  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6205  000DBA  A4D8               	btfss	status,2,c
  6206  000DBC  EFE2  F006         	goto	i2u142_41
  6207  000DC0  EFE5  F006         	goto	i2u142_40
  6208  000DC4                     i2u142_41:
  6209  000DC4  FFFF               	dw	65535	; assembler added errata NOP
  6210  000DC6  EF0A  F008         	goto	i2l2440
  6211  000DCA                     i2u142_40:
  6212  000DCA  FFFF               	dw	65535	; assembler added errata NOP
  6213  000DCC                     
  6214                           ;Disp.c: 183:             {;Disp.c: 184:                 LCD_Buffer_1[2] = ' ';
  6215  000DCC  0E20               	movlw	32
  6216  000DCE  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6217                           
  6218                           ;Disp.c: 185:                 Blink_Counter = 0;
  6219  000DD0  0E00               	movlw	0
  6220  000DD2  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6221  000DD4  0E00               	movlw	0
  6222  000DD6  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6223  000DD8  EF0A  F008         	goto	i2l2440
  6224  000DDC                     i2l2360:
  6225  000DDC  FFFF               	dw	65535	; assembler added errata NOP
  6226                           
  6227                           ;Disp.c: 192:             if(Blink_Counter == ((1000)/2))
  6228  000DDE  0EF4               	movlw	244
  6229  000DE0  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6230  000DE2  E106               	bnz	i2u143_41
  6231  000DE4  0413               	decf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6232  000DE6  A4D8               	btfss	status,2,c
  6233  000DE8  EFF8  F006         	goto	i2u143_41
  6234  000DEC  EFFB  F006         	goto	i2u143_40
  6235  000DF0                     i2u143_41:
  6236  000DF0  FFFF               	dw	65535	; assembler added errata NOP
  6237  000DF2  EF0C  F007         	goto	i2l2372
  6238  000DF6                     i2u143_40:
  6239  000DF6  FFFF               	dw	65535	; assembler added errata NOP
  6240  000DF8                     
  6241                           ;Disp.c: 193:             {;Disp.c: 194:                 LCD_Buffer_1[0] = ' ';
  6242  000DF8  0E20               	movlw	32
  6243  000DFA  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6244  000DFC                     
  6245                           ;Disp.c: 195:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6246  000DFC  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6247  000DFE  0F30               	addlw	48
  6248  000E00  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6249  000E02                     
  6250                           ;Disp.c: 196:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6251  000E02  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6252  000E04  0F30               	addlw	48
  6253  000E06  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6254                           
  6255                           ;Disp.c: 197:                 LCD_Buffer_1[3] = ':';
  6256  000E08  0E3A               	movlw	58
  6257  000E0A  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6258  000E0C                     
  6259                           ;Disp.c: 198:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6260  000E0C  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6261  000E0E  0F30               	addlw	48
  6262  000E10  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6263  000E12                     
  6264                           ;Disp.c: 199:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6265  000E12  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6266  000E14  0F30               	addlw	48
  6267  000E16  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6268  000E18                     i2l2372:
  6269  000E18  FFFF               	dw	65535	; assembler added errata NOP
  6270                           
  6271                           ;Disp.c: 201:             if(Blink_Counter == (1000))
  6272  000E1A  0EE8               	movlw	232
  6273  000E1C  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6274  000E1E  E107               	bnz	i2u144_41
  6275  000E20  0E03               	movlw	3
  6276  000E22  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6277  000E24  A4D8               	btfss	status,2,c
  6278  000E26  EF17  F007         	goto	i2u144_41
  6279  000E2A  EF1A  F007         	goto	i2u144_40
  6280  000E2E                     i2u144_41:
  6281  000E2E  FFFF               	dw	65535	; assembler added errata NOP
  6282  000E30  EF0A  F008         	goto	i2l2440
  6283  000E34                     i2u144_40:
  6284  000E34  FFFF               	dw	65535	; assembler added errata NOP
  6285  000E36                     
  6286                           ;Disp.c: 202:             {;Disp.c: 203:                 LCD_Buffer_1[4] = ' ';
  6287  000E36  0E20               	movlw	32
  6288  000E38  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6289                           
  6290                           ;Disp.c: 204:                 Blink_Counter = 0;
  6291  000E3A  0E00               	movlw	0
  6292  000E3C  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6293  000E3E  0E00               	movlw	0
  6294  000E40  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6295  000E42  EF2D  F008         	goto	i2l286
  6296  000E46                     i2l2378:
  6297  000E46  FFFF               	dw	65535	; assembler added errata NOP
  6298                           
  6299                           ;Disp.c: 212:             if(Blink_Counter == ((1000)/2))
  6300  000E48  0EF4               	movlw	244
  6301  000E4A  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6302  000E4C  E106               	bnz	i2u145_41
  6303  000E4E  0413               	decf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6304  000E50  A4D8               	btfss	status,2,c
  6305  000E52  EF2D  F007         	goto	i2u145_41
  6306  000E56  EF30  F007         	goto	i2u145_40
  6307  000E5A                     i2u145_41:
  6308  000E5A  FFFF               	dw	65535	; assembler added errata NOP
  6309  000E5C  EF41  F007         	goto	i2l2390
  6310  000E60                     i2u145_40:
  6311  000E60  FFFF               	dw	65535	; assembler added errata NOP
  6312  000E62                     
  6313                           ;Disp.c: 213:             {;Disp.c: 214:                 LCD_Buffer_1[0] = ' ';
  6314  000E62  0E20               	movlw	32
  6315  000E64  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6316  000E66                     
  6317                           ;Disp.c: 215:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6318  000E66  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6319  000E68  0F30               	addlw	48
  6320  000E6A  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6321  000E6C                     
  6322                           ;Disp.c: 216:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6323  000E6C  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6324  000E6E  0F30               	addlw	48
  6325  000E70  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6326                           
  6327                           ;Disp.c: 217:                 LCD_Buffer_1[3] = ':';
  6328  000E72  0E3A               	movlw	58
  6329  000E74  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6330  000E76                     
  6331                           ;Disp.c: 218:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6332  000E76  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6333  000E78  0F30               	addlw	48
  6334  000E7A  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6335  000E7C                     
  6336                           ;Disp.c: 219:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6337  000E7C  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6338  000E7E  0F30               	addlw	48
  6339  000E80  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6340  000E82                     i2l2390:
  6341  000E82  FFFF               	dw	65535	; assembler added errata NOP
  6342                           
  6343                           ;Disp.c: 221:             if(Blink_Counter == (1000))
  6344  000E84  0EE8               	movlw	232
  6345  000E86  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6346  000E88  E107               	bnz	i2u146_41
  6347  000E8A  0E03               	movlw	3
  6348  000E8C  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6349  000E8E  A4D8               	btfss	status,2,c
  6350  000E90  EF4C  F007         	goto	i2u146_41
  6351  000E94  EF4F  F007         	goto	i2u146_40
  6352  000E98                     i2u146_41:
  6353  000E98  FFFF               	dw	65535	; assembler added errata NOP
  6354  000E9A  EF0A  F008         	goto	i2l2440
  6355  000E9E                     i2u146_40:
  6356  000E9E  FFFF               	dw	65535	; assembler added errata NOP
  6357  000EA0                     
  6358                           ;Disp.c: 222:             {;Disp.c: 223:                 LCD_Buffer_1[5] = ' ';
  6359  000EA0  0E20               	movlw	32
  6360  000EA2  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6361                           
  6362                           ;Disp.c: 224:                 Blink_Counter = 0;
  6363  000EA4  0E00               	movlw	0
  6364  000EA6  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6365  000EA8  0E00               	movlw	0
  6366  000EAA  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6367  000EAC  EF0A  F008         	goto	i2l2440
  6368  000EB0                     i2l2394:
  6369  000EB0  FFFF               	dw	65535	; assembler added errata NOP
  6370                           
  6371                           ;Disp.c: 232:             if(Blink_Counter == ((1000)/2))
  6372  000EB2  0EF4               	movlw	244
  6373  000EB4  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6374  000EB6  E106               	bnz	i2u147_41
  6375  000EB8  0413               	decf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6376  000EBA  A4D8               	btfss	status,2,c
  6377  000EBC  EF62  F007         	goto	i2u147_41
  6378  000EC0  EF65  F007         	goto	i2u147_40
  6379  000EC4                     i2u147_41:
  6380  000EC4  FFFF               	dw	65535	; assembler added errata NOP
  6381  000EC6  EF76  F007         	goto	i2l2406
  6382  000ECA                     i2u147_40:
  6383  000ECA  FFFF               	dw	65535	; assembler added errata NOP
  6384  000ECC                     
  6385                           ;Disp.c: 233:             {;Disp.c: 234:                 LCD_Buffer_1[0] = ' ';
  6386  000ECC  0E20               	movlw	32
  6387  000ECE  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6388  000ED0                     
  6389                           ;Disp.c: 235:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6390  000ED0  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6391  000ED2  0F30               	addlw	48
  6392  000ED4  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6393  000ED6                     
  6394                           ;Disp.c: 236:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6395  000ED6  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6396  000ED8  0F30               	addlw	48
  6397  000EDA  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6398                           
  6399                           ;Disp.c: 237:                 LCD_Buffer_1[3] = ':';
  6400  000EDC  0E3A               	movlw	58
  6401  000EDE  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6402  000EE0                     
  6403                           ;Disp.c: 238:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6404  000EE0  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6405  000EE2  0F30               	addlw	48
  6406  000EE4  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6407  000EE6                     
  6408                           ;Disp.c: 239:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6409  000EE6  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6410  000EE8  0F30               	addlw	48
  6411  000EEA  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6412  000EEC                     i2l2406:
  6413  000EEC  FFFF               	dw	65535	; assembler added errata NOP
  6414                           
  6415                           ;Disp.c: 243:             if(Blink_Counter == (1000))
  6416  000EEE  0EE8               	movlw	232
  6417  000EF0  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6418  000EF2  E107               	bnz	i2u148_41
  6419  000EF4  0E03               	movlw	3
  6420  000EF6  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6421  000EF8  A4D8               	btfss	status,2,c
  6422  000EFA  EF81  F007         	goto	i2u148_41
  6423  000EFE  EF84  F007         	goto	i2u148_40
  6424  000F02                     i2u148_41:
  6425  000F02  FFFF               	dw	65535	; assembler added errata NOP
  6426  000F04  EF0A  F008         	goto	i2l2440
  6427  000F08                     i2u148_40:
  6428  000F08  FFFF               	dw	65535	; assembler added errata NOP
  6429  000F0A                     
  6430                           ;Disp.c: 244:             {;Disp.c: 245:                 LCD_Buffer_1[3] = ' ';
  6431  000F0A  0E20               	movlw	32
  6432  000F0C  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6433                           
  6434                           ;Disp.c: 246:                 Blink_Counter = 0;
  6435  000F0E  0E00               	movlw	0
  6436  000F10  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6437  000F12  0E00               	movlw	0
  6438  000F14  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6439  000F16  EF0A  F008         	goto	i2l2440
  6440  000F1A                     i2l2410:
  6441  000F1A  FFFF               	dw	65535	; assembler added errata NOP
  6442                           
  6443                           ;Disp.c: 257:             if(Blink_Counter == ((1000)/2))
  6444  000F1C  0EF4               	movlw	244
  6445  000F1E  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6446  000F20  E106               	bnz	i2u149_41
  6447  000F22  0413               	decf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6448  000F24  A4D8               	btfss	status,2,c
  6449  000F26  EF97  F007         	goto	i2u149_41
  6450  000F2A  EF9A  F007         	goto	i2u149_40
  6451  000F2E                     i2u149_41:
  6452  000F2E  FFFF               	dw	65535	; assembler added errata NOP
  6453  000F30  EFAB  F007         	goto	i2l2422
  6454  000F34                     i2u149_40:
  6455  000F34  FFFF               	dw	65535	; assembler added errata NOP
  6456  000F36                     
  6457                           ;Disp.c: 258:             {;Disp.c: 259:                 LCD_Buffer_1[0] = ' ';
  6458  000F36  0E20               	movlw	32
  6459  000F38  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6460  000F3A                     
  6461                           ;Disp.c: 260:                 LCD_Buffer_1[1] = Min_Ten+'0';
  6462  000F3A  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6463  000F3C  0F30               	addlw	48
  6464  000F3E  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6465  000F40                     
  6466                           ;Disp.c: 261:                 LCD_Buffer_1[2] = Min_Unit+'0';
  6467  000F40  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6468  000F42  0F30               	addlw	48
  6469  000F44  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6470                           
  6471                           ;Disp.c: 262:                 LCD_Buffer_1[3] = ':';
  6472  000F46  0E3A               	movlw	58
  6473  000F48  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6474  000F4A                     
  6475                           ;Disp.c: 263:                 LCD_Buffer_1[4] = Sec_Ten+'0';
  6476  000F4A  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6477  000F4C  0F30               	addlw	48
  6478  000F4E  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6479  000F50                     
  6480                           ;Disp.c: 264:                 LCD_Buffer_1[5] = Sec_Unit+'0';
  6481  000F50  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6482  000F52  0F30               	addlw	48
  6483  000F54  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6484  000F56                     i2l2422:
  6485  000F56  FFFF               	dw	65535	; assembler added errata NOP
  6486                           
  6487                           ;Disp.c: 266:             if(Blink_Counter == (1000))
  6488  000F58  0EE8               	movlw	232
  6489  000F5A  1812               	xorwf	Disp_and_Blink_Time@Blink_Counter^0,w,c
  6490  000F5C  E107               	bnz	i2u150_41
  6491  000F5E  0E03               	movlw	3
  6492  000F60  1813               	xorwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,w,c
  6493  000F62  A4D8               	btfss	status,2,c
  6494  000F64  EFB6  F007         	goto	i2u150_41
  6495  000F68  EFB9  F007         	goto	i2u150_40
  6496  000F6C                     i2u150_41:
  6497  000F6C  FFFF               	dw	65535	; assembler added errata NOP
  6498  000F6E  EF0A  F008         	goto	i2l2440
  6499  000F72                     i2u150_40:
  6500  000F72  FFFF               	dw	65535	; assembler added errata NOP
  6501  000F74                     
  6502                           ;Disp.c: 267:             {;Disp.c: 268:                 LCD_Buffer_1[0] = ' ';
  6503  000F74  0E20               	movlw	32
  6504  000F76  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6505                           
  6506                           ;Disp.c: 269:                 LCD_Buffer_1[1] = ' ';
  6507  000F78  0E20               	movlw	32
  6508  000F7A  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6509                           
  6510                           ;Disp.c: 270:                 LCD_Buffer_1[2] = ' ';
  6511  000F7C  0E20               	movlw	32
  6512  000F7E  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6513                           
  6514                           ;Disp.c: 271:                 LCD_Buffer_1[3] = ' ';
  6515  000F80  0E20               	movlw	32
  6516  000F82  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6517                           
  6518                           ;Disp.c: 272:                 LCD_Buffer_1[4] = ' ';
  6519  000F84  0E20               	movlw	32
  6520  000F86  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6521                           
  6522                           ;Disp.c: 273:                 LCD_Buffer_1[5] = ' ';
  6523  000F88  0E20               	movlw	32
  6524  000F8A  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6525                           
  6526                           ;Disp.c: 274:                 Blink_Counter = 0;
  6527  000F8C  0E00               	movlw	0
  6528  000F8E  6E13               	movwf	(Disp_and_Blink_Time@Blink_Counter+1)^0,c
  6529  000F90  0E00               	movlw	0
  6530  000F92  6E12               	movwf	Disp_and_Blink_Time@Blink_Counter^0,c
  6531  000F94  EF0A  F008         	goto	i2l2440
  6532  000F98                     i2l2426:
  6533  000F98  FFFF               	dw	65535	; assembler added errata NOP
  6534                           
  6535                           ;Disp.c: 281:             LCD_Buffer_1[0] = ' ';
  6536  000F9A  0E20               	movlw	32
  6537  000F9C  6E2B               	movwf	Disp_and_Blink_Time@LCD_Buffer_1^0,c
  6538  000F9E                     
  6539                           ;Disp.c: 282:             LCD_Buffer_1[1] = Min_Ten+'0';
  6540  000F9E  505E               	movf	Disp_and_Blink_Time@Min_Ten^0,w,c
  6541  000FA0  0F30               	addlw	48
  6542  000FA2  6E2C               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+1)^0,c
  6543  000FA4                     
  6544                           ;Disp.c: 283:             LCD_Buffer_1[2] = Min_Unit+'0';
  6545  000FA4  5057               	movf	Disp_and_Blink_Time@Min_Unit^0,w,c
  6546  000FA6  0F30               	addlw	48
  6547  000FA8  6E2D               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+2)^0,c
  6548                           
  6549                           ;Disp.c: 284:             LCD_Buffer_1[3] = ':';
  6550  000FAA  0E3A               	movlw	58
  6551  000FAC  6E2E               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+3)^0,c
  6552  000FAE                     
  6553                           ;Disp.c: 285:             LCD_Buffer_1[4] = Sec_Ten+'0';
  6554  000FAE  5058               	movf	Disp_and_Blink_Time@Sec_Ten^0,w,c
  6555  000FB0  0F30               	addlw	48
  6556  000FB2  6E2F               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+4)^0,c
  6557  000FB4                     
  6558                           ;Disp.c: 286:             LCD_Buffer_1[5] = Sec_Unit+'0';
  6559  000FB4  5059               	movf	Disp_and_Blink_Time@Sec_Unit^0,w,c
  6560  000FB6  0F30               	addlw	48
  6561  000FB8  6E30               	movwf	(Disp_and_Blink_Time@LCD_Buffer_1+5)^0,c
  6562                           
  6563                           ;Disp.c: 288:             break;
  6564  000FBA  EF0A  F008         	goto	i2l2440
  6565  000FBE                     i2l2438:
  6566  000FBE  FFFF               	dw	65535	; assembler added errata NOP
  6567  000FC0  505A               	movf	Disp_and_Blink_Time@Blink_State^0,w,c
  6568  000FC2  6E5B               	movwf	??_Disp_and_Blink_Time^0,c
  6569  000FC4  6A5C               	clrf	(??_Disp_and_Blink_Time+1)^0,c
  6570                           
  6571                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6572                           ; Switch size 1, requested type "simple"
  6573                           ; Number of cases is 1, Range of values is 0 to 0
  6574                           ; switch strategies available:
  6575                           ; Name         Instructions Cycles
  6576                           ; simple_byte            4     3 (average)
  6577                           ;	Chosen strategy is simple_byte
  6578  000FC6  505C               	movf	(??_Disp_and_Blink_Time+1)^0,w,c
  6579  000FC8  0A00               	xorlw	0	; case 0
  6580  000FCA  B4D8               	btfsc	status,2,c
  6581  000FCC  EFEA  F007         	goto	i2l3310
  6582  000FD0  EF0A  F008         	goto	i2l2440
  6583  000FD4                     i2l3310:
  6584  000FD4  FFFF               	dw	65535	; assembler added errata NOP
  6585                           
  6586                           ; Switch size 1, requested type "simple"
  6587                           ; Number of cases is 7, Range of values is 0 to 6
  6588                           ; switch strategies available:
  6589                           ; Name         Instructions Cycles
  6590                           ; simple_byte           22    12 (average)
  6591                           ;	Chosen strategy is simple_byte
  6592  000FD6  505B               	movf	??_Disp_and_Blink_Time^0,w,c
  6593  000FD8  0A00               	xorlw	0	; case 0
  6594  000FDA  B4D8               	btfsc	status,2,c
  6595  000FDC  EF77  F006         	goto	i2l2324
  6596  000FE0  0A01               	xorlw	1	; case 1
  6597  000FE2  B4D8               	btfsc	status,2,c
  6598  000FE4  EFB9  F006         	goto	i2l2344
  6599  000FE8  0A03               	xorlw	3	; case 2
  6600  000FEA  B4D8               	btfsc	status,2,c
  6601  000FEC  EFEE  F006         	goto	i2l2360
  6602  000FF0  0A01               	xorlw	1	; case 3
  6603  000FF2  B4D8               	btfsc	status,2,c
  6604  000FF4  EF23  F007         	goto	i2l2378
  6605  000FF8  0A07               	xorlw	7	; case 4
  6606  000FFA  B4D8               	btfsc	status,2,c
  6607  000FFC  EF58  F007         	goto	i2l2394
  6608  001000  0A01               	xorlw	1	; case 5
  6609  001002  B4D8               	btfsc	status,2,c
  6610  001004  EF8D  F007         	goto	i2l2410
  6611  001008  0A03               	xorlw	3	; case 6
  6612  00100A  B4D8               	btfsc	status,2,c
  6613  00100C  EFCC  F007         	goto	i2l2426
  6614  001010  EF0A  F008         	goto	i2l2440
  6615  001014                     i2l2440:
  6616  001014  FFFF               	dw	65535	; assembler added errata NOP
  6617                           
  6618                           ;Disp.c: 298:     for(i=6 ; i<16 ; i++)
  6619  001016  0E06               	movlw	6
  6620  001018  6E5D               	movwf	Disp_and_Blink_Time@i^0,c
  6621  00101A                     i2l2446:
  6622  00101A  FFFF               	dw	65535	; assembler added errata NOP
  6623                           
  6624                           ;Disp.c: 299:     {;Disp.c: 300:         LCD_Buffer_1[i] = ' ';
  6625  00101C  0E2B               	movlw	low Disp_and_Blink_Time@LCD_Buffer_1
  6626  00101E  245D               	addwf	Disp_and_Blink_Time@i^0,w,c
  6627  001020  6ED9               	movwf	fsr2l,c
  6628  001022  6ADA               	clrf	fsr2h,c
  6629  001024  0E00               	movlw	high Disp_and_Blink_Time@LCD_Buffer_1
  6630  001026  22DA               	addwfc	fsr2h,f,c
  6631  001028  0E20               	movlw	32
  6632  00102A  6EDF               	movwf	indf2,c
  6633  00102C                     
  6634                           ;Disp.c: 301:     }
  6635  00102C  2A5D               	incf	Disp_and_Blink_Time@i^0,f,c
  6636  00102E  0E0F               	movlw	15
  6637  001030  645D               	cpfsgt	Disp_and_Blink_Time@i^0,c
  6638  001032  EF1D  F008         	goto	i2u151_41
  6639  001036  EF20  F008         	goto	i2u151_40
  6640  00103A                     i2u151_41:
  6641  00103A  FFFF               	dw	65535	; assembler added errata NOP
  6642  00103C  EF0D  F008         	goto	i2l2446
  6643  001040                     i2u151_40:
  6644  001040  FFFF               	dw	65535	; assembler added errata NOP
  6645  001042                     
  6646                           ;Disp.c: 303:     Set_LCD_BUFFER1 ( LCD_Buffer_1 );
  6647  001042  0E2B               	movlw	low Disp_and_Blink_Time@LCD_Buffer_1
  6648  001044  6E55               	movwf	Set_LCD_BUFFER1@BUF_1^0,c
  6649  001046  0E00               	movlw	high Disp_and_Blink_Time@LCD_Buffer_1
  6650  001048  6E56               	movwf	(Set_LCD_BUFFER1@BUF_1+1)^0,c
  6651  00104A  EC33  F011         	call	_Set_LCD_BUFFER1	;wreg free
  6652                           
  6653                           ;Disp.c: 304:     Set_LCD_BUFFER2 ("   Set Time !   " );
  6654  00104E  0E47               	movlw	low STR_9
  6655  001050  6E55               	movwf	Set_LCD_BUFFER2@BUF_2^0,c
  6656  001052  0E06               	movlw	high STR_9
  6657  001054  6E56               	movwf	(Set_LCD_BUFFER2@BUF_2+1)^0,c
  6658  001056  EC26  F011         	call	_Set_LCD_BUFFER2	;wreg free
  6659  00105A                     i2l286:
  6660  00105A  FFFF               	dw	65535	; assembler added errata NOP
  6661  00105C  0012               	return		;funcret
  6662  00105E  FFFF               	dw	65535	; errata NOP
  6663  001060                     __end_of_Disp_and_Blink_Time:
  6664                           	opt callstack 0
  6665                           
  6666 ;; *************** function _Set_LCD_BUFFER2 *****************
  6667 ;; Defined at:
  6668 ;;		line 174 in file "LCD.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  BUF_2           2   10[COMRAM] PTR unsigned char 
  6671 ;;		 -> STR_9(17), STR_8(16), STR_7(17), STR_6(17), 
  6672 ;;		 -> STR_5(16), STR_4(17), STR_2(18), 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;		None
  6675 ;; Return value:  Size  Location     Type
  6676 ;;                  1    wreg      void 
  6677 ;; Registers used:
  6678 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6679 ;; Tracked objects:
  6680 ;;		On entry : 0/0
  6681 ;;		On exit  : 0/0
  6682 ;;		Unchanged: 0/0
  6683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6684 ;;      Params:         2       0       0       0       0       0       0
  6685 ;;      Locals:         0       0       0       0       0       0       0
  6686 ;;      Temps:          0       0       0       0       0       0       0
  6687 ;;      Totals:         2       0       0       0       0       0       0
  6688 ;;Total ram usage:        2 bytes
  6689 ;; Hardware stack levels used:    1
  6690 ;; Hardware stack levels required when called:    1
  6691 ;; This function calls:
  6692 ;;		_strcpy
  6693 ;; This function is called by:
  6694 ;;		_MW_Update
  6695 ;;		_Disp_Time
  6696 ;;		_Disp_and_Blink_Time
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text39
  6701  00224C                     __ptext39:
  6702                           	opt callstack 0
  6703  00224C                     _Set_LCD_BUFFER2:
  6704                           	opt callstack 0
  6705  00224C  FFFF               	dw	65535	; assembler added errata NOP
  6706  00224E                     
  6707                           ;LCD.c: 174: void Set_LCD_BUFFER2 (tByte *BUF_2 );LCD.c: 175: {;LCD.c: 176:    strcpy(LC
      +                          D_LINE_1_Buffer ,BUF_2);
  6708  00224E  0E3B               	movlw	low _LCD_LINE_1_Buffer
  6709  002250  6E4B               	movwf	strcpy@dest^0,c
  6710  002252  0E00               	movlw	high _LCD_LINE_1_Buffer
  6711  002254  6E4C               	movwf	(strcpy@dest+1)^0,c
  6712  002256  C055  F04D         	movff	Set_LCD_BUFFER2@BUF_2,strcpy@src
  6713  00225A  C056  F04E         	movff	Set_LCD_BUFFER2@BUF_2+1,strcpy@src+1
  6714  00225E  ECFB  F00E         	call	_strcpy	;wreg free
  6715  002262  0012               	return		;funcret
  6716  002264  FFFF               	dw	65535	; errata NOP
  6717  002266                     __end_of_Set_LCD_BUFFER2:
  6718                           	opt callstack 0
  6719                           
  6720 ;; *************** function _Set_LCD_BUFFER1 *****************
  6721 ;; Defined at:
  6722 ;;		line 169 in file "LCD.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  BUF_1           2   10[COMRAM] PTR unsigned char 
  6725 ;;		 -> Disp_and_Blink_Time@LCD_Buffer_1(16), STR_3(17), STR_1(18), 
  6726 ;; Auto vars:     Size  Location     Type
  6727 ;;		None
  6728 ;; Return value:  Size  Location     Type
  6729 ;;                  1    wreg      void 
  6730 ;; Registers used:
  6731 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6732 ;; Tracked objects:
  6733 ;;		On entry : 0/0
  6734 ;;		On exit  : 0/0
  6735 ;;		Unchanged: 0/0
  6736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6737 ;;      Params:         2       0       0       0       0       0       0
  6738 ;;      Locals:         0       0       0       0       0       0       0
  6739 ;;      Temps:          0       0       0       0       0       0       0
  6740 ;;      Totals:         2       0       0       0       0       0       0
  6741 ;;Total ram usage:        2 bytes
  6742 ;; Hardware stack levels used:    1
  6743 ;; Hardware stack levels required when called:    1
  6744 ;; This function calls:
  6745 ;;		_strcpy
  6746 ;; This function is called by:
  6747 ;;		_MW_Update
  6748 ;;		_Disp_Time
  6749 ;;		_Disp_and_Blink_Time
  6750 ;; This function uses a non-reentrant model
  6751 ;;
  6752                           
  6753                           	psect	text40
  6754  002266                     __ptext40:
  6755                           	opt callstack 0
  6756  002266                     _Set_LCD_BUFFER1:
  6757                           	opt callstack 0
  6758  002266  FFFF               	dw	65535	; assembler added errata NOP
  6759  002268                     
  6760                           ;LCD.c: 169: void Set_LCD_BUFFER1 (tByte *BUF_1 );LCD.c: 170: {;LCD.c: 171:    strcpy(LC
      +                          D_LINE_2_Buffer ,BUF_1);
  6761  002268  0E80               	movlw	low _LCD_LINE_2_Buffer
  6762  00226A  6E4B               	movwf	strcpy@dest^0,c
  6763  00226C  0E00               	movlw	high _LCD_LINE_2_Buffer
  6764  00226E  6E4C               	movwf	(strcpy@dest+1)^0,c
  6765  002270  C055  F04D         	movff	Set_LCD_BUFFER1@BUF_1,strcpy@src
  6766  002274  C056  F04E         	movff	Set_LCD_BUFFER1@BUF_1+1,strcpy@src+1
  6767  002278  ECFB  F00E         	call	_strcpy	;wreg free
  6768  00227C  0012               	return		;funcret
  6769  00227E  FFFF               	dw	65535	; errata NOP
  6770  002280                     __end_of_Set_LCD_BUFFER1:
  6771                           	opt callstack 0
  6772                           
  6773 ;; *************** function _strcpy *****************
  6774 ;; Defined at:
  6775 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  dest            2    0[COMRAM] PTR unsigned char 
  6778 ;;		 -> LCD_LINE_1_Buffer(16), LCD_LINE_2_Buffer(16), 
  6779 ;;  src             2    2[COMRAM] PTR const unsigned char 
  6780 ;;		 -> STR_9(17), Disp_and_Blink_Time@LCD_Buffer_1(16), STR_8(16), STR_7(17), 
  6781 ;;		 -> STR_6(17), STR_5(16), STR_4(17), STR_3(17), 
  6782 ;;		 -> STR_2(18), STR_1(18), 
  6783 ;; Auto vars:     Size  Location     Type
  6784 ;;  d               2    8[COMRAM] PTR unsigned char 
  6785 ;;		 -> LCD_LINE_1_Buffer(16), LCD_LINE_2_Buffer(16), 
  6786 ;;  s               2    6[COMRAM] PTR const unsigned char 
  6787 ;;		 -> STR_9(17), Disp_and_Blink_Time@LCD_Buffer_1(16), STR_8(16), STR_7(17), 
  6788 ;;		 -> STR_6(17), STR_5(16), STR_4(17), STR_3(17), 
  6789 ;;		 -> STR_2(18), STR_1(18), 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;                  2    0[COMRAM] PTR unsigned char 
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  6794 ;; Tracked objects:
  6795 ;;		On entry : 0/0
  6796 ;;		On exit  : 0/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6799 ;;      Params:         4       0       0       0       0       0       0
  6800 ;;      Locals:         4       0       0       0       0       0       0
  6801 ;;      Temps:          2       0       0       0       0       0       0
  6802 ;;      Totals:        10       0       0       0       0       0       0
  6803 ;;Total ram usage:       10 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; This function calls:
  6806 ;;		Nothing
  6807 ;; This function is called by:
  6808 ;;		_Set_LCD_BUFFER1
  6809 ;;		_Set_LCD_BUFFER2
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           	psect	text41
  6814  001DF6                     __ptext41:
  6815                           	opt callstack 0
  6816  001DF6                     _strcpy:
  6817                           	opt callstack 0
  6818  001DF6  FFFF               	dw	65535	; assembler added errata NOP
  6819  001DF8  C04D  F051         	movff	strcpy@src,strcpy@s
  6820  001DFC  C04E  F052         	movff	strcpy@src+1,strcpy@s+1
  6821  001E00  C04B  F053         	movff	strcpy@dest,strcpy@d
  6822  001E04  C04C  F054         	movff	strcpy@dest+1,strcpy@d+1
  6823  001E08                     i2l2254:
  6824  001E08  FFFF               	dw	65535	; assembler added errata NOP
  6825  001E0A  5051               	movf	strcpy@s^0,w,c
  6826  001E0C  6E4F               	movwf	??_strcpy^0,c
  6827  001E0E  5052               	movf	(strcpy@s+1)^0,w,c
  6828  001E10  6E50               	movwf	(??_strcpy+1)^0,c
  6829  001E12  4A51               	infsnz	strcpy@s^0,f,c
  6830  001E14  2A52               	incf	(strcpy@s+1)^0,f,c
  6831  001E16  C04F  FFF6         	movff	??_strcpy,tblptrl
  6832  001E1A  C050  FFF7         	movff	??_strcpy+1,tblptrh
  6833  001E1E  6AF8               	clrf	tblptru,c
  6834  001E20  C053  FFD9         	movff	strcpy@d,fsr2l
  6835  001E24  C054  FFDA         	movff	strcpy@d+1,fsr2h
  6836  001E28  4A53               	infsnz	strcpy@d^0,f,c
  6837  001E2A  2A54               	incf	(strcpy@d+1)^0,f,c
  6838  001E2C  0E05               	movlw	(high __ramtop+-1)
  6839  001E2E  64F7               	cpfsgt	tblptrh,c
  6840  001E30  D004               	bra	i2u132_47
  6841  001E32  0008               	tblrd		*
  6842  001E34  FFFF               	dw	65535	; errata NOP
  6843  001E36  50F5               	movf	tablat,w,c
  6844  001E38  D005               	bra	i2u132_40
  6845  001E3A                     i2u132_47:
  6846  001E3A  CFF6 FFE9          	movff	tblptrl,fsr0l
  6847  001E3E  CFF7 FFEA          	movff	tblptrh,fsr0h
  6848  001E42  50EF               	movf	indf0,w,c
  6849  001E44                     i2u132_40:
  6850  001E44  6EDF               	movwf	indf2,c
  6851  001E46  50DF               	movf	indf2,w,c
  6852  001E48  A4D8               	btfss	status,2,c
  6853  001E4A  EF29  F00F         	goto	i2u133_41
  6854  001E4E  EF2C  F00F         	goto	i2u133_40
  6855  001E52                     i2u133_41:
  6856  001E52  FFFF               	dw	65535	; assembler added errata NOP
  6857  001E54  EF04  F00F         	goto	i2l2254
  6858  001E58                     i2u133_40:
  6859  001E58  FFFF               	dw	65535	; assembler added errata NOP
  6860  001E5A  0012               	return		;funcret
  6861  001E5C  FFFF               	dw	65535	; errata NOP
  6862  001E5E                     __end_of_strcpy:
  6863                           	opt callstack 0
  6864                           
  6865                           	psect	rparam
  6866  0000                     
  6867                           	psect	temp
  6868  000078                     btemp:
  6869                           	opt callstack 0
  6870  000078                     	ds	1
  6871  0000                     int$flags	set	btemp
  6872  0000                     wtemp8	set	btemp+1
  6873  0000                     ttemp5	set	btemp+1
  6874  0000                     ttemp6	set	btemp+4
  6875  0000                     ttemp7	set	btemp+8
  6876                           tosu	equ	0xFFF
  6877                           tosh	equ	0xFFE
  6878                           tosl	equ	0xFFD
  6879                           stkptr	equ	0xFFC
  6880                           pclatu	equ	0xFFB
  6881                           pclath	equ	0xFFA
  6882                           pcl	equ	0xFF9
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           indf0	equ	0xFEF
  6890                           postinc0	equ	0xFEE
  6891                           postdec0	equ	0xFED
  6892                           preinc0	equ	0xFEC
  6893                           plusw0	equ	0xFEB
  6894                           fsr0h	equ	0xFEA
  6895                           fsr0l	equ	0xFE9
  6896                           wreg	equ	0xFE8
  6897                           indf1	equ	0xFE7
  6898                           postinc1	equ	0xFE6
  6899                           postdec1	equ	0xFE5
  6900                           preinc1	equ	0xFE4
  6901                           plusw1	equ	0xFE3
  6902                           fsr1h	equ	0xFE2
  6903                           fsr1l	equ	0xFE1
  6904                           bsr	equ	0xFE0
  6905                           indf2	equ	0xFDF
  6906                           postinc2	equ	0xFDE
  6907                           postdec2	equ	0xFDD
  6908                           preinc2	equ	0xFDC
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8


Data Sizes:
    Strings     153
    Constant    0
    Data        8
    BSS         90
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     37     119
    BANK0           128      3      19
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    strcpy@dest	PTR unsigned char  size(2) Largest target is 16
		 -> LCD_LINE_1_Buffer(COMRAM[16]), LCD_LINE_2_Buffer(BANK0[16]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 16
		 -> LCD_LINE_1_Buffer(COMRAM[16]), LCD_LINE_2_Buffer(BANK0[16]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[17]), Disp_and_Blink_Time@LCD_Buffer_1(COMRAM[16]), STR_8(CODE[16]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[16]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[17]), Disp_and_Blink_Time@LCD_Buffer_1(COMRAM[16]), STR_8(CODE[16]), STR_7(CODE[17]), 
		 -> STR_6(CODE[17]), STR_5(CODE[16]), STR_4(CODE[17]), STR_3(CODE[17]), 
		 -> STR_2(CODE[18]), STR_1(CODE[18]), 

    Keypad_Scan@pKey	PTR unsigned char  size(2) Largest target is 1
		 -> Keypad_Update@Key(COMRAM[1]), 

    Keypad_Get_Data_From_buffer@pKey	PTR unsigned char  size(2) Largest target is 1
		 -> MW_Update@Pressed_Key(COMRAM[1]), 

    TIM_GetTime@time	PTR struct . size(2) Largest target is 2
		 -> Disp_Update@time(COMRAM[2]), 

    Set_LCD_BUFFER2@BUF_2	PTR unsigned char  size(2) Largest target is 18
		 -> STR_9(CODE[17]), STR_8(CODE[16]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[16]), STR_4(CODE[17]), STR_2(CODE[18]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 16
		 -> LCD_LINE_1_Buffer(COMRAM[16]), LCD_LINE_2_Buffer(BANK0[16]), 

    Set_LCD_BUFFER1@BUF_1	PTR unsigned char  size(2) Largest target is 18
		 -> Disp_and_Blink_Time@LCD_Buffer_1(COMRAM[16]), STR_3(CODE[17]), STR_1(CODE[18]), 

    LCD_SendString@str	PTR unsigned char  size(2) Largest target is 16
		 -> LCD_LINE_1_Buffer(COMRAM[16]), LCD_LINE_2_Buffer(BANK0[16]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _TMR_Update in COMRAM

    _TMR_Update->_Disp_Update
    _MW_Update->_Set_LCD_BUFFER1
    _MW_Update->_Set_LCD_BUFFER2
    _Toggle_Lamps->_DO_SetState
    _LCD_Clear->i2_LCD_SendCommand
    _LCD_Update->_LCD_SendString
    _LCD_SendString->_LCD_SendChar
    _LCD_SendChar->_LCD_GoTo
    _LCD_SendData->i2_LCD_Port
    _LCD_GoTo->i2_LCD_SendCommand
    i2_LCD_SendCommand->i2_LCD_Port
    _Keypad_Update->_Keypad_Scan
    _Disp_Update->_Disp_Time
    _Disp_Time->_Disp_and_Blink_Time
    _Disp_and_Blink_Time->_Set_LCD_BUFFER1
    _Disp_and_Blink_Time->_Set_LCD_BUFFER2
    _Set_LCD_BUFFER2->_strcpy
    _Set_LCD_BUFFER1->_strcpy

Critical Paths under _main in BANK0

    _main->_SW_Init
    _LCD_Init->_LCD_SendCommand
    _LCD_SendCommand->_LCD_Port

Critical Paths under _TMR_Update in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _TMR_Update in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR_Update in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR_Update in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR_Update in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR_Update in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     132
                            _DO_Init
                        _Keypad_Init
                           _LCD_Init
                            _SW_Init
                           _TIM_Init
                           _TMR_Init
                          _TMR_Start
 ---------------------------------------------------------------------------------
 (1) _TMR_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TMR_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _TIM_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              3     3      0      22
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             0     0      0     110
                    _LCD_SendCommand
 ---------------------------------------------------------------------------------
 (2) _LCD_SendCommand                                      1     1      0     110
                                              1 BANK0      1     1      0
                           _LCD_Port
 ---------------------------------------------------------------------------------
 (3) _LCD_Port                                             1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Keypad_Init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DO_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _TMR_Update                                          12    12      0   14763
                                             25 COMRAM    12    12      0
                        _Disp_Update
                      _Keypad_Update
                         _LCD_Update
                          _MW_Update
                          _SW_Update
                         _TIM_Update
 ---------------------------------------------------------------------------------
 (5) _TIM_Update                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SW_Update                                            3     3      0     285
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) _MW_Update                                            4     4      0    5203
                                             12 COMRAM     4     4      0
                        _DO_SetState
                        _Is_Finished
        _Keypad_Get_Data_From_buffer
                          _LCD_Clear
                        _SW_GetState
       _Set_Disp_Current_Count_State
                     _Set_Disp_State
                    _Set_LCD_BUFFER1
                    _Set_LCD_BUFFER2
        _Set_TIM_Current_Count_State
                           _Set_Time
                       _Toggle_Lamps
 ---------------------------------------------------------------------------------
 (6) _Toggle_Lamps                                         0     0      0     946
                        _DO_SetState
 ---------------------------------------------------------------------------------
 (7) _DO_SetState                                          4     3      1     946
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (6) _Set_Time                                             4     1      3    1274
                                              0 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (6) _Set_TIM_Current_Count_State                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Set_Disp_State                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Set_Disp_Current_Count_State                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _SW_GetState                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _LCD_Clear                                            0     0      0     110
                  i2_LCD_SendCommand
 ---------------------------------------------------------------------------------
 (6) _Keypad_Get_Data_From_buffer                          2     0      2     174
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Is_Finished                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _LCD_Update                                           0     0      0    1178
                     _LCD_SendString
 ---------------------------------------------------------------------------------
 (6) _LCD_SendString                                       5     2      3    1178
                                             13 COMRAM     5     2      3
                       _LCD_SendChar
 ---------------------------------------------------------------------------------
 (7) _LCD_SendChar                                         3     1      2     718
                                             10 COMRAM     3     1      2
                           _LCD_GoTo
                       _LCD_SendData
 ---------------------------------------------------------------------------------
 (8) _LCD_SendData                                         3     3      0     178
                                              1 COMRAM     3     3      0
                         i2_LCD_Port
 ---------------------------------------------------------------------------------
 (8) _LCD_GoTo                                             8     7      1     322
                                              2 COMRAM     8     7      1
                  i2_LCD_SendCommand
 ---------------------------------------------------------------------------------
 (7) i2_LCD_SendCommand                                    1     1      0     110
                                              1 COMRAM     1     1      0
                         i2_LCD_Port
 ---------------------------------------------------------------------------------
 (8) i2_LCD_Port                                           1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Keypad_Update                                        1     1      0     289
                                              4 COMRAM     1     1      0
                        _Keypad_Scan
 ---------------------------------------------------------------------------------
 (6) _Keypad_Scan                                          4     2      2     243
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (5) _Disp_Update                                          2     2      0    7808
                                             23 COMRAM     2     2      0
                          _Disp_Time
                        _TIM_GetTime
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     600
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     604
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (6) _TIM_GetTime                                          2     0      2     120
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) _Disp_Time                                            3     3      0    6368
                                             20 COMRAM     3     3      0
                _Disp_and_Blink_Time
                    _Set_LCD_BUFFER1
                    _Set_LCD_BUFFER2
 ---------------------------------------------------------------------------------
 (7) _Disp_and_Blink_Time                                  8     4      4    4742
                                             12 COMRAM     8     4      4
                    _Set_LCD_BUFFER1
                    _Set_LCD_BUFFER2
 ---------------------------------------------------------------------------------
 (6) _Set_LCD_BUFFER2                                      2     0      2     954
                                             10 COMRAM     2     0      2
                             _strcpy
 ---------------------------------------------------------------------------------
 (6) _Set_LCD_BUFFER1                                      2     0      2     650
                                             10 COMRAM     2     0      2
                             _strcpy
 ---------------------------------------------------------------------------------
 (7) _strcpy                                              10     6      4     400
                                              0 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DO_Init
   _Keypad_Init
   _LCD_Init
     _LCD_SendCommand
       _LCD_Port
   _SW_Init
   _TIM_Init
   _TMR_Init
   _TMR_Start

 _TMR_Update (ROOT)
   _Disp_Update
     _Disp_Time
       _Disp_and_Blink_Time
         _Set_LCD_BUFFER1
           _strcpy
         _Set_LCD_BUFFER2
           _strcpy
       _Set_LCD_BUFFER1
         _strcpy
       _Set_LCD_BUFFER2
         _strcpy
     _TIM_GetTime
     ___awdiv
     ___awmod
   _Keypad_Update
     _Keypad_Scan
   _LCD_Update
     _LCD_SendString
       _LCD_SendChar
         _LCD_GoTo
           i2_LCD_SendCommand
             i2_LCD_Port
         _LCD_SendData
           i2_LCD_Port
   _MW_Update
     _DO_SetState
     _Is_Finished
     _Keypad_Get_Data_From_buffer
     _LCD_Clear
       i2_LCD_SendCommand
         i2_LCD_Port
     _SW_GetState
     _Set_Disp_Current_Count_State
     _Set_Disp_State
     _Set_LCD_BUFFER1
       _strcpy
     _Set_LCD_BUFFER2
       _strcpy
     _Set_TIM_Current_Count_State
     _Set_Time
     _Toggle_Lamps
       _DO_SetState
   _SW_Update
   _TIM_Update

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      3      13       5       14.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     25      77       1       94.4%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      8A      15        0.0%
DATA                 0      0      8A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Thu Mar 05 02:16:53 2020

                                           __end_of_SW_GetState 224C  
                                                  ___awdiv@sign 0050  
                                                   ?_LCD_Update 004B  
                                                  __CFG_CP0$OFF 000000  
                                                  __CFG_CP1$OFF 000000  
                                                  __CFG_CP2$OFF 000000  
                                                  __CFG_CP3$OFF 000000  
                                                   __CFG_OSC$XT 000000  
                                                    _TMR_Update 0008  
                                               TIM_GetTime@time 004B  
                                                           l132 21BE  
                                                           l400 22CC  
                                                           l129 1D7E  
                                                           l155 1B0E  
                                                           l403 22AA  
                                                           l316 2160  
                                                           l340 22DA  
                                                           l188 1DF0  
                                                           l437 20F0  
                                                           l495 218A  
                                                           l496 218C  
                                                           _GIE 007F97  
                                                  __CFG_CPB$OFF 000000  
                                                  __CFG_CPD$OFF 000000  
                                                           _PSA 007EAB  
                                                  __CFG_BOR$OFF 000000  
                                                  __CFG_BORV$20 000000  
                                                  ___awmod@sign 0050  
                                                           prod 000FF3  
                                                           wreg 000FE8  
                                           SW_Update@SW_counter 0014  
                                                 ?_LCD_SendChar 0055  
                                                 ?_LCD_SendData 004B  
                                                  __CFG_LVP$OFF 000000  
                                                _Last_Valid_Key 0072  
                                                _LCD_SendString 1F8C  
                                                  __CFG_WDT$OFF 000000  
                                                          l3100 1D72  
                                                          l3102 1D78  
                                                          l3110 1D9A  
                                                          l3120 1DB8  
                                                          l3112 1D9E  
                                                          l3104 1D88  
                                                          l3050 1A96  
                                                          l3114 1DA6  
                                                          l3106 1D8C  
                                                          l3132 2130  
                                                          l3060 1ADE  
                                                          l3052 1AAA  
                                                          l3044 1A6E  
                                                          l3300 1DD8  
                                                          l3116 1DB0  
                                                          l3108 1D96  
                                                          l3124 1DC0  
                                                          l3140 229C  
                                                          l3150 20E8  
                                                          l3062 1AE6  
                                                          l3054 1AB6  
                                                          l3046 1A82  
                                                          l3070 21A0  
                                                          l3118 1DB4  
                                                          l3134 22D2  
                                                          l3142 22A4  
                                                          l3152 20EC  
                                                          l3064 1AFA  
                                                          l3056 1ABE  
                                                          l3048 1A8E  
                                                          l3072 21A8  
                                                          l3080 1D32  
                                                          l3136 22C2  
                                                          l3144 22A6  
                                                          l3160 2172  
                                                          l3066 1B06  
                                                          l3058 1AD2  
                                                          l3074 21B0  
                                                          l3090 1D54  
                                                          l3082 1D38  
                                                          l3146 22A8  
                                                          l3138 229A  
                                                          l3162 2176  
                                                          l3154 2164  
                                                          l3148 20B6  
                                                          l3076 21B8  
                                                          l3068 219A  
                                                          l3092 1D5A  
                                                          l3084 1D40  
                                                          l3164 217A  
                                                          l3156 216A  
                                                          l3094 1D60  
                                                          l3086 1D46  
                                                          l3078 1CF6  
                                                          l3166 2180  
                                                          l3158 216E  
                                                          l3096 1D66  
                                                          l3088 1D4E  
                                                          l3168 2186  
                                                          l3098 1D6C  
                                               __end_of_DO_Init 2164  
                                                          STR_1 0601  
                                                          STR_2 0613  
                                                          STR_3 0625  
                                                          STR_4 0669  
                                                          STR_5 068A  
                                                          STR_6 0636  
                                                          STR_7 0658  
                                                          STR_8 067A  
                                                          STR_9 0647  
                                                          _T0CS 007EAD  
                                                          u2330 1A80  
                                                          u2331 1A7A  
                                                          u2340 1AA8  
                                                          u2341 1AA2  
                                                          u2350 1AD0  
                                                          u2351 1ACA  
                                                          u2360 1AF8  
                                                          u2361 1AF2  
                                                          u2377 1D3A  
                                                          u2387 1D48  
                                                          u2397 21B2  
                                                          i2l80 0A38  
                                                          i2l48 0CD8  
                                                          i2l66 08D0  
                                                          _TMR0 000FD6  
                                                          _main 2164  
                                                   ?i2_LCD_Port 004B  
                                            __size_of_LCD_Clear 0012  
                                                          fsr0h 000FEA  
                                                          fsr1h 000FE2  
                                                          indf0 000FEF  
                                                          fsr2h 000FDA  
                                                          fsr0l 000FE9  
                                                          indf1 000FE7  
                                                          indf2 000FDF  
                                                          fsr1l 000FE1  
                                                          fsr2l 000FD9  
                                                          btemp 0078  
                                                          prodh 000FF4  
                                                          prodl 000FF3  
                                                          start 0094  
                                               _LCD_SendCommand 2194  
                                           __end_of_Disp_Update 1CF4  
                                               __end_of_SW_Init 1DF6  
                                                  ___param_bank 000000  
                                  ?_Set_TIM_Current_Count_State 004B  
                                              __end_of_LCD_GoTo 202C  
                                              Keypad_Update@Key 004F  
                                              __end_of_LCD_Init 1D82  
                                              _Current_MW_State 0028  
                                              __end_of_LCD_Port 1B14  
                                                 __CFG_OSCS$OFF 000000  
                                           __end_of_Is_Finished 212E  
                                        __size_of_Keypad_Update 00A2  
                                                         ?_main 004B  
                                               __end_of___awdiv 1810  
                                               __end_of___awmod 18EC  
                                               ___awdiv@divisor 004D  
                                                         _T0PS0 007EA8  
                                                         _T0PS1 007EA9  
                                                         _T0PS2 007EAA  
                                                         i2l201 111E  
                                                         i2l132 21E8  
                                                         i2l141 1FDA  
                                                         i2l302 22F2  
                                                         i2l135 2294  
                                                         i2l144 1F26  
                                                         i2l161 2028  
                                                         i2l305 22FE  
                                                         i2l171 227C  
                                                         i2l155 1BB6  
                                                         i2l333 1EBE  
                                                         i2l174 2262  
                                                         i2l246 1CEE  
                                                         i2l158 22BC  
                                                         i2l326 19A6  
                                                         i2l414 005E  
                                                         i2l343 222E  
                                                         i2l191 2248  
                                                         i2l168 1F86  
                                                         i2l361 2128  
                                                         i2l258 1680  
                                                         i2l450 20AE  
                                                         i2l267 171A  
                                                         i2l443 1C58  
                                                         i2l365 22E6  
                                                         i2l357 220C  
                                                         i2l197 12C8  
                                                         i2l349 1A62  
                                                         i2l286 105A  
                                                         i2l732 180C  
                                                         i2l468 152E  
                                                         i2l469 1524  
                                                         i2l745 18E8  
                                               ___awdiv@counter 004F  
                                                 ??_Keypad_Init 0090  
                                                 ??_Keypad_Scan 004D  
                                                         _PORTB 000F81  
                                                         _PORTC 000F82  
                                                         _PORTD 000F83  
                                                         _PORTE 000F84  
                                                         _TRISB 000F93  
                                                         _TRISC 000F94  
                                                         _TRISD 000F95  
                                                         _TRISE 000F96  
                                                 __CFG_PWRT$OFF 000000  
                                                 __CFG_WRT0$OFF 000000  
                                                 __CFG_WRT1$OFF 000000  
                                                 __CFG_WRT2$OFF 000000  
                                                  LCD_GoTo@line 0051  
                                                 __CFG_WRT3$OFF 000000  
                                                  ?_DO_SetState 004B  
                                                __CFG_EBTR0$OFF 000000  
                                                __CFG_EBTR1$OFF 000000  
                                        __end_of_LCD_SendString 1FDE  
                                                __CFG_EBTR2$OFF 000000  
                                                __CFG_EBTR3$OFF 000000  
                                                 __CFG_STVR$OFF 000000  
                                                ??_LCD_SendChar 0057  
                                                ??_LCD_SendData 004C  
                                                 __CFG_WRTB$OFF 000000  
                                                 __CFG_WRTC$OFF 000000  
                                                 __CFG_WRTD$OFF 000000  
                                                __CFG_EBTRB$OFF 000000  
                                              __end_of_TIM_Init 22DE  
                                   Disp_and_Blink_Time@Min_Unit 0057  
                                   Disp_and_Blink_Time@Sec_Unit 0059  
                                                    _Door_State 0029  
                                                         tablat 000FF5  
                                              __end_of_TMR_Init 22D0  
                                           __size_of_LCD_Update 0062  
                                                         ttemp5 0079  
                                                         ttemp6 007C  
                                                         ttemp7 0080  
                                                         status 000FD8  
                                                         wtemp8 0079  
                                      i2LCD_SendCommand@command 004C  
                                                   ?_TIM_Update 004B  
                Set_TIM_Current_Count_State@Current_Count_State 004B  
               Set_Disp_Current_Count_State@Current_Count_State 004B  
                                          MW_Update@Min_Ten_val 0026  
                                                   _SW_GetState 2232  
                                            __size_of_TMR_Start 0016  
                                               __initialization 202C  
                                            __size_of_MW_Update 0642  
                                                  __end_of_main 2194  
                                 ??_Set_TIM_Current_Count_State 004B  
                                       _TIM_Current_Count_State 001C  
                                          MW_Update@Sec_Ten_val 0024  
                                                        ??_main 0093  
                                                   ?_TMR_Update 004B  
                                             __end_of_LCD_Clear 22C0  
                                                 __activetblptr 000002  
                                              __end_of_Set_Time 2210  
                                           __size_ofi2_LCD_Port 00A8  
                                            __size_of_SW_Update 026E  
                                                     ??_DO_Init 0090  
                                            __size_of_Disp_Time 01EC  
                                                  LCD_Port@Data 0090  
                                                SW_Update@index 004D  
                                               ?_LCD_SendString 0058  
                                              ___awdiv@dividend 004B  
                                           __end_of_Keypad_Init 20F4  
                                           __end_of_Keypad_Scan 1534  
                                       __end_of_LCD_SendCommand 21C2  
                                                        i2l2030 106A  
                                                        i2l2110 19D6  
                                                        i2l3000 1C42  
                                                        i2l2040 1094  
                                                        i2l2120 1A22  
                                                        i2l2112 19E0  
                                                        i2l3002 1C56  
                                                        i2l2050 1124  
                                                        i2l2042 10BA  
                                                        i2l2034 1086  
                                                        i2l2026 1062  
                                                        i2l2122 1A28  
                                                        i2l2114 19F6  
                                                        i2l2106 19AE  
                                                        i2l3010 004A  
                                                        i2l2300 18F0  
                                                        i2l2060 11C4  
                                                        i2l2052 114A  
                                                        i2l2044 10CE  
                                                        i2l2028 1062  
                                                        i2l2124 1A3E  
                                                        i2l2116 1A0A  
                                                        i2l3012 004E  
                                                        i2l3004 003C  
                                                        i2l2230 1B2A  
                                                        i2l2302 18F4  
                                                        i2l2062 11EA  
                                                        i2l2054 116E  
                                                        i2l2046 10EC  
                                                        i2l2126 1A52  
                                                        i2l2118 1A1E  
                                                        i2l3014 0052  
                                                        i2l3006 003E  
                                                        i2l2400 0ED6  
                                                        i2l2240 1B66  
                                                        i2l2232 1B36  
                                                        i2l2320 228E  
                                                        i2l2304 1916  
                                                        i2l2312 1968  
                                                        i2l2064 120E  
                                                        i2l2056 1186  
                                                        i2l2048 1102  
                                                        i2l2072 1264  
                                                        i2l2128 1A5E  
                                                        i2l3016 0056  
                                                        i2l3008 0046  
                                                        i2l1178 1E5A  
                                                        i2l2410 0F1A  
                                                        i2l2402 0EE0  
                                                        i2l2330 0D14  
                                                        i2l2322 0CE2  
                                                        i2l2250 1BAE  
                                                        i2l2242 1B7A  
                                                        i2l2234 1B3E  
                                                        i2l1434 22E2  
                                                        i2l2306 1930  
                                                        i2l2066 1226  
                                                        i2l2058 11AC  
                                                        i2l2074 12B2  
                                                        i2l3018 005A  
                                                        i2l2252 1DF8  
                                                        i2l2420 0F50  
                                                        i2l2412 0F36  
                                                        i2l2404 0EE6  
                                                        i2l2340 0D4A  
                                                        i2l2332 0D1E  
                                                        i2l2324 0CEE  
                                                        i2l2500 2212  
                                                        i2l2244 1B86  
                                                        i2l2236 1B52  
                                                        i2l2228 1B18  
                                                        i2l2260 21D2  
                                                        i2l1436 22FA  
                                                        i2l2308 1946  
                                                        i2l2076 12B6  
                                                        i2l2068 124C  
                                                        i2l2254 1E08  
                                                        i2l3310 0FD4  
                                                        i2l2430 0FA4  
                                                        i2l2414 0F3A  
                                                        i2l2422 0F56  
                                                        i2l2406 0EEC  
                                                        i2l2350 0D98  
                                                        i2l2342 0D66  
                                                        i2l2334 0D24  
                                                        i2l2326 0D0A  
                                                        i2l2510 1576  
                                                        i2l2502 221E  
                                                        i2l2246 1B8E  
                                                        i2l2238 1B5E  
                                                        i2l2262 21DA  
                                                        i2l2270 1FE2  
                                                        i2l2318 2284  
                                                        i2l3302 128A  
                                                        i2l2432 0FAE  
                                                        i2l2424 0F74  
                                                        i2l2416 0F40  
                                                        i2l2408 0F0A  
                                                        i2l2360 0DDC  
                                                        i2l2352 0DA2  
                                                        i2l2344 0D72  
                                                        i2l2440 1014  
                                                        i2l2328 0D0E  
                                                        i2l2336 0D2A  
                                                        i2l2520 1608  
                                                        i2l2512 1592  
                                                        i2l2504 1538  
                                                        i2l2600 1436  
                                                        i2l2248 1BA2  
                                                        i2l2264 21E2  
                                                        i2l2256 21C6  
                                                        i2l2280 2022  
                                                        i2l2272 1FE2  
                                                        i2l1480 210A  
                                                        i2l1464 2236  
                                                        i2l3304 0C90  
                                                        i2l2266 2268  
                                                        i2l2450 102E  
                                                        i2l2434 0FB4  
                                                        i2l2426 0F98  
                                                        i2l2418 0F4A  
                                                        i2l2370 0E12  
                                                        i2l2362 0DF8  
                                                        i2l2354 0DA8  
                                                        i2l2346 0D8E  
                                                        i2l2338 0D46  
                                                        i2l2530 169E  
                                                        i2l2522 161E  
                                                        i2l2514 15AE  
                                                        i2l2506 153C  
                                                        i2l2610 149C  
                                                        i2l2602 1458  
                                                        i2l2258 21CC  
                                                        i2l2274 1FF0  
                                                        i2l2290 1EF4  
                                                        i2l2282 1EC8  
                                                        i2l1482 211E  
                                                        i2l3306 197E  
                                                        i2l2268 224E  
                                                        i2l2452 1042  
                                                        i2l2428 0F9E  
                                                        i2l2380 0E62  
                                                        i2l2364 0DFC  
                                                        i2l2372 0E18  
                                                        i2l2348 0D92  
                                                        i2l2356 0DAE  
                                                        i2l3308 16DA  
                                                        i2l2524 1644  
                                                        i2l2516 15CA  
                                                        i2l2508 155A  
                                                        i2l2700 1870  
                                                        i2l2620 14D8  
                                                        i2l2612 14A0  
                                                        i2l2604 145C  
                                                        i2l2276 2014  
                                                        i2l2292 1EFA  
                                                        i2l2284 1EDC  
                                                        i2l2460 208A  
                                                        i2l1468 22EE  
                                                        i2l2446 101A  
                                                        i2l2382 0E66  
                                                        i2l2390 0E82  
                                                        i2l2374 0E36  
                                                        i2l2366 0E02  
                                                        i2l2358 0DCC  
                                                        i2l2438 0FBE  
                                                        i2l2526 165A  
                                                        i2l2518 15E2  
                                                        i2l2710 18BA  
                                                        i2l2702 187A  
                                                        i2l2630 151A  
                                                        i2l2614 14B4  
                                                        i2l2606 147C  
                                                        i2l2550 12EA  
                                                        i2l2542 12D0  
                                                        i2l2278 201C  
                                                        i2l2294 1F02  
                                                        i2l2286 1EE4  
                                                        i2l1478 20F6  
                                                        i2l2462 20A2  
                                                        i2l2448 102C  
                                                        i2l2392 0EA0  
                                                        i2l2384 0E6C  
                                                        i2l2368 0E0C  
                                                        i2l2528 1686  
                                                        i2l2536 16C4  
                                                        i2l2640 1722  
                                                        i2l2704 188E  
                                                        i2l2712 18C0  
                                                        i2l2632 151E  
                                                        i2l2624 14E0  
                                                        i2l2616 14B8  
                                                        i2l2608 1480  
                                                        i2l2560 133C  
                                                        i2l2552 12F2  
                                                        i2l2544 12D4  
                                                        i2l2296 1F10  
                                                        i2l2288 1EEC  
                                                        i2l1488 2124  
                                                        i2l2464 20A4  
                                                        i2l2480 1EBA  
                                                        i2l2472 1E60  
                                                        i2l2720 069E  
                                                        i2l2394 0EB0  
                                                        i2l2386 0E76  
                                                        i2l2378 0E46  
                                                        i2l2650 1758  
                                                        i2l2642 1726  
                                                        i2l2714 18D6  
                                                        i2l2706 18AA  
                                                        i2l2626 14F8  
                                                        i2l2618 14D0  
                                                        i2l2570 137E  
                                                        i2l2562 1358  
                                                        i2l2554 1314  
                                                        i2l2546 12DA  
                                                        i2l2298 1F18  
                                                        i2l2458 2074  
                                                        i2l2490 2208  
                                                        i2l2474 1E7A  
                                                        i2l2730 06F0  
                                                        i2l2396 0ECC  
                                                        i2l2388 0E7C  
                                                        i2l2660 178C  
                                                        i2l2652 1760  
                                                        i2l2644 1738  
                                                        i2l2716 18DE  
                                                        i2l2708 18B2  
                                                        i2l2628 150E  
                                                        i2l2580 13BA  
                                                        i2l2572 1384  
                                                        i2l2564 135C  
                                                        i2l2556 1318  
                                                        i2l2548 12E2  
                                                        i2l2492 1F90  
                                                        i2l2468 20AA  
                                                        i2l2484 22B0  
                                                        i2l2476 1E8E  
                                                        i2l2820 097C  
                                                        i2l2740 077A  
                                                        i2l2732 0710  
                                                        i2l2724 06DE  
                                                        i2l2398 0ED0  
                                                        i2l2670 17D4  
                                                        i2l2662 1796  
                                                        i2l2654 1764  
                                                        i2l2646 1740  
                                                        i2l2590 1412  
                                                        i2l2582 13DA  
                                                        i2l2574 138C  
                                                        i2l2566 1370  
                                                        i2l2558 1338  
                                                        i2l2494 1F98  
                                                        i2l2486 21F0  
                                                        i2l2478 1EA6  
                                                        i2l2910 0B82  
                                                        i2l2902 0B5E  
                                                        i2l2822 0984  
                                                        i2l2814 094A  
                                                        i2l2806 092E  
                                                        i2l2750 07CE  
                                                        i2l2742 078E  
                                                        i2l2734 071C  
                                                        i2l2726 06E4  
                                                        i2l2680 1802  
                                                        i2l2672 17D6  
                                                        i2l2664 17AA  
                                                        i2l2656 176E  
                                                        i2l2648 1744  
                                                        i2l2592 1416  
                                                        i2l2584 13DE  
                                                        i2l2576 1394  
                                                        i2l2568 1374  
                                                        i2l2496 1FB6  
                                                        i2l2488 2204  
                                                        i2l2920 0BD4  
                                                        i2l2912 0B9A  
                                                        i2l2904 0B74  
                                                        i2l2824 099A  
                                                        i2l2816 0962  
                                                        i2l2760 0816  
                                                        i2l2752 07E8  
                                                        i2l2744 0798  
                                                        i2l2736 0734  
                                                        i2l2728 06EA  
                                                        i2l2674 17DE  
                                                        i2l2666 17B2  
                                                        i2l2658 1784  
                                                        i2l2690 1830  
                                                        i2l2594 1420  
                                                        i2l2586 13FA  
                                                        i2l2578 13B6  
                                                        i2l2498 1FB8  
                                                        i2l2922 0BE6  
                                                        i2l2930 0BFA  
                                                        i2l2914 0BA6  
                                                        i2l2850 0A30  
                                                        i2l2826 09A2  
                                                        i2l2818 0978  
                                                        i2l2762 081E  
                                                        i2l2754 07F0  
                                                        i2l2746 07B4  
                                                        i2l2738 0750  
                                                        i2l2668 17CC  
                                                        i2l2676 17E4  
                                                        i2l2692 1834  
                                                        i2l2684 1812  
                                                        i2l2596 1428  
                                                        i2l2588 13FE  
                                                        i2l2940 0C54  
                                                        i2l2932 0C12  
                                                        i2l2924 0BEA  
                                                        i2l2916 0BAE  
                                                        i2l2908 0B7C  
                                                        i2l2860 0A7C  
                                                        i2l2852 0A3E  
                                                        i2l2844 09EE  
                                                        i2l2828 09B8  
                                                        i2l2836 09D2  
                                                        i2l2764 0826  
                                                        i2l2756 07F8  
                                                        i2l2748 07B8  
                                                        i2l2678 17FA  
                                                        i2l2694 1848  
                                                        i2l2686 1816  
                                                        i2l2598 142E  
                                                        i2l2942 0C6E  
                                                        i2l2934 0C28  
                                                        i2l2926 0BEE  
                                                        i2l2918 0BC4  
                                                        i2l2854 0A48  
                                                        i2l2846 0A06  
                                                        i2l2790 08D6  
                                                        i2l2782 0886  
                                                        i2l2766 083C  
                                                        i2l2774 0860  
                                                        i2l2758 080E  
                                                        i2l2696 1850  
                                                        i2l2688 1828  
                                                        i2l2960 1F70  
                                                        i2l2944 0C72  
                                                        i2l2936 0C30  
                                                        i2l2928 0BF2  
                                                        i2l2880 0AE0  
                                                        i2l2856 0A5E  
                                                        i2l2848 0A1C  
                                                        i2l2792 08E0  
                                                        i2l2784 089E  
                                                        i2l2776 0878  
                                                        i2l2768 0852  
                                                        i2l2698 1868  
                                                        i2l2970 1C98  
                                                        i2l2962 1F82  
                                                        i2l2954 1F2C  
                                                        i2l2938 0C48  
                                                        i2l2890 0B30  
                                                        i2l2882 0AE4  
                                                        i2l2858 0A66  
                                                        i2l2794 08F6  
                                                        i2l2786 08B4  
                                                        i2l2980 1CE2  
                                                        i2l2972 1CAE  
                                                        i2l2964 1C60  
                                                        i2l2956 1F46  
                                                        i2l2884 0AFA  
                                                        i2l2876 0AB2  
                                                        i2l2868 0A96  
                                                        i2l2796 08FE  
                                                        i2l2788 08C8  
                                                        i2l2948 0C7A  
                                                        i2l2982 1CE8  
                                                        i2l2974 1CC4  
                                                        i2l2966 1C6C  
                                                        i2l2990 1BEC  
                                                        i2l2958 1F58  
                                                        i2l2886 0B12  
                                                        i2l2894 0B3A  
                                                        i2l2878 0ACA  
                                                        i2l2798 0914  
                                                        i2l2976 1CC8  
                                                        i2l2968 1C82  
                                                        i2l2984 1BBE  
                                                        i2l2896 0B42  
                                                        i2l2888 0B28  
                                                        i2l2994 1C10  
                                                        i2l2898 0B56  
                                                        i2l2996 1C28  
                                                        i2l2988 1BE2  
                                                        i2l2998 1C30  
                                                   _Disp_Update 1C5E  
                                               _Set_LCD_BUFFER1 2266  
                                               _Set_LCD_BUFFER2 224C  
                                                 _Keypad_Update 1BBC  
                                                     ??_SW_Init 0090  
                                                        _TMR0IE 007F95  
                                                        _TMR0IF 007F92  
                                                __CFG_WDTPS$128 000000  
                                                        _TMR0ON 007EAF  
                                                 LCD_GoTo@Low_4 0052  
                                                   _Is_Finished 20F4  
                                              ??_Set_Disp_State 004B  
                                                     ??___awdiv 004F  
                                                     ??___awmod 004F  
                                          Set_LCD_BUFFER1@BUF_1 0055  
                                          Set_LCD_BUFFER2@BUF_2 0055  
                                                        clear_0 2052  
                                                        clear_1 205E  
                                              ___awdiv@quotient 0051  
                                               ___awmod@divisor 004D  
                                               ___awmod@counter 004F  
                                                        _strcpy 1DF6  
                                                  __pdataCOMRAM 0070  
                                           __size_of_TIM_Update 00BC  
                                                  __mediumconst 0000  
                                             __end_of_TMR_Start 22AE  
                                                        tblptrh 000FF7  
                                                        tblptrl 000FF6  
                                                  ?_TIM_GetTime 004B  
                                                        tblptru 000FF8  
                                             __end_of_MW_Update 0CDE  
                                      _Disp_Current_Count_State 001F  
                                               LCD_SendString@i 005C  
                                                ?_Keypad_Update 004B  
                                                Keypad_Scan@Key 004E  
                                                    __accesstop 0080  
                                       __end_of__initialization 2064  
                                                     ?_LCD_GoTo 004D  
                                                     ?_LCD_Init 004B  
                           __end_of_Keypad_Get_Data_From_buffer 20B4  
                                   _Keypad_Get_Data_From_buffer 2072  
                                                     ?_LCD_Port 004B  
                                           __size_of_TMR_Update 008C  
                                                 ___rparam_used 000001  
                                          _KEYPAD_reading_index 001B  
                                             __end_of_SW_Update 12CE  
                                             __end_of_Disp_Time 1720  
                                         MW_Update@Min_Unit_val 0027  
                                                __pcstackCOMRAM 004B  
                                          __end_of_LCD_SendChar 2298  
                                          __end_of_LCD_SendData 1F2A  
                                                  ??_LCD_Update 005D  
                                                     ?_TIM_Init 004B  
                                             MW_Update@Time_Val 0059  
                                          MW_Update@Pressed_Key 0077  
                                                     ?_TMR_Init 004B  
                                                   _Keypad_Init 20B4  
                                                   _Keypad_Scan 12CE  
                                       __end_of_Set_LCD_BUFFER1 2280  
                                       __end_of_Set_LCD_BUFFER2 2266  
                                                 SW_GetState@sw 004B  
                                          __size_of_DO_SetState 00C0  
                                         MW_Update@Sec_Unit_val 0025  
                                          _KEYPAD_writing_index 001A  
                                                    __pbssBANK0 0080  
                                              ?_LCD_SendCommand 004B  
                                         TIM_Update@Tim_Counter 0070  
                                                    ??_LCD_GoTo 004E  
                                                    ??_LCD_Init 0092  
                                                  ??i2_LCD_Port 004B  
                                                    ??_LCD_Port 0090  
                                            __end_of_LCD_Update 1F8C  
                                                     ?_Set_Time 004B  
                                  __size_of_Disp_and_Blink_Time 0382  
                                              __CFG_CCP2MUX$OFF 000000  
                                Set_Disp_State@Current_MW_State 004B  
                                                    ??_TIM_Init 0090  
                                                    ??_TMR_Init 0090  
                                                       ?_strcpy 004B  
                                          Set_Time@minutes_tens 004E  
                                            __end_ofi2_LCD_Port 1BBC  
                                                       _DO_Init 212E  
                                          Set_Time@seconds_tens 004C  
                                                       i2u32_40 2108  
                                                       i2u32_41 2102  
                                                       i2u33_40 211C  
                                                       i2u33_41 2116  
                                                LCD_GoTo@High_4 0053  
                                              LCD_SendChar@line 0055  
                                               ??_Keypad_Update 004F  
                                                i2LCD_Port@Data 004B  
                                                       _SW_Init 1D82  
                                                LCD_GoTo@column 004D  
                                                  ??_TIM_Update 004B  
                                                       _Min_Ten 0022  
                                                       _Sec_Ten 0020  
                                                  ?_SW_GetState 004B  
                                                    ??_Set_Time 004E  
                                                       __Hparam 0000  
                                                       __Lparam 0000  
                                                       ___awdiv 1720  
                                                       ___awmod 1810  
                                                  __psmallconst 0600  
                                                       __pcinit 202C  
                                                       __ramtop 0600  
                                              ??_LCD_SendString 005B  
                                                  ??_TMR_Update 0064  
                                                       __ptext0 2164  
                                                       __ptext1 2298  
                                                       __ptext2 22C0  
                                                       __ptext3 22D0  
                                                       __ptext4 1D82  
                                                       __ptext5 1CF4  
                                                       __ptext6 2194  
                                                       __ptext7 1A68  
                                                       __ptext8 20B4  
                                                       __ptext9 212E  
                                               __size_of_strcpy 0068  
                                                 ?_Toggle_Lamps 004B  
                                              ___awmod@dividend 004B  
                                            __end_of_TIM_Update 1A68  
                                              ?_Set_LCD_BUFFER1 0055  
                                              ?_Set_LCD_BUFFER2 0055  
                                                     _LCD_Clear 22AE  
                                              DO_SetState@state 004B  
                                          __size_of_TIM_GetTime 0022  
                                          end_of_initialization 2064  
                                                  ?_Disp_Update 004B  
                                                 __Lmediumconst 0000  
                                         __size_of_LCD_SendChar 0018  
                                         __size_of_LCD_SendData 0066  
                                            LCD_SendData@High_4 004D  
                                            __end_of_TMR_Update 0094  
                                                     SW_Init@sw 0092  
                                                  ?_Is_Finished 004B  
                                                       postdec1 000FE5  
                                                       postinc0 000FEE  
                                                       postinc2 000FDE  
                                            LCD_SendChar@column 0056  
                                                       strcpy@d 0053  
                                                       strcpy@s 0051  
                                Disp_and_Blink_Time@Blink_State 005A  
                                                ??_Toggle_Lamps 004F  
                                               Keypad_Scan@pKey 004B  
                                                    ?_LCD_Clear 004B  
                                                  _LCD_SendChar 2280  
                                                  _LCD_SendData 1EC4  
                                                     _TMR_Start 2298  
                                               _TIM_Finish_Flag 0017  
                                                     _MW_Update 069C  
                                             __size_of_LCD_GoTo 004E  
                                             __size_of_LCD_Init 008E  
                                             __size_of_LCD_Port 00AC  
                           __end_of_Set_TIM_Current_Count_State 22EA  
                                   _Set_TIM_Current_Count_State 22DE  
                                            _Disp_Current_State 001E  
                                                     _SW_Update 1060  
                                                     _Disp_Time 1534  
                          __size_of_Keypad_Get_Data_From_buffer 0042  
                                                 __pidataCOMRAM 2302  
                                             __size_of_TIM_Init 000E  
                                                  ?_Keypad_Init 004B  
                                                  ?_Keypad_Scan 004B  
                                                __end_of_strcpy 1E5E  
                                           start_initialization 202C  
                                             __size_of_TMR_Init 0010  
                                           _Disp_and_Blink_Time 0CDE  
                                                    ?_TMR_Start 004B  
                                                    ?_MW_Update 004B  
                                               _TIM_CurrentTime 0010  
                                          ?_Disp_and_Blink_Time 0057  
                                       Disp_Update@Disp_Counter 0073  
                                          __size_of_SW_GetState 001A  
                                             __size_of_Set_Time 0024  
                          __end_of_Set_Disp_Current_Count_State 2302  
                         __size_of_Set_Disp_Current_Count_State 000C  
                                  _Set_Disp_Current_Count_State 22F6  
                                                    ?_SW_Update 004B  
                                                    ?_Disp_Time 004B  
                                      Toggle_Lamps@Lamp_counter 001D  
                                                      ??_strcpy 004F  
                                                   __pbssCOMRAM 0001  
                                       __size_of_Set_Disp_State 000C  
                                                 ??_DO_SetState 004C  
                                                      ?_DO_Init 004B  
                                                 __pcstackBANK0 0090  
                                                   ??_LCD_Clear 004D  
                                                      ?_SW_Init 004B  
                                          __size_of_Disp_Update 0096  
                                         ??_Disp_and_Blink_Time 005B  
                                          __end_of_Toggle_Lamps 1EC4  
                                      __size_of_LCD_SendCommand 002E  
                                                     __pintcode 0008  
                                                      ?___awdiv 004B  
                                                      ?___awmod 004B  
                                          __size_of_Is_Finished 003A  
                                 ?_Set_Disp_Current_Count_State 004B  
                                                   __smallconst 0600  
                              Disp_and_Blink_Time@Blink_Counter 0012  
                                            _Keypad_Recv_Buffer 0001  
                                                   ??_TMR_Start 0090  
                                         __end_of_Keypad_Update 1C5E  
                                           __end_of_DO_SetState 19AC  
                                                   ??_MW_Update 0057  
                                                      _LCD_GoTo 1FDE  
                                                      _LCD_Init 1CF4  
                                                      _LCD_Port 1A68  
                                         Set_Time@minutes_units 004B  
                                                      i2u110_40 1148  
                                                      i2u110_41 1142  
                                                      i2u111_40 116C  
                                                      i2u111_41 1166  
                                                      i2u200_40 08C6  
                                                      i2u112_40 11AA  
                                                      i2u120_40 1A08  
                                                      i2u200_41 08C0  
                                                      i2u112_41 11A4  
                                                      i2u120_41 1A02  
                                                      i2u201_40 0912  
                                                      i2u113_40 11E8  
                                                      i2u121_40 1A1C  
                                                      i2u201_41 090C  
                                                      i2u113_41 11E2  
                                                      i2u121_41 1A16  
                                                      i2u130_40 1B78  
                                                      i2u210_40 0A1A  
                                                      i2u202_40 0928  
                                                      i2u114_40 120C  
                                                      i2u122_40 1A3C  
                                                      i2u130_41 1B72  
                                                      i2u210_41 0A14  
                                                      i2u202_41 0922  
                                                      i2u114_41 1206  
                                                      i2u122_41 1A36  
                                                      i2u131_40 1BA0  
                                                      i2u211_40 0A2E  
                                                      i2u203_40 0944  
                                                      i2u115_40 124A  
                                                      i2u107_40 1080  
                                                      i2u123_40 1A50  
                                                      i2u131_41 1B9A  
                                                      i2u211_41 0A28  
                                                      i2u203_41 093E  
                                                      i2u115_41 1244  
                                                      i2u107_41 107A  
                                                      i2u123_41 1A4A  
                                                      i2u132_40 1E44  
                                                      i2u140_40 0D64  
                                                      i2u220_40 0B72  
                                                      i2u212_40 0A7A  
                                                      i2u204_40 0960  
                                                      i2u116_40 12C8  
                                                      i2u108_40 10CC  
                                                      i2u140_41 0D5E  
                                                      i2u220_41 0B6C  
                                                      i2u212_41 0A74  
                                                      i2u204_41 095A  
                                                      i2u116_41 12C2  
                                                      i2u108_41 10C6  
                                                      i2u132_47 1E3A  
                                                      i2u133_40 1E58  
                                                      i2u141_40 0D8C  
                                                      i2u221_40 0B98  
                                                      i2u213_40 0A90  
                                                      i2u205_40 0976  
                                                      i2u109_40 1100  
                                                      i2u133_41 1E52  
                                                      i2u141_41 0D86  
                                                      i2u221_41 0B92  
                                                      i2u213_41 0A8A  
                                                      i2u205_41 0970  
                                                      i2u109_41 10FA  
                                                      i2u150_40 0F72  
                                                      i2u142_40 0DCA  
                                                      i2u230_40 1C0A  
                                                      i2u222_40 0BC2  
                                                      i2u214_40 0AAC  
                                                      i2u206_40 09B6  
                                                      i2u118_40 19D0  
                                                      i2u150_41 0F6C  
                                                      i2u142_41 0DC4  
                                                      i2u230_41 1C04  
                                                      i2u222_41 0BBC  
                                                      i2u214_41 0AA6  
                                                      i2u206_41 09B0  
                                                      i2u118_41 19CA  
                                                      i2u134_45 2002  
                                                      i2u151_40 1040  
                                                      i2u143_40 0DF6  
                                                      i2u231_40 1C26  
                                                      i2u223_40 0C10  
                                                      i2u215_40 0AC8  
                                                      i2u207_40 09CC  
                                                      i2u119_40 19F4  
                                                      i2u151_41 103A  
                                                      i2u143_41 0DF0  
                                                      i2u231_41 1C20  
                                                      i2u223_41 0C0A  
                                                      i2u215_41 0AC2  
                                                      i2u207_41 09C6  
                                                      i2u119_41 19EE  
                                                      i2u135_45 18FE  
                                                      i2u144_40 0E34  
                                                      i2u160_40 1312  
                                                      i2u232_40 1C54  
                                                      i2u128_40 1B28  
                                                      i2u152_40 2088  
                                                      i2u224_40 0C26  
                                                      i2u216_40 0ADE  
                                                      i2u208_40 09E8  
                                                      i2u144_41 0E2E  
                                                      i2u160_41 130C  
                                                      i2u232_41 1C4E  
                                                      i2u128_41 1B22  
                                                      i2u152_41 2082  
                                                      i2u224_41 0C20  
                                                      i2u216_41 0AD8  
                                                      i2u208_41 09E2  
                                         Set_Time@seconds_units 004D  
                                                      i2u136_45 193A  
                                                      i2u240_47 1EEE  
                                                      i2u145_40 0E60  
                                                      i2u161_40 1336  
                                                      i2u129_40 1B50  
                                                      i2u153_40 1E78  
                                                      i2u225_40 0C46  
                                                      i2u217_40 0B10  
                                                      i2u209_40 0A04  
                                                      i2u145_41 0E5A  
                                                      i2u161_41 1330  
                                                      i2u129_41 1B4A  
                                                      i2u153_41 1E72  
                                                      i2u225_41 0C40  
                                                      i2u217_41 0B0A  
                                                      i2u209_41 09FE  
                                                      i2u137_45 1950  
                                                      i2u241_47 1EFC  
                                                      i2u146_40 0E9E  
                                                      i2u138_40 0D08  
                                                      i2u170_40 149A  
                                                      i2u162_40 1356  
                                                      i2u226_40 1F44  
                                                      i2u154_40 1EA4  
                                                      i2u218_40 0B26  
                                                      i2u146_41 0E98  
                                                      i2u138_41 0D02  
                                                      i2u170_41 1494  
                                                      i2u162_41 1350  
                                                      i2u226_41 1F3E  
                                                      i2u154_41 1E9E  
                                                      i2u218_41 0B20  
                                                      i2u242_47 1F12  
                                                      i2u147_40 0ECA  
                                                      i2u139_40 0D44  
                                                      i2u171_40 14B2  
                                                      i2u163_40 136E  
                                                      i2u155_40 1FD8  
                                                      i2u227_40 1F6E  
                                                      i2u219_40 0B54  
                                                      i2u147_41 0EC4  
                                                      i2u139_41 0D3E  
                                                      i2u171_41 14AC  
                                                      i2u163_41 1368  
                                                      i2u155_41 1FD2  
                                                      i2u227_41 1F68  
                                                      i2u219_41 0B4E  
                                                      i2u243_47 1F20  
                                                      i2u148_40 0F08  
                                                      i2u156_40 15E0  
                                                      i2u180_40 17F8  
                                                      i2u228_40 1CDC  
                                                      i2u172_40 14CE  
                                                      i2u164_40 13B4  
                                                      i2u148_41 0F02  
                                                      i2u156_41 15DA  
                                                      i2u180_41 17F2  
                                                      i2u228_41 1CD6  
                                                      i2u172_41 14C8  
                                                      i2u164_41 13AE  
                                                      i2u244_47 21DC  
                                                      i2u149_40 0F34  
                                                      i2u157_40 161C  
                                                      i2u181_40 1826  
                                                      i2u173_40 14F6  
                                                      i2u165_40 13D8  
                                                      i2u229_40 1BDC  
                                                      i2u149_41 0F2E  
                                                      i2u157_41 1616  
                                                      i2u181_41 1820  
                                                      i2u173_41 14F0  
                                                      i2u165_41 13D2  
                                                      i2u229_41 1BD6  
                                                      i2u245_47 12EC  
                                                      i2u158_40 1658  
                                                      i2u182_40 1846  
                                                      i2u174_40 150C  
                                                      i2u166_40 13F8  
                                                      i2u190_40 078C  
                                                      i2u158_41 1652  
                                                      i2u182_41 1840  
                                                      i2u174_41 1506  
                                                      i2u166_41 13F2  
                                                      i2u190_41 0786  
                                                      i2u246_47 138E  
                                                      i2u159_40 169C  
                                                      i2u175_40 1736  
                                                      i2u183_40 1866  
                                                      i2u167_40 1410  
                                                      i2u191_40 07B2  
                                                      i2u159_41 1696  
                                                      i2u175_41 1730  
                                                      i2u183_41 1860  
                                                      i2u167_41 140A  
                                                      i2u191_41 07AC  
                                                      i2u247_47 1430  
                                                      i2u176_40 1756  
                                                      i2u184_40 188C  
                                                      i2u168_40 1456  
                                                      i2u192_40 07CC  
                                                      i2u176_41 1750  
                                                      i2u184_41 1886  
                                                      i2u168_41 1450  
                                                      i2u192_41 07C6  
                                                      i2u177_40 1782  
                                                      i2u185_40 18A8  
                                                      i2u169_40 147A  
                                                      i2u193_40 07E6  
                                                      i2u177_41 177C  
                                                      i2u185_41 18A2  
                                                      i2u169_41 1474  
                                                      i2u193_41 07E0  
                                                      i2u178_40 17A8  
                                                      i2u186_40 18D4  
                                                      i2u194_40 080C  
                                                      i2u178_41 17A2  
                                                      i2u186_41 18CE  
                                                      i2u194_41 0806  
                                                      i2u179_40 17CA  
                                                      i2u195_40 083A  
                                                      i2u187_40 06D8  
                                                      i2u179_41 17C4  
                                                      i2u195_41 0834  
                                                      i2u187_41 06D2  
                                                      i2u196_40 0850  
                                                      i2u188_40 070E  
                                                      i2u196_41 084A  
                                                      i2u188_41 0708  
                                                      i2u197_40 0876  
                                                      i2u189_40 0732  
                                                      i2u197_41 0870  
                                                      i2u189_41 072C  
                                                      i2u198_40 089C  
                                                      i2u198_41 0896  
                                                      i2u199_40 08B2  
                                                      i2u199_41 08AC  
                                             LCD_SendData@Low_4 004C  
                                             i2_LCD_SendCommand 21C2  
                                        LCD_SendCommand@command 0091  
                                                   ??_SW_Update 004B  
                                            ?i2_LCD_SendCommand 004B  
                                                   ??_Disp_Time 005F  
                                                      _TIM_Init 22D0  
                                                      _TMR_Init 22C0  
                                    Disp_and_Blink_Time@Min_Ten 005E  
                                    Disp_and_Blink_Time@Sec_Ten 0058  
                                           ??i2_LCD_SendCommand 004C  
                                                 ??_TIM_GetTime 004D  
                                               LCD_GoTo@address 0054  
                                              __size_of_DO_Init 0036  
                                          __size_of_Keypad_Init 0040  
                                          __size_of_Keypad_Scan 0266  
                                                     copy_data0 2040  
                               Disp_and_Blink_Time@LCD_Buffer_1 002B  
                                                      _SWs_Info 0008  
                                                      _Min_Unit 0023  
                                                      _Sec_Unit 0021  
                                      __size_of_Set_LCD_BUFFER1 001A  
                                      __size_of_Set_LCD_BUFFER2 001A  
                                              __size_of_SW_Init 0074  
                                  ?_Keypad_Get_Data_From_buffer 004B  
                                         LCD_SendChar@character 0057  
                                     __end_ofi2_LCD_SendCommand 21EC  
                                                      _Set_Time 21EC  
                                                      __Hrparam 0000  
                                                      __Lrparam 0000  
                                           _Current_Count_State 0076  
                                         LCD_SendData@character 004E  
                                              __size_of___awdiv 00F0  
                                              __size_of___awmod 00DC  
                                             ??_LCD_SendCommand 0091  
                                   Disp_Time@Disp_Current_State 0061  
                                          Disp_and_Blink_Time@i 005D  
                                    MW_Update@MW_Update_Counter 0075  
                                                _Set_Disp_State 22EA  
                          __size_of_Set_TIM_Current_Count_State 000C  
                                ??_Set_Disp_Current_Count_State 004B  
                                                 _TIM_ZERO_INIT 0016  
                                                   _DO_SetState 18EC  
                                                      __ptext11 19AC  
                                                      __ptext20 2232  
                                                      __ptext12 1060  
                                                      __ptext21 22AE  
                                                      __ptext13 069C  
                                                      __ptext30 1B14  
                                                      __ptext22 2072  
                                                      __ptext14 1E5E  
                                                      __ptext31 1BBC  
                                                      __ptext23 20F4  
                                                      __ptext15 18EC  
                                                      __ptext40 2266  
                                                      __ptext32 12CE  
                                                      __ptext24 1F2A  
                                                      __ptext16 21EC  
                                                      __ptext41 1DF6  
                                                      __ptext33 1C5E  
                                                      __ptext25 1F8C  
                                                      __ptext17 22DE  
                                                      __ptext34 1810  
                                                      __ptext26 2280  
                                                      __ptext18 22EA  
                                                      __ptext35 1720  
                                                      __ptext27 1EC4  
                                                      __ptext19 22F6  
                                                      __ptext36 2210  
                                                      __ptext28 1FDE  
                                                      __ptext37 1534  
                                                      __ptext29 21C2  
                                                      __ptext38 0CDE  
                                                      __ptext39 224C  
                                       __size_of_LCD_SendString 0052  
                                         __size_of_Toggle_Lamps 0066  
                                                    strcpy@dest 004B  
                                           __end_of_TIM_GetTime 2232  
                               Keypad_Get_Data_From_buffer@pKey 004B  
                                                 __size_of_main 0030  
                                                  _Weight_State 002A  
                                 ??_Keypad_Get_Data_From_buffer 004D  
                                             DO_SetState@device 004E  
                                                      int$flags 0078  
                                                    _LCD_Update 1F2A  
                                               Disp_Update@time 0062  
                                  LCD_Update@LCD_Update_Counter 0074  
                                        __end_of_Set_Disp_State 22F6  
                                                _TIM_Start_Flag 0018  
                                                  _Toggle_Lamps 1E5E  
                                                      intlevel2 230A  
                                                    i2_LCD_Port 1B14  
                                                     strcpy@src 004D  
                                                 ??_SW_GetState 004B  
                            Keypad_Update@Keypad_Update_Counter 000E  
                                    __size_ofi2_LCD_SendCommand 002A  
                                             ??_Set_LCD_BUFFER1 0057  
                                             ??_Set_LCD_BUFFER2 0057  
                                            LCD_SendString@line 005B  
                                            Keypad_Scan@Old_Key 0019  
                                               ?_Set_Disp_State 004B  
                                                   _TIM_GetTime 2210  
                                             LCD_SendString@col 005A  
                                             _LCD_LINE_1_Buffer 003B  
                                             LCD_SendString@str 0058  
                                             _LCD_LINE_2_Buffer 0080  
                                   __end_of_Disp_and_Blink_Time 1060  
                                                 ??_Disp_Update 0062  
                                                    _TIM_Update 19AC  
                                                 ??_Is_Finished 004B  
